package com.newgen.DCC.Notify;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;

import com.newgen.common.CommonConnection;
import com.newgen.common.CommonMethods;
import com.newgen.omni.jts.cmgr.NGXmlList;
import com.newgen.omni.jts.cmgr.XMLParser;

public class DCC_Notify_CAPS {
	
	
	private static Logger DCC_Notify_CAPSLog=null;
	DCC_Notify_CAPS(Logger DCC_Notify_CAPSLogName)
	{
		DCC_Notify_CAPSLog=DCC_Notify_CAPSLogName;
	}
	
	public void DCC_Notify_CAPS_Integration(String cabinetName,String sessionId,String sJtsIp, String iJtsPort , String processInstanceID,
			String ws_name,String username, int socket_connection_timeout,int integrationWaitTime,
			HashMap<String, String> socketDetailsMap)
	{
		String FinalStatus="";
		try
		{
			DCC_Notify_CAPSLog.debug("Inside notify CAPS for Work Item--"+processInstanceID);
			StringBuilder sInputXML=new StringBuilder();
			
			
			String DBQuery = "SELECT CIF,ECRN,RM_Code,Credit_Shield_Flag,FinalTAI,Net_salary1_date,FinalDBR,Final_Limit,cast(SUBSTRING(Net_salary1_date,9,11)as int)+2 as salary_day,"+
							"delegation_authority, deviation_description,bureau_reference_number,CURR_WSNAME FROM NG_DCC_EXTTABLE with(nolock) WHERE WI_NAME='"+processInstanceID+"'";

			String extTabDataIPXML = CommonMethods.apSelectWithColumnNames(DBQuery,cabinetName, sessionId);
			DCC_Notify_CAPSLog.debug("CIF Update data input: "+ extTabDataIPXML);
			String extTabDataOPXML = CommonMethods.WFNGExecute(extTabDataIPXML,CommonConnection.getJTSIP(),CommonConnection.getJTSPort(),1);
			DCC_Notify_CAPSLog.debug("CIF Update data output: "+ extTabDataOPXML);

			XMLParser xmlParserData= new XMLParser(extTabDataOPXML);						
			int iTotalrec = Integer.parseInt(xmlParserData.getValueOf("TotalRetrieved"));

			
			
			if(xmlParserData.getValueOf("MainCode").equalsIgnoreCase("0")&& iTotalrec>0)
			{
				
				String CIF=xmlParserData.getValueOf("CIF");
				String ECRN=xmlParserData.getValueOf("ECRN");
				String RM_Code=xmlParserData.getValueOf("RM_Code");
				String Credit_Shield_Flag=xmlParserData.getValueOf("Credit_Shield_Flag");
				String FinalTAI=xmlParserData.getValueOf("FinalTAI");
				String Net_salary1_date=xmlParserData.getValueOf("Net_salary1_date");
				String FinalDBR=xmlParserData.getValueOf("FinalDBR");
				String Final_Limit=xmlParserData.getValueOf("Final_Limit");
				String salary_day=xmlParserData.getValueOf("salary_day");
				String delegation_authority=xmlParserData.getValueOf("delegation_authority");
				String deviation_description=xmlParserData.getValueOf("deviation_description");
				String bureau_reference_number=xmlParserData.getValueOf("bureau_reference_number");
				String CURR_WSNAME=xmlParserData.getValueOf("deviation_description");
				
				String fileLocation=new StringBuffer().append(System.getProperty("user.dir")).append(System.getProperty("file.separator")).append("DCC_Integration")
    		    		.append(System.getProperty("file.separator")).append("DCC_NOTIFY_CAPS.txt").toString();
				BufferedReader sbf=new BufferedReader(new FileReader(fileLocation));
	    		String line=sbf.readLine();
	    		while(line!=null)
	    		{
	    			sInputXML.append(line);
	    			sInputXML.append(System.lineSeparator());
	    			line=sbf.readLine();
	    		}
				
				String DeviationQuery="select  top 5 Deviation_Code from NG_DCC_GR_DEVIATION_DESCRIPTIO with(nolock) where Wi_Name ='"+processInstanceID+"'";
				String extTabDataIPXMLDeviation = CommonMethods.apSelectWithColumnNames(DeviationQuery,cabinetName, sessionId);
				DCC_Notify_CAPSLog.debug("CIF Update data input: "+ extTabDataIPXMLDeviation);
				String extTabDataOPXMLDeviation = CommonMethods.WFNGExecute(extTabDataIPXMLDeviation,CommonConnection.getJTSIP(),CommonConnection.getJTSPort(),1);
				DCC_Notify_CAPSLog.debug("CIF Update data output: "+ extTabDataOPXMLDeviation);
				HashMap<String, String> CheckGridDataMap = new HashMap<String, String>();
				XMLParser xmlParserDataDeviation= new XMLParser(extTabDataOPXMLDeviation);						
				int iTotalrecDeviation = Integer.parseInt(xmlParserDataDeviation.getValueOf("TotalRetrieved"));
				if(xmlParserDataDeviation.getValueOf("MainCode").equalsIgnoreCase("0")&& iTotalrecDeviation>0)
				{
					//String xmlDataExtTab=xmlParserDataDeviation.getNextValueOf("Record");
					//xmlDataExtTab =xmlDataExtTab.replaceAll("[ ]+>",">").replaceAll("<[ ]+", "<");
					
					//XMLParser xmlParserExtTabDataRecord = new XMLParser(xmlDataExtTab);
					NGXmlList objWorkList=xmlParserDataDeviation.createList("Records", "Record");
					
					for (; objWorkList.hasMoreElements(true); objWorkList.skip(true))
					{
						String code=objWorkList.getVal("Deviation_Code");
						
						
					}
				}
				

				
											
				
				DCC_Notify_CAPSLog.debug("WINAME : "+processInstanceID);

				String integrationStatus=socketConnection( cabinetName,  username,  sessionId,  sJtsIp,
						 iJtsPort,  processInstanceID,  ws_name,
						 socket_connection_timeout,  integrationWaitTime, socketDetailsMap,  sInputXML);

				DCC_Notify_CAPSLog.debug("CIF Update integrationStatus: " +integrationStatus);
				String statuses [] = integrationStatus.split("~");
				if(statuses[0].equalsIgnoreCase("0000"))
				{
					FinalStatus = "Success";
				} 
				else
				{
					FinalStatus = "Failure~ For CIF: "+CheckGridDataMap.get("CIFID")+"~ MsgStatus: "+statuses[1]+"~ MsgId: "+statuses[2];
				}

				
			
			}
			else
			{
				FinalStatus = "Failure";
			}
		}
		catch(Exception e)
		{
			DCC_Notify_CAPSLog.debug("Exception in DCC_Notify_CAPS_Integration: " +e.toString());
		}
	}
	String socketConnection(String cabinetName, String username, String sessionId, String sJtsIp,
			String iJtsPort, String processInstanceID, String ws_name,
			int connection_timeout, int integrationWaitTime,HashMap<String, String> socketDetailsMap, StringBuilder sInputXML)
	{

		String socketServerIP;
		int socketServerPort;
		Socket socket = null;
		OutputStream out = null;
		InputStream socketInputStream = null;
		DataOutputStream dout = null;
		DataInputStream din = null;
		String outputResponse = null;
		String inputRequest = null;
		String inputMessageID = null;



		try
		{

			DCC_Notify_CAPSLog.debug("userName "+ username);
			DCC_Notify_CAPSLog.debug("SessionId "+ sessionId);

			socketServerIP=socketDetailsMap.get("SocketServerIP");
			DCC_Notify_CAPSLog.debug("SocketServerIP "+ socketServerIP);
			socketServerPort=Integer.parseInt(socketDetailsMap.get("SocketServerPort"));
			DCC_Notify_CAPSLog.debug("SocketServerPort "+ socketServerPort);

	   		if (!("".equalsIgnoreCase(socketServerIP) && socketServerIP == null && socketServerPort==0))
	   		{

    			socket = new Socket(socketServerIP, socketServerPort);
    			socket.setSoTimeout(connection_timeout*1000);
    			out = socket.getOutputStream();
    			socketInputStream = socket.getInputStream();
    			dout = new DataOutputStream(out);
    			din = new DataInputStream(socketInputStream);
    			DCC_Notify_CAPSLog.debug("Dout " + dout);
    			DCC_Notify_CAPSLog.debug("Din " + din);

    			outputResponse = "";



    			inputRequest = getRequestXML( cabinetName,sessionId ,processInstanceID, ws_name, username, sInputXML);


    			if (inputRequest != null && inputRequest.length() > 0)
    			{
    				int inputRequestLen = inputRequest.getBytes("UTF-16LE").length;
    				DCC_Notify_CAPSLog.debug("RequestLen: "+inputRequestLen + "");
    				inputRequest = inputRequestLen + "##8##;" + inputRequest;
    				DCC_Notify_CAPSLog.debug("InputRequest"+"Input Request Bytes : "+ inputRequest.getBytes("UTF-16LE"));
    				dout.write(inputRequest.getBytes("UTF-16LE"));dout.flush();
    			}
    			byte[] readBuffer = new byte[500];
    			int num = din.read(readBuffer);
    			if (num > 0)
    			{

    				byte[] arrayBytes = new byte[num];
    				System.arraycopy(readBuffer, 0, arrayBytes, 0, num);
    				outputResponse = outputResponse+ new String(arrayBytes, "UTF-16LE");
					inputMessageID = outputResponse;
    				DCC_Notify_CAPSLog.debug("OutputResponse: "+outputResponse);

    				if(!"".equalsIgnoreCase(outputResponse))

    					outputResponse = getResponseXML(cabinetName,sJtsIp,iJtsPort,sessionId,
    							processInstanceID,outputResponse,integrationWaitTime );




    				if(outputResponse.contains("&lt;"))
    				{
    					outputResponse=outputResponse.replaceAll("&lt;", "<");
    					outputResponse=outputResponse.replaceAll("&gt;", ">");
    				}
    			}
    			socket.close();

				outputResponse = outputResponse.replaceAll("</MessageId>","</MessageId>/n<InputMessageId>"+inputMessageID+"</InputMessageId>");

				//DCC_Notify_CAPSLog.debug("outputResponse "+outputResponse);
				return outputResponse;

    	 		}

    		else
    		{
    			DCC_Notify_CAPSLog.debug("SocketServerIp and SocketServerPort is not maintained "+"");
    			DCC_Notify_CAPSLog.debug("SocketServerIp is not maintained "+	socketServerIP);
    			DCC_Notify_CAPSLog.debug(" SocketServerPort is not maintained "+	socketServerPort);
    			return "Socket Details not maintained";
    		}

		}

		catch (Exception e)
		{
			DCC_Notify_CAPSLog.debug("Exception Occured Mq_connection_CC"+e.getStackTrace());
			return "";
		}
		finally
		{
			try
			{
				if(out != null)
				{
					out.close();
					out=null;
				}
				if(socketInputStream != null)
				{

					socketInputStream.close();
					socketInputStream=null;
				}
				if(dout != null)
				{

					dout.close();
					dout=null;
				}
				if(din != null)
				{

					din.close();
					din=null;
				}
				if(socket != null)
				{
					if(!socket.isClosed())
						socket.close();
					socket=null;
				}

			}

			catch(Exception e)
			{
				DCC_Notify_CAPSLog.debug("Final Exception Occured Mq_connection_CC"+e.getStackTrace());
				//printException(e);
			}
		}


	}
	private String getRequestXML(String cabinetName, String sessionId,
			String processInstanceID, String ws_name, String userName, StringBuilder sInputXML)
	{
		StringBuffer strBuff = new StringBuffer();
		strBuff.append("<APMQPUTGET_Input>");
		strBuff.append("<SessionId>" + sessionId + "</SessionId>");
		strBuff.append("<EngineName>" + cabinetName + "</EngineName>");
		strBuff.append("<XMLHISTORY_TABLENAME>NG_DCC_XMLLOG_HISTORY</XMLHISTORY_TABLENAME>");
		strBuff.append("<WI_NAME>" + processInstanceID + "</WI_NAME>");
		strBuff.append("<WS_NAME>" + ws_name + "</WS_NAME>");
		strBuff.append("<USER_NAME>" + userName + "</USER_NAME>");
		strBuff.append("<MQ_REQUEST_XML>");
		strBuff.append(sInputXML);
		strBuff.append("</MQ_REQUEST_XML>");
		strBuff.append("</APMQPUTGET_Input>");
		DCC_Notify_CAPSLog.debug("GetRequestXML: "+ strBuff.toString());
		return strBuff.toString();

	}
	private String getResponseXML(String cabinetName,String sJtsIp,String iJtsPort, String
			sessionId, String processInstanceID,String message_ID, int integrationWaitTime)
	{

		String outputResponseXML="";
		try
		{
			String QueryString = "select OUTPUT_XML from NG_DCC_XMLLOG_HISTORY with (nolock) where " +
					"MESSAGE_ID ='"+message_ID+"' and WI_NAME = '"+processInstanceID+"'";

			String responseInputXML =CommonMethods.apSelectWithColumnNames(QueryString, cabinetName, sessionId);
			DCC_Notify_CAPSLog.debug("Response APSelect InputXML: "+responseInputXML);

			int Loop_count=0;
			do
			{
				String responseOutputXML=CommonMethods.WFNGExecute(responseInputXML,sJtsIp,iJtsPort,1);
				DCC_Notify_CAPSLog.debug("Response APSelect OutputXML: "+responseOutputXML);

			    XMLParser xmlParserSocketDetails= new XMLParser(responseOutputXML);
			    String responseMainCode = xmlParserSocketDetails.getValueOf("MainCode");
			    DCC_Notify_CAPSLog.debug("ResponseMainCode: "+responseMainCode);



			    int responseTotalRecords = Integer.parseInt(xmlParserSocketDetails.getValueOf("TotalRetrieved"));
			    DCC_Notify_CAPSLog.debug("ResponseTotalRecords: "+responseTotalRecords);

			    if (responseMainCode.equals("0") && responseTotalRecords > 0)
				{

					String responseXMLData=xmlParserSocketDetails.getNextValueOf("Record");
					responseXMLData =responseXMLData.replaceAll("[ ]+>",">").replaceAll("<[ ]+", "<");

	        		XMLParser xmlParserResponseXMLData = new XMLParser(responseXMLData);
	        		//DCC_Notify_CAPSLog.debug("ResponseXMLData: "+responseXMLData);

	        		outputResponseXML=xmlParserResponseXMLData.getValueOf("OUTPUT_XML");
	        		//DCC_Notify_CAPSLog.debug("OutputResponseXML: "+outputResponseXML);

	        		if("".equalsIgnoreCase(outputResponseXML)){
	        			outputResponseXML="Error";
	    			}
	        		break;
				}
			    Loop_count++;
			    Thread.sleep(1000);
			}
			while(Loop_count<integrationWaitTime);
			DCC_Notify_CAPSLog.debug("integrationWaitTime: "+integrationWaitTime);

		}
		catch(Exception e)
		{
			DCC_Notify_CAPSLog.debug("Exception occurred in outputResponseXML" + e.getMessage());
			DCC_Notify_CAPSLog.debug("Exception occurred in outputResponseXML" + e.getStackTrace());
			outputResponseXML="Error";
		}

		return outputResponseXML;

	}
}
