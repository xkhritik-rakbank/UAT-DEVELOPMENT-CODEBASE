package com.newgen.DCC.DECTECHIntegration;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.newgen.common.CommonConnection;
import com.newgen.common.CommonMethods;
import com.newgen.omni.jts.cmgr.XMLParser;
import com.newgen.omni.wf.util.app.NGEjbClient;
import com.newgen.omni.wf.util.excp.NGException;
import com.newgen.wfdesktop.xmlapi.WFCallBroker;


public class DCC_DECTECH_Integration_Input implements java.io.Serializable {
	
	private static final long serialVersionUID = 1L;
	
	static Map<String, String> DCCSystemIntegrationMap = new HashMap<String, String>();
	
	static NGEjbClient ngEjbClient;
	
	public static String GenerateXML(String wi_name, String activityID, String activityType, String processDefId) {
		
		try {
			String sessionID = "";
			String cabinetName = "";
			String jtsIP = "";
			String jtsPort = "";
			String queueID = "";
			int socketConnectionTimeout=0;
			int integrationWaitTime=0;
			int sleepIntervalInMin=0;
	
	
			DECTECHSystemIntegrationLog.setLogger();
			ngEjbClient = NGEjbClient.getSharedInstance();
			
			
			int configReadStatus = readConfig();
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("configReadStatus "+configReadStatus);
			if(configReadStatus !=0)
			{
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.error("Could not Read Config Properties [DCC_DECTECH_System_Integration_Config.properties]");
				return "";
			}

			cabinetName = CommonConnection.getCabinetName();
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Cabinet Name: " + cabinetName);

			jtsIP = CommonConnection.getJTSIP();
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("JTSIP: " + jtsIP);

			jtsPort = CommonConnection.getJTSPort();
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("JTSPORT: " + jtsPort);

			queueID = DCCSystemIntegrationMap.get("queueID");
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("QueueID: " + queueID);

			socketConnectionTimeout=Integer.parseInt(DCCSystemIntegrationMap.get("MQ_SOCKET_CONNECTION_TIMEOUT"));
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SocketConnectionTimeOut: "+socketConnectionTimeout);

			integrationWaitTime=Integer.parseInt(DCCSystemIntegrationMap.get("INTEGRATION_WAIT_TIME"));
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("IntegrationWaitTime: "+integrationWaitTime);

			sleepIntervalInMin=Integer.parseInt(DCCSystemIntegrationMap.get("SleepIntervalInMin"));
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SleepIntervalInMin: "+sleepIntervalInMin);

			String WorkItemID = DCCSystemIntegrationMap.get("WorkItemId");
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Current WorkItemID: " + WorkItemID);

			sessionID = CommonConnection.getSessionID(DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger, false);

			if(sessionID.trim().equalsIgnoreCase(""))
			{
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Could Not Connect to Server!");
			}
			else
			{
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Session ID found: " + sessionID);
				HashMap<String, String> socketDetailsMap= socketConnectionDetails(cabinetName, jtsIP, jtsPort, sessionID);
				while(true)
				{
					DECTECHSystemIntegrationLog.setLogger();
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("DECTECH CIF Verification...123.");
					generateRequestXML(cabinetName, jtsIP, jtsPort, sessionID, queueID, socketConnectionTimeout,
							integrationWaitTime, socketDetailsMap, wi_name, WorkItemID, activityID, activityType, processDefId);
					//System.out.println("No More workitems to Process, Sleeping!");
				}
			}
			
			return wi_name;
		} catch (NGException e) {
			e.printStackTrace();
		}
		return wi_name;
	}
	
	private static  void generateRequestXML(String cabinetName, String jtsIP, String jtsPort, String sessionID,
			String queueID, int socketConnectionTimeout2, int integrationWaitTime2,
			HashMap<String, String> socketDetailsMap, String wi_name, String WorkItemID, String activityID, String activityType, String processDefId) {
		String ws_name = "DECTECH_Integration";
	
		
		try {
			/** Select data and put in the map from NG_DCC_EXTTABLE **/
			String DBQuery = "SELECT Wi_Name, Application_Type, CIF_ID, Product, Sub_Product, Card_Product, CUSTOMERNAME, PassportNo, EmirateID, MobileNo, employercode, "
					+ "Employer_Name, EmploymentType, email_id, Final_Limit, VIPFlag, Title, FirstName, MiddleName, LastName, dob, Nationality, Designation, Basic_Sal, "
					+ "Prospect_id, FinalDBR, FinalTAI, Passport_expiry, Gender, IndusSeg, EligibleCardProduct FROM NG_DCC_EXTTABLE with(nolock) WHERE WI_NAME='" + wi_name + "'";
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Select NG_DCC_EXTTABLE Query: "+DBQuery);
			
			String[] columns = { "Wi_Name", "Application_Type", "CIF_ID", "Product", "Sub_Product", "Card_Product",
					"CUSTOMERNAME", "PassportNo", "EmirateID", "MobileNo", "employercode", "Employer_Name",
					"EmploymentType", "email_id", "Final_Limit", "VIPFlag", "Title", "FirstName", "MiddleName",
					"LastName", "dob", "Nationality", "Designation", "Basic_Sal", "Prospect_id", "FinalDBR", "FinalTAI",
					"Passport_expiry", "Gender", "IndusSeg", "EligibleCardProduct" };
			
			Map<String,String> ApplicantDetails_Map = getDataFromDB(DBQuery, cabinetName, sessionID, jtsIP, jtsPort, columns);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Total Retrieved Records: " + ApplicantDetails_Map.get("TotalRetrieved"));
			System.out.println("Total Retrieved Records: " + ApplicantDetails_Map.get("TotalRetrieved"));
			
			StringBuilder stringBuilder = readRequestXmlSample();
			
			String requested_xml = stringBuilder.toString().replace(">Str_ApplicationNumber<",">"+wi_name+"<");
			
			/** Application Details Tag**/
			SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.mmm");
			
			requested_xml.replace(">str_TimeStampyyyymmddhhmmsss<",">"+sdf1.format(new Date())+"<");
			
			String DateExtra2 = sdf1.format(new Date())+"+04:00";
			
			requested_xml = requested_xml.replace(">Str_full_eligibility_availed<",">"+ApplicantDetails_Map.get("EligibleCardProduct")+"<")
					.replace(">Str_product_type<",">CON<")
					.replace(">Str_app_category<",">BAU<")
					.replace(">Str_requested_product<",">"+validateValue(ApplicantDetails_Map.get("Card_Product"))+"<") //
					.replace(">Str_requested_limit<",">"+validateValue(ApplicantDetails_Map.get("Final_Limit"))+"<")
					.replace(">Str_sub_product<",">"+validateValue(ApplicantDetails_Map.get("Sub_Product"))+"<")
					.replace(">Str_requested_card_product<",">"+validateValue(ApplicantDetails_Map.get("Card_Product"))+"<")
					.replace(">Str_interest_rate<",">0.00<")
					.replace(">Str_customer_type<",">NEW<")
					.replace(">Str_final_limit<",">"+validateValue(ApplicantDetails_Map.get("Final_Limit"))+"<")
					.replace(">Str_emi<",">0.00<")
					.replace(">Str_manual_deviation<",">N<")
					.replace(">Str_application_date<",">"+DateExtra2+"<");
			
			requested_xml = requested_xml.replace(">Str_Wi_Name<",">"+wi_name+"<");
			
			String app_details = sInputXmlApplicantDetails(ApplicantDetails_Map, cabinetName, sessionID, jtsIP, jtsPort);
			requested_xml = requested_xml.replace("<String_ApplicantDetails>",app_details);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("DCC sInputXmlApplicantDetails : \n"+ requested_xml);
			
			/** External Bureau sub-tag **/
			String external_Bureau = sInputXmlExternalBureau(ApplicantDetails_Map, cabinetName, sessionID, jtsIP, jtsPort);
			requested_xml = requested_xml.replace("<String_ExternalBureau>",external_Bureau);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("DCC sInputXmlExternalBureau : \n"+ requested_xml);
			
			/** Court Cases sub-Tag **/
			String court_cases = sInputXmlExternalCourtCase(wi_name, cabinetName, sessionID, jtsIP, jtsPort);
			requested_xml = requested_xml.replace("<String_CourtCase>",court_cases);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("DCC sInputXmlExternalCourtCase : \n"+ requested_xml);
			
			/** Cheque Bounce sub-Tag **/
			String bounced_Cheques = sInputXmlExternalBouncedCheques(wi_name, cabinetName, sessionID, jtsIP, jtsPort);
			requested_xml = requested_xml.replace("<String_BouncedCheques>",bounced_Cheques);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("DCC sInputXmlExternalBouncedCheques : \n"+ requested_xml);
			
			/** External Bureau Individual Products sub-Tag **/
			String individual_Products = sInputXmlExternalBureauIndividualProducts(wi_name, cabinetName, sessionID, jtsIP, jtsPort);
			requested_xml = requested_xml.replace("<String_ExternalBureauIndividualProducts>",individual_Products);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("DCC sInputXmlExternalBureauIndividualProducts : \n"+ requested_xml);
			
			/** External Bureau Pipeline Products sub-tag**/
			String pipeline_Products = sInputXmlExternalBureauPipelineProducts(wi_name, cabinetName, sessionID, jtsIP, jtsPort);
			requested_xml = requested_xml.replace("<String_ExternalBureauPipelineProducts>",pipeline_Products);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("DCC sInputXmlExternalBureauPipelineProducts : \n"+ requested_xml);
			
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("DCC"+ "Final XML : \n"+ requested_xml);
			
			String integrationStatus="Success";
			String attributesTag;
			String ErrDesc = "";
			StringBuilder finalString=new StringBuilder(requested_xml);
			HashMap<String, String> socketConnectionMap =socketConnectionDetails(cabinetName, jtsIP, jtsPort, sessionID); 
			
			integrationStatus = socketConnection(cabinetName, CommonConnection.getUsername(), sessionID, jtsIP, jtsPort, wi_name, ws_name, 60, 65,socketConnectionMap, finalString);
			
			XMLParser xmlParserSocketDetails= new XMLParser(integrationStatus);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug(" xmlParserSocketDetails : "+xmlParserSocketDetails);
			String return_code = xmlParserSocketDetails.getValueOf("ReturnCode");
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Return Code: "+return_code+ "WI: "+wi_name);
			String return_desc = xmlParserSocketDetails.getValueOf("ReturnDesc");
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("return_desc : "+return_desc+ "WI: "+wi_name);
			
			String MsgId ="";
			if (integrationStatus.contains("<MessageId>"))
				MsgId = xmlParserSocketDetails.getValueOf("MessageId");
			
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("MsgId : "+MsgId+" for WI: "+wi_name);
			
			if(return_code.equalsIgnoreCase("0000"))
			{
				integrationStatus="Success";
				ErrDesc = "DECTECH Done Successfully";
			}
			String decisionValue="";
			if ("Success".equalsIgnoreCase(integrationStatus))
			{
				decisionValue = "Success";
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Decision in success: " +decisionValue);
				attributesTag="<Decision>"+decisionValue+"</Decision>";
			}
			else
			{
				ErrDesc = integrationStatus.replace("~", ",").replace("|", "\n");
				decisionValue = "Failed";
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Decision in else : " +decisionValue);
				attributesTag="<Decision>"+decisionValue+"</Decision>";
			}

			//Lock Workitem.
			String getWorkItemInputXML = CommonMethods.getWorkItemInput(cabinetName, sessionID, wi_name, WorkItemID);
			String getWorkItemOutputXml = WFNGExecute(getWorkItemInputXML,jtsIP,jtsPort,1);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Output XML For WmgetWorkItemCall: "+ getWorkItemOutputXml);

			XMLParser xmlParserGetWorkItem = new XMLParser(getWorkItemOutputXml);
			String getWorkItemMainCode = xmlParserGetWorkItem.getValueOf("MainCode");
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("WmgetWorkItemCall Maincode:  "+ getWorkItemMainCode);

			if (getWorkItemMainCode.trim().equals("0"))
			{
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("WMgetWorkItemCall Successful: "+getWorkItemMainCode);

				String assignWorkitemAttributeInputXML = "<?xml version=\"1.0\"?><WMAssignWorkItemAttributes_Input>"
						+ "<Option>WMAssignWorkItemAttributes</Option>"
						+ "<EngineName>"+cabinetName+"</EngineName>"
						+ "<SessionId>"+sessionID+"</SessionId>"
						+ "<ProcessInstanceId>"+wi_name+"</ProcessInstanceId>"
						+ "<WorkItemId>"+WorkItemID+"</WorkItemId>"
						+ "<ActivityId>"+activityID+"</ActivityId>"
						+ "<ProcessDefId>"+processDefId+"</ProcessDefId>"
						+ "<LastModifiedTime></LastModifiedTime>"
						+ "<ActivityType>"+activityType+"</ActivityType>"
						+ "<complete>D</complete>"
						+ "<AuditStatus></AuditStatus>"
						+ "<Comments></Comments>"
						+ "<UserDefVarFlag>Y</UserDefVarFlag>"
						+ "<Attributes>"+attributesTag+"</Attributes>"
						+ "</WMAssignWorkItemAttributes_Input>";
				
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("InputXML for DECTECH Call : "+assignWorkitemAttributeInputXML);

				String assignWorkitemAttributeOutputXML=WFNGExecute(assignWorkitemAttributeInputXML,jtsIP,jtsPort,1);
				
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("OutputXML for DECTECH Call Notify: "+assignWorkitemAttributeOutputXML);
				
				XMLParser xmlParserWorkitemAttribute = new XMLParser(assignWorkitemAttributeOutputXML);
				String assignWorkitemAttributeMainCode = xmlParserWorkitemAttribute.getValueOf("MainCode");
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("DECTECH MainCode: "+assignWorkitemAttributeMainCode);

				if(assignWorkitemAttributeMainCode.trim().equalsIgnoreCase("0"))
				{
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("DECTECH Successful: "+assignWorkitemAttributeMainCode);

					System.out.println(wi_name + "Complete Succesfully with status "+decisionValue);

					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("WorkItem moved to next Workstep.");

					//Insert in WIHistory Table.decisionValue
					decisionValue = "Success";
				}
				else
				{
					//assignWorkitemAttributeMainCode="";
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("decisionValue : "+decisionValue);
					decisionValue = "Failed";
				}
				
				DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");

				Date actionDateTime= new Date();
				String formattedActionDateTime=dateFormat.format(actionDateTime);
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("FormattedActionDateTime: "+formattedActionDateTime);
				String columnNames="wi_name,decision_date_time,workstep,user_name,Decision,Remarks";
				String columnValues="'"+wi_name+"','"+formattedActionDateTime+"','"+ws_name+"','"
				+CommonConnection.getUsername()+"','"+decisionValue+"','"+ErrDesc+"'";

				String apInsertInputXML=CommonMethods.apInsert(cabinetName, sessionID, columnNames, columnValues,"NG_DCC_GR_DECISION_HISTORY");
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("APInsertInputXML: "+apInsertInputXML);

				String apInsertOutputXML = WFNGExecute(apInsertInputXML,jtsIP,jtsPort,1);
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("APInsertOutputXML: "+ apInsertInputXML);

				XMLParser xmlParserAPInsert = new XMLParser(apInsertOutputXML);
				String apInsertMaincode = xmlParserAPInsert.getValueOf("MainCode");
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Status of apInsertMaincode  "+ apInsertMaincode);

				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Completed On "+ ws_name);


				if(apInsertMaincode.equalsIgnoreCase("0"))
				{
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("ApInsert successful: "+apInsertMaincode);
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Inserted in WiHistory table successfully.");
				}
				else
				{
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("ApInsert failed: "+apInsertMaincode);
				}
				
			}
			else
			{
				getWorkItemMainCode="";
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("WmgetWorkItem failed: "+getWorkItemMainCode);
			}
		} catch (Exception e) {
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Exception: "+e.getMessage());
		}
	}

	private static  StringBuilder readRequestXmlSample(){
		StringBuilder sb=new StringBuilder("");
		try {
			String fileLocation=new StringBuffer().append(System.getProperty("user.dir")).append(System.getProperty("file.separator")).append("DCC_Integration")
					.append(System.getProperty("file.separator")).append("DECTECH_Integration.txt").toString();
			BufferedReader sbf = new BufferedReader(new FileReader(fileLocation));
			
			String line = sbf.readLine();
			while (line != null) {
				sb.append(line);
				sb.append(System.lineSeparator());
				line = sbf.readLine();
			}
		} catch (FileNotFoundException e) {
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.error("In Reading DECTECH_Integration.txt : " + e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.error("In Reading DECTECH_Integration.txt : " + e.getMessage());
			e.printStackTrace();
		}
		return sb;
	}
	
	protected static String WFNGExecute(String ipXML, String jtsServerIP, String serverPort, int flag)
			throws IOException, Exception {
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("In WF NG Execute : " + serverPort);
		try {
			if (serverPort.startsWith("33"))
				return WFCallBroker.execute(ipXML, jtsServerIP, Integer.parseInt(serverPort), 1);
			else
				return ngEjbClient.makeCall(jtsServerIP, serverPort, "WebSphere", ipXML);
		} catch (Exception e) {
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Exception Occured in WF NG Execute : " + e.getMessage());
			e.printStackTrace();
			return "Error";
		}
	}
	
	public static String getTagValue(String xml, String tag) throws ParserConfigurationException, SAXException, IOException
	{
		if (xml != null && !xml.equals("")) {
			Document doc = getDocument(xml);
			NodeList nodeList = null;
			int length = 0;
			if (doc != null) {
				nodeList = doc.getElementsByTagName(tag);
				length = nodeList.getLength();
			}

			if (length > 0) {
				Node node = nodeList.item(0);
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Node : " + node);
				if (node.getNodeType() == Node.ELEMENT_NODE) {
					NodeList childNodes = node.getChildNodes();
					String value = "";
					int count = childNodes.getLength();
					for (int i = 0; i < count; i++) {
						Node item = childNodes.item(i);
						if (item.getNodeType() == Node.TEXT_NODE) {
							value += item.getNodeValue();
						}
					}
					return value;
				} else if (node.getNodeType() == Node.TEXT_NODE) {
					return node.getNodeValue();
				}
			}
		}
		return "";
	}

	public static Document getDocument(String xml) throws ParserConfigurationException, SAXException, IOException {
		Document doc = null;
		try {
			// Step 1: create a DocumentBuilderFactory
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

			// Step 2: create a DocumentBuilder
			DocumentBuilder db = dbf.newDocumentBuilder();

			// Step 3: parse the input file to get a Document object
			doc = db.parse(new InputSource(new StringReader(xml)));
		} catch (Exception ex) {
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug(printException(ex));
		} finally {
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Inside finally block of getDocument method");

		}
		return doc;
	}
	
	public static String printException(Exception e){
		StringWriter sw = new StringWriter();
		e.printStackTrace(new PrintWriter(sw));
		String exception = sw.toString();
		return exception;	
	}
	
	private static  int readConfig() {
		Properties p = null;
		try {

			p = new Properties();
			p.load(new FileInputStream(new File(System.getProperty("user.dir") + File.separator + "ConfigFiles" + File.separator + "DCC_DECTECH_System_Integration_Config.properties")));

			Enumeration<?> names = p.propertyNames();

			while (names.hasMoreElements()) {
				String name = (String) names.nextElement();
				DCCSystemIntegrationMap.put(name, p.getProperty(name));
			}
		} catch (Exception e) {
			return -1;
		}
		return 0;
	}
	
	private static  HashMap<String, String> socketConnectionDetails(String cabinetName, String sJtsIp, String iJtsPort, String sessionID) {
		HashMap<String, String> socketDetailsMap = new HashMap<String, String>();

		try {
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Fetching Socket Connection Details.");
			System.out.println("Fetching Socket Connection Details.");

			String socketDetailsQuery = "SELECT SocketServerIP,SocketServerPort FROM NG_BPM_MQ_TABLE with (nolock) where ProcessName = 'DCC' and CallingSource = 'Utility'";

			String socketDetailsInputXML = CommonMethods.apSelectWithColumnNames(socketDetailsQuery, cabinetName, sessionID);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Socket Details APSelect InputXML: " + socketDetailsInputXML);

			String socketDetailsOutputXML = WFNGExecute(socketDetailsInputXML, sJtsIp, iJtsPort, 1);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Socket Details APSelect OutputXML: " + socketDetailsOutputXML);

			XMLParser xmlParserSocketDetails = new XMLParser(socketDetailsOutputXML);
			String socketDetailsMainCode = xmlParserSocketDetails.getValueOf("MainCode");
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SocketDetailsMainCode: " + socketDetailsMainCode);

			int socketDetailsTotalRecords = Integer.parseInt(xmlParserSocketDetails.getValueOf("TotalRetrieved"));
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SocketDetailsTotalRecords: " + socketDetailsTotalRecords);

			if (socketDetailsMainCode.equalsIgnoreCase("0") && socketDetailsTotalRecords > 0) {
				String xmlDataSocketDetails = xmlParserSocketDetails.getNextValueOf("Record");
				xmlDataSocketDetails = xmlDataSocketDetails.replaceAll("[ ]+>", ">").replaceAll("<[ ]+", "<");

				XMLParser xmlParserSocketDetailsRecord = new XMLParser(xmlDataSocketDetails);

				String socketServerIP = xmlParserSocketDetailsRecord.getValueOf("SocketServerIP");
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SocketServerIP: " + socketServerIP);
				socketDetailsMap.put("SocketServerIP", socketServerIP);

				String socketServerPort = xmlParserSocketDetailsRecord.getValueOf("SocketServerPort");
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SocketServerPort " + socketServerPort);
				socketDetailsMap.put("SocketServerPort", socketServerPort);

				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SocketServer Details found.");
				System.out.println("SocketServer Details found.");

			}
		} catch (Exception e) {
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger
					.debug("Exception in getting Socket Connection Details: " + e.getMessage());
			System.out.println("Exception in getting Socket Connection Details: " + e.getMessage());
		}

		return socketDetailsMap;
	}
	
	private static  String sInputXmlApplicantDetails(Map<String, String> applicantDetails_Map, String cabinetName, String sessionID, String jtsIP, String jtsPort) {
		String industry_sector = "";
		String industry_macro = "";
		String industry_micro = "";
		String employercode = validateValue(applicantDetails_Map.get("employercode"));
		if (!employercode.equals("")) {
			String query = "select top 1 INDUSTRY_SECTOR, INDUSTRY_MACRO, INDUSTRY_MICRO from ng_rlos_aloc_offline_data where EMPLOYER_CODE = '" + employercode+ "'";
			try {
				List<Map<String,String>> OutputXML_ref = getDataFromDBMap(query, cabinetName, sessionID, jtsIP, jtsPort);
				if(OutputXML_ref.size()>0)
				{
					industry_sector=OutputXML_ref.get(0).get("INDUSTRY_SECTOR");
					industry_macro=OutputXML_ref.get(0).get("INDUSTRY_MACRO");
					industry_micro=OutputXML_ref.get(0).get("INDUSTRY_MICRO");
				}
			}
			catch(Exception e)
			{
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug(" Exception occurred in ApplicantDetails Query"+ query);
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug(" Exception occurred in sInputXmlApplicantDetails()"+ e.getMessage());
			}
		}
		
		return "<ApplicantDetails>" + "\n"
		+"<applicant_id>2909099</applicant_id>" + "\n"
		+"<primary_cif>"+validateValue(applicantDetails_Map.get("CIF_ID"))+"</primary_cif>" + "\n"
		+"<ref_no>"+validateValue(applicantDetails_Map.get("Wi_Name"))+"</ref_no>" + "\n"
		+"<wi_name>"+validateValue(applicantDetails_Map.get("Wi_Name"))+"</wi_name>" + "\n"
		+"<cust_name>"+validateValue(applicantDetails_Map.get("FirstName"))+"</cust_name>" + "\n"
		+"<emp_type>"+validateValue(applicantDetails_Map.get("EmploymentType"))+"</emp_type>" + "\n"
		+"<dob>"+validateValue(applicantDetails_Map.get("dob"))+"</dob>" + "\n"
		+"<age>"+validateValue(applicantDetails_Map.get("age"))+"</age>" + "\n" //TODO set according to DOB
		+"<dbr>"+validateValue(applicantDetails_Map.get("FinalDBR"))+"</dbr>" + "\n"
		+"<tai>0.00</tai>" + "\n"
		+"<nationality>"+validateValue(applicantDetails_Map.get("Nationality"))+"</nationality>" + "\n"
		+"<resident_flag>Y</resident_flag>" + "\n"
		+"<world_check>Negative</world_check>" + "\n"
		+"<blacklist_cust_type>I</blacklist_cust_type>" + "\n"
		+"<negative_cust_type>I</negative_cust_type>" + "\n"
		+"<no_of_cheque_bounce_int_3mon_Ind>2</no_of_cheque_bounce_int_3mon_Ind>" + "\n"
		+"<no_of_DDS_return_int_3mon_Ind>0</no_of_DDS_return_int_3mon_Ind>" + "\n"
		+"<lob>2.00</lob>" + "\n"
		+"<external_blacklist_flag>I</external_blacklist_flag>" + "\n"
		+"<target_segment_code>BTCNTB</target_segment_code>" + "\n"
		+"<avg_credit_turnover_3>66666.67</avg_credit_turnover_3>" + "\n"
		+"<avg_bal_3>223145.2</avg_bal_3>" + "\n"
		+"<current_emp_catogery>"+validateValue(applicantDetails_Map.get("EmploymentType"))+"</current_emp_catogery>" + "\n" //TODO
		+"<year_in_uae>04.00</year_in_uae>" + "\n"
		+"<ref_relationship>PAR</ref_relationship>" + "\n"
		+"<passport_expiry_date>"+validateValue(applicantDetails_Map.get("Passport_expiry"))+"</passport_expiry_date>" + "\n"
		+"<gender>"+validateValue(applicantDetails_Map.get("Gender"))+"</gender>" + "\n"
		+"<cust_mobile_no>"+validateValue(applicantDetails_Map.get("MobileNo"))+"</cust_mobile_no>" + "\n"
		+"<salary_with_rakbank>0.00</salary_with_rakbank>" + "\n"
		+"<emirates_of_residence>DXB</emirates_of_residence>" + "\n"
		+"<emp_name>"+validateValue(applicantDetails_Map.get("Employer_Name"))+"</emp_name>" + "\n"
		+"<NegatedDetails>" + "\n"
		+"</NegatedDetails>" + "\n"
		+"<BlacklistDetails>" + "\n"
		+"</BlacklistDetails>" + "\n"
		//+"Str_NegatedDetails" + "\n" // TODO multiple records replace by this
		//+"<NegatedDetails>" + "\n"
		//+"<negative_cust_type>I</negative_cust_type>" + "\n"
		//+"<internal_negative_flag>N</internal_negative_flag>" + "\n"
		//+"</NegatedDetails>" + "\n"
		//+"Str_BlacklistDetails" + "\n"// TODO multiple records replace by this
		/*+"<BlacklistDetails>" + "\n"
		+"<blacklist_cust_type>I</blacklist_cust_type>" + "\n"
		+"<internal_blacklist>N</internal_blacklist>" + "\n"
		+"</BlacklistDetails>" + "\n"*/
		+"<cust_type>"+validateValue(applicantDetails_Map.get("Application_Type"))+"</cust_type>" + "\n"
		+"<bank_no_borrowing_relation_individual>0</bank_no_borrowing_relation_individual>" + "\n"
		+"<bank_no_borrowing_relation_company>0</bank_no_borrowing_relation_company>" + "\n"
		+"<AccountDetails>" + "\n"
		+"</AccountDetails>" + "\n"
		+"<industry_sector>"+industry_sector+"</industry_sector>" + "\n"
		+"<industry_macro>"+industry_macro+"</industry_macro>" + "\n"
		+"<industry_micro>"+industry_micro+"</industry_micro>" + "\n"
		+"<no_bank_other_statement_provided>3</no_bank_other_statement_provided>" + "\n"
		+"<aggregate_exposed>25000.00</aggregate_exposed>" + "\n"
		+"<bvr>N</bvr>" + "\n"
		+"<cc_employer_status>CN</cc_employer_status>" + "\n"
		+"<pl_employer_status>CN</pl_employer_status>" + "\n"
		+"<marketing_code>BAU</marketing_code>" + "\n"
		+"<nmf_flag>N</nmf_flag>" + "\n"
		+"<eff_date_estba>2020-06-28</eff_date_estba>" + "\n"
		+"<eff_lob>2.05</eff_lob>" + "\n"
		+"<tlc_issue_date>2020-06-28</tlc_issue_date>" + "\n"
		+"<no_bank_statement>3</no_bank_statement>" + "\n"
		+"<no_of_partners>1</no_of_partners>" + "\n"
		+"<standing_instruction>N</standing_instruction>" + "\n"
		+"<country_of_residence>AE</country_of_residence>" + "\n"
		+"<vip_flag>"+validateValue(applicantDetails_Map.get("VIPFlag"))+"</vip_flag>" + "\n"
		+"<title>"+validateValue(applicantDetails_Map.get("Title"))+"</title>" + "\n"
		+"<gcc_national>Y</gcc_national>" + "\n"
		+"<customer_category>5</customer_category>" + "\n"
		+"</ApplicantDetails>" ;
	}                                                      
    
	private static String sInputXmlExternalBureau(Map<String, String> applicantDetails_Map, String cabinetName, String sessionID, String jtsIP, String jtsPort) 
	{
		String Wi_Name = applicantDetails_Map.get("Wi_Name");
		
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("inside ExternalBureauData : ");
		String sQuery = "select distinct CifId, fullnm,TotalOutstanding,TotalOverdue,NoOfContracts,Total_Exposure,WorstCurrentPaymentDelay,"
				+ "Worst_PaymentDelay_Last24Months,Worst_Status_Last24Months,Nof_Records,NoOf_Cheque_Return_Last3,Nof_DDES_Return_Last3Months,"
				+ "Nof_Cheque_Return_Last6,DPD30_Last6Months,(select max(ExternalWriteOffCheck) ExternalWriteOffCheck "
				+ "from ((select convert(int,isNULL(ExternalWriteOffCheck,0)) ExternalWriteOffCheck  from ng_dcc_cust_extexpo_CardDetails with(nolock) "
				+ "where Wi_Name  = '"+Wi_Name+"' and ProviderNo!='B01'  "
				
				+ "union all select convert(int,isNULL(ExternalWriteOffCheck,0)) ExternalWriteOffCheck "
				+ "from ng_dcc_cust_extexpo_LoanDetails where Wi_Name  = '"+Wi_Name+"' and ProviderNo!='B01' "
				
				+ "union all select convert(int,isNULL(ExternalWriteOffCheck,0)) ExternalWriteOffCheck from ng_dcc_cust_extexpo_AccountDetails "
				+ "where Wi_Name = '"+Wi_Name+"' and ProviderNo!='B01')) as ExternalWriteOffCheck) as 'ExternalWriteOffCheck' ,(select count(*) "
				+ "from (select DisputeAlert from ng_dcc_cust_extexpo_LoanDetails with(nolock) where Wi_Name = '"+Wi_Name+"' and DisputeAlert='1' "
				
				+ "union select DisputeAlert from ng_dcc_cust_extexpo_CardDetails with(nolock) where Wi_Name = '"+Wi_Name+"' and DisputeAlert='1') "
				+ "as tempTable) as 'DisputeAlert'  from ng_dcc_cust_extexpo_Derived with (nolock) where Wi_Name  = '"+Wi_Name+"' and Request_type= 'ExternalExposure'";
		
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("ExternalBureauData sQuery" + sQuery+ "");
		String AecbHistQuery = "select isnull(max(AECBHistMonthCnt),0) as AECBHistMonthCnt from ( select MAX(cast(isnull(AECBHistMonthCnt,'0') as int)) as AECBHistMonthCnt  "
						+ "from ng_dcc_cust_extexpo_CardDetails with (nolock) where  Wi_Name  = '"+ Wi_Name + "' and cardtype not in ( '85','99','Communication Services',"
						+ "'TelCo-Mobile Prepaid','101','Current/Saving Account with negative Balance','58','Overdraft') and custroletype not in ('Co-Contract Holder','Guarantor') "
						
						+ "union all select Max(cast(isnull(AECBHistMonthCnt,'0') as int)) as AECBHistMonthCnt from ng_dcc_cust_extexpo_LoanDetails with (nolock) "
						+ "where Wi_Name  = '"+ Wi_Name + "' and loantype not in ('85','99','Communication Services','TelCo-Mobile Prepaid','101',"
						+ "'Current/Saving Account with negative Balance','58','Overdraft') and custroletype not in ('Co-Contract Holder','Guarantor')) as ext_expo";
		
		String add_xml_str = "";
		try {
			
			List<Map<String,String>> OutputXML = getDataFromDBMap(sQuery, cabinetName, sessionID, jtsIP, jtsPort);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("ExternalBureauData list size" + OutputXML.size()+ "");
				
			List<Map<String,String>> AecbHistMap = getDataFromDBMap(AecbHistQuery, cabinetName, sessionID, jtsIP, jtsPort);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("ExternalBureauData list size" + AecbHistMap.size()+ "");
			
			if (OutputXML.size() == 0)
			{
				String aecb_score="";
				String range ="";
				String refNo ="";
				
				String query = "select ReferenceNo, AECB_Score,Range from ng_dcc_cust_extexpo_Derived with(nolock) where Wi_Name ='"+Wi_Name
						+"' and Request_Type='ExternalExposure' and CifId='"+validateValue(applicantDetails_Map.get("CIF_ID"))+"'";
				try {
					List<Map<String,String>> OutputXML_ref = getDataFromDBMap(query, cabinetName, sessionID, jtsIP, jtsPort);
					if(OutputXML_ref.size()>0)
					{
						refNo=OutputXML_ref.get(0).get("ReferenceNo");
						aecb_score=OutputXML_ref.get(0).get("AECB_Score");
						range=OutputXML_ref.get(0).get("Range");
					}				
				}
				catch(Exception e)
				{
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug(" Exception occurred in externalBureauData Query"+ query);
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug(" Exception occurred in externalBureauData()"+ e.getMessage());
				}
				
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug( "aecb_score :"+aecb_score+" range :: "+range+" refNo:: "+refNo);
				
				add_xml_str +="<ExternalBureau>" + "\n";
				add_xml_str +="<applicant_id>" + validateValue(applicantDetails_Map.get("CIF_ID")) + "</applicant_id>" + "\n";
				add_xml_str +="<bureauone_ref_no>"+refNo+"</bureauone_ref_no>" + "\n";
				add_xml_str +="<full_name>" + validateValue(applicantDetails_Map.get("FirstName")) +" "+ validateValue(applicantDetails_Map.get("LastName")) + "</full_name>" + "\n"; //, MiddleName, 
				add_xml_str +="<total_out_bal></total_out_bal>" + "\n";

				add_xml_str +="<total_overdue></total_overdue>" + "\n";
				add_xml_str +="<no_default_contract></no_default_contract>" + "\n";
				add_xml_str +="<total_exposure></total_exposure>" + "\n";
				add_xml_str +="<worst_curr_pay></worst_curr_pay>" + "\n";
				add_xml_str +="<worst_curr_pay_24></worst_curr_pay_24>" + "\n";
				add_xml_str +="<worst_status_24></worst_status_24>" + "\n";

				add_xml_str +="<no_of_rec></no_of_rec>" + "\n";
				add_xml_str +="<cheque_return_3mon></cheque_return_3mon>" + "\n";
				add_xml_str +="<dds_return_3mon></dds_return_3mon>" + "\n";
				//add_xml_str +="<cheque_return_6mon>" + Nof_Cheque_Return_Last6 + "</cheque_return_6mon>" + "\n";
				//add_xml_str +="<dds_return_6mon>" + DPD30_Last6Months + "</dds_return_6mon>" + "\n";
				//add_xml_str +="<prod_external_writeoff_amount>" + "" + "</prod_external_writeoff_amount>" + "\n";

				add_xml_str +="<no_months_aecb_history >" + validateValue(AecbHistMap.get(0).get(0)) + "</no_months_aecb_history >" + "\n";
				//changes done by shivang for 2.1 
				add_xml_str +="<aecb_score>"+aecb_score+"</aecb_score>" + "\n";
				add_xml_str +="<range>"+range+"</range>" + "\n";
				add_xml_str +="<company_flag>N</company_flag></ExternalBureau>" + "\n";

				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("dectech External : " + add_xml_str);
				return add_xml_str;
			} 
			else {
				for (Map<String,String> map : OutputXML){
					String CifId = validateValue(map.get("CifId"));
					String fullnm = validateValue(map.get("fullnm"));
					String TotalOutstanding = validateValue(map.get("TotalOutstanding"));
					String TotalOverdue = validateValue(map.get("TotalOverdue"));
					String NoOfContracts = validateValue(map.get("NoOfContracts"));
					String Total_Exposure = validateValue(map.get("Total_Exposure"));
					String WorstCurrentPaymentDelay = validateValue(map.get("WorstCurrentPaymentDelay"));
					String Worst_PaymentDelay_Last24Months = validateValue(map.get("Worst_PaymentDelay_Last24Months"));
					String Worst_Status_Last24Months = validateValue(map.get("Worst_Status_Last24Months"));
					String Nof_Records = validateValue(map.get("Nof_Records"));
					String NoOf_Cheque_Return_Last3 = validateValue(map.get("NoOf_Cheque_Return_Last3"));
					String Nof_DDES_Return_Last3Months = validateValue(map.get("Nof_DDES_Return_Last3Months"));
					//String Nof_Cheque_Return_Last6 = checkValue(map.get("Nof_Cheque_Return_Last6"));
					//String DPD30_Last6Months = checkValue(map.get("DPD30_Last6Months"));
					//String ExternalWriteOffCheck = checkValue(map.get("ExternalWriteOffCheck"));
					String dispute_alert=validateValue(map.get("tempTable"));
					//String EnquiryDate = validateValue(map.get("EnquiryDate")); //TODO COLUMN IS NOT IN DERIVED TABLE
					
					String aecb_score=""; 
					String range =""; 
					String refNo ="";
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug( "aecb_score :"+aecb_score+" range :: "+range+" refNo:: "+refNo);
					 
					if (!dispute_alert.equals("")) {
						try {
							if (Integer.parseInt(dispute_alert) > 0) {
								dispute_alert = "Y";
							} else {
								dispute_alert = "N";
							}
						} catch (NumberFormatException e) {
							dispute_alert = "N";
							DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.error( "NumberFormatException : "+e.getMessage());
						}
					} else {
						dispute_alert = "N";
					}
					
					String Company_flag = "N";
					String Ref_query = "select ReferenceNo, AECB_Score,Range from ng_dcc_cust_extexpo_Derived with(nolock) where Wi_Name ='"+Wi_Name+"' and Request_Type='ExternalExposure' and CifId='"+CifId+"'";
					try {
						List<Map<String,String>> OutputXML_ref = getDataFromDBMap(Ref_query, cabinetName, sessionID, jtsIP, jtsPort);
						if(OutputXML_ref.size()>0)
						{
							refNo=OutputXML_ref.get(0).get("ReferenceNo");
							aecb_score=OutputXML_ref.get(0).get("AECB_Score");
							range=OutputXML_ref.get(0).get("Range");
							Company_flag = "Y";
						}				
					}
					catch(Exception e)
					{
						DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug(" Exception occurred in externalBureauData Query"+ Ref_query);
						DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug(" Exception occurred in externalBureauData()"+ e.getMessage());
					}
					
					add_xml_str +="<ExternalBureau>" + "\n";
					add_xml_str +="<applicant_id>" + CifId+ "</applicant_id>" + "\n";
					add_xml_str +="<bureauone_ref_no>"+refNo+"</bureauone_ref_no>" + "\n";
					add_xml_str +="<full_name>" + fullnm+ "</full_name>" + "\n";
					add_xml_str +="<total_out_bal>"+ TotalOutstanding + "</total_out_bal>" + "\n";

					add_xml_str +="<total_overdue>"+ TotalOverdue + "</total_overdue>" + "\n";
					add_xml_str +="<no_default_contract>"+ NoOfContracts + "</no_default_contract>" + "\n";
					add_xml_str +="<total_exposure>"+ Total_Exposure + "</total_exposure>" + "\n";
					add_xml_str +="<worst_curr_pay>"+ WorstCurrentPaymentDelay + "</worst_curr_pay>" + "\n";
					add_xml_str +="<worst_curr_pay_24>"+ Worst_PaymentDelay_Last24Months+ "</worst_curr_pay_24>" + "\n";
					add_xml_str +="<worst_status_24>"+ Worst_Status_Last24Months + "</worst_status_24>" + "\n";

					add_xml_str +="<no_of_rec>" + Nof_Records+ "</no_of_rec>" + "\n";
					add_xml_str +="<cheque_return_3mon>"+ NoOf_Cheque_Return_Last3+ "</cheque_return_3mon>" + "\n";
					add_xml_str +="<dds_return_3mon>"+ Nof_DDES_Return_Last3Months+ "</dds_return_3mon>" + "\n";
					//add_xml_str +="<cheque_return_6mon>"+ Nof_Cheque_Return_Last6 + "</cheque_return_6mon>" + "\n";
					//add_xml_str +="<dds_return_6mon>"+ DPD30_Last6Months + "</dds_return_6mon>" + "\n";
					//add_xml_str = add_xml_str+ "<prod_external_writeoff_amount>" +ExternalWriteOffCheck+ "</prod_external_writeoff_amount>" + "\n";

					add_xml_str +="<no_months_aecb_history >"+ AecbHistMap.get(0).get(0)+ "</no_months_aecb_history >" + "\n";

					//changes done by shivang for 2.1 
					add_xml_str +="<aecb_score>"+aecb_score+"</aecb_score>" + "\n";
					add_xml_str +="<range>"+range+"</range>" + "\n";
					add_xml_str +="<AECB_Enquiry_date></AECB_Enquiry_date>" + "\n"; //"+EnquiryDate+"
					add_xml_str +="<company_flag>"+Company_flag+"</company_flag>" + "\n";
					add_xml_str +="<dispute_alert>"+dispute_alert+"</dispute_alert></ExternalBureau>";

				}
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("RLOSCommon"+"Internal liab tag Cration: " + add_xml_str);
				return add_xml_str;
			}
		}

		catch (Exception e) {
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("DECTECH Exception occurred in externalBureauData()"+ e.getMessage() + "\n Error: "+ e.getMessage());
			return null;
		}
	}
	
	private static  String sInputXmlExternalCourtCase(String Wi_Name, String cabinetName, String sessionID, String jtsIP, String jtsPort) {
		String court_cases = "";
		String QueryCaseDetails ="select CodOrganization, ProviderCaseNo, ReferenceDate, CaseCategoryCode,CaseOpenDate, isnull(CaseCloseDate,'') as CaseCloseDate, CaseStatusCode," +
				"InitialTotalClaimAmount from ng_dcc_cust_extexpo_CaseDetails where Wi_Name='"+Wi_Name+"'";
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Select ng_dcc_cust_extexpo_CaseDetails Query: "+QueryCaseDetails);
		List<Map<String,String>> list_map = getDataFromDBMap(QueryCaseDetails, cabinetName, sessionID, jtsIP, jtsPort);
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Total Retrieved Records: " + list_map.size());
		System.out.println("Total Retrieved Records: " + list_map.size());
		for (Map<String,String> map : list_map) {
			court_cases += "\n<CourtCase>"+ "\n"
			+"<CodOrganization>"+validateValue(map.get("CodOrganization"))+"</CodOrganization>"+ "\n"
			+"<ProviderCaseNo>"+validateValue(map.get("ProviderCaseNo"))+"</ProviderCaseNo>"+ "\n"
			+"<ReferenceDate>"+validateValue(map.get("ReferenceDate"))+"</ReferenceDate>"+ "\n"
			+"<CaseCategoryCode>"+validateValue(map.get("CaseCategoryCode"))+"</CaseCategoryCode>"+ "\n"
			+"<OpenDate>"+validateValue(map.get("CaseOpenDate"))+"</OpenDate>"+ "\n"
			+"<CaseStatusCode>"+validateValue(map.get("CaseStatusCode"))+"</CaseStatusCode>"+ "\n"
			+"<InitialTotalClaimAmount>"+validateValue(map.get("InitialTotalClaimAmount"))+"</InitialTotalClaimAmount>"+ "\n"
			+"</CourtCase>";
		}
		
		return court_cases;
	}
	
	private static  String sInputXmlExternalBouncedCheques(String wiName, String cabinetName, String sessionID, String jtsIP, String jtsPort) {
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("RLOSCommon java file"+"inside ExternalBouncedCheques : ");
		String sQuery = "SELECT CifId,number,amount,reasoncode,returndate,providerno FROM ng_dcc_cust_extexpo_ChequeDetails  with (nolock) "
				+ "where Wi_Name = '" + wiName + "' and Request_Type = 'ExternalExposure'";
		
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("ExternalBouncedCheques sQuery" + sQuery+ "");
		String add_xml_str = "";
			
		List<Map<String,String>> OutputXML = getDataFromDBMap(sQuery, cabinetName, sessionID, jtsIP, jtsPort);
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("ExternalBouncedCheques list size" + OutputXML.size()+ "");

		for (Map<String,String> map : OutputXML) {
			add_xml_str +="\n<ExternalBouncedCheques><applicant_id>" + validateValue(map.get("CifId")) + "</applicant_id>"+ "\n";
			add_xml_str +="<external_bounced_cheques_id></external_bounced_cheques_id>"+ "\n";
			add_xml_str +="<bounced_cheque>" + validateValue(map.get("ChqType")) + "</bounced_cheque>"+ "\n";
			add_xml_str +="<cheque_no>" + validateValue(map.get("number")) + "</cheque_no>"+ "\n";
			add_xml_str +="<amount>" + validateValue(map.get("amount")) + "</amount>"+ "\n";
			add_xml_str +="<reason>" + validateValue(map.get("reasoncode")) + "</reason>"+ "\n";
			add_xml_str +="<return_date>" + validateValue(map.get("returndate")) + "</return_date>"+ "\n";
			add_xml_str +="<provider_no>" + validateValue(map.get("providerno")) + "</provider_no><company_flag>N</company_flag></ExternalBouncedCheques>"; // to
		}
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("RLOSCommon"+ "Internal liab tag Cration: "+ add_xml_str);
		return add_xml_str;
	}
	
	private static  String sInputXmlExternalBureauIndividualProducts(String wiName, String cabinetName, String sessionID, String jtsIP, String jtsPort) {
		//DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("RLOSCommon java file"+"inside ExternalBureauIndividualProducts : ");
		String sQuery = "select CifId,AgreementId,LoanType,ProviderNo,LoanStat,CustRoleType,LoanApprovedDate,LoanMaturityDate,OutstandingAmt,TotalAmt,PaymentsAmt,"
				+ "TotalNoOfInstalments,RemainingInstalments,WriteoffStat,WriteoffStatDt,CreditLimit,OverdueAmt,NofDaysPmtDelay,MonthsOnBook,lastrepmtdt,IsCurrent,"
				+ "CurUtilRate,DPD30_Last6Months,DPD60_Last12Months,AECBHistMonthCnt,DPD5_Last3Months,'' as qc_Amnt,'' as Qc_emi,'' as Cac_indicator,Take_Over_Indicator,"
				+ "Consider_For_Obligations,case when IsDuplicate= '1' then 'Y' else 'N' end,avg_utilization,DPD5_Last12Months,DPD60Plus_Last12Months,MaximumOverDueAmount,"
				+ "Pmtfreq, MaxOverDueAmountDate from ng_dcc_cust_extexpo_LoanDetails with (nolock) where Wi_Name= '"+ wiName + "'  and LoanStat != 'Pipeline' "
				
		+ "union select CifId,CardEmbossNum,CardType,ProviderNo,CardStatus,CustRoleType,StartDate,ClosedDate,CurrentBalance,'' as col6,"
		+ "PaymentsAmount,NoOfInstallments,'' as col5,WriteoffStat,WriteoffStatDt,CashLimit,OverdueAmount,NofDaysPmtDelay,MonthsOnBook,lastrepmtdt,IsCurrent,CurUtilRate,"
		+ "DPD30_Last6Months,DPD60_Last12Months,AECBHistMonthCnt,DPD5_Last3Months,qc_amt,qc_emi,CAC_Indicator,Take_Over_Indicator,Consider_For_Obligations,case when "
		+ "IsDuplicate= '1' then 'Y' else 'N' end,avg_utilization,DPD5_Last12Months,DPD60Plus_Last12Months,MaximumOverDueAmount,Pmtfreq, MaxOverDueAmountDate from "
		+ "ng_dcc_cust_extexpo_CardDetails with (nolock) where Wi_Name = '" + wiName+ "' and cardstatus != 'Pipeline'   "
		
		+ "union select CifId,AcctId,AcctType,ProviderNo,AcctStat,CustRoleType,StartDate,ClosedDate,OutStandingBalance,TotalAmount,PaymentsAmount,'','',"
		+ "WriteoffStat,WriteoffStatDt,CreditLimit,OverdueAmount,"
		+ "NofDaysPmtDelay,MonthsOnBook,'',IsCurrent,CurUtilRate,DPD30_Last6Months,DPD60_Last12Months,AECBHistMonthCnt,DPD5_Last3Months,'','','','',"
		+ "isnull(Consider_For_Obligations,'true'),case when IsDuplicate= '1' then 'Y' else 'N' end,'',DPD5_Last12Months,DPD60Plus_Last12Months,"
		+ "MaximumOverDueAmount,Pmtfreq, MaxOverDueAmountDate from ng_dcc_cust_extexpo_AccountDetails with (nolock)  where Wi_Name  =  '"+wiName+"' "
		
		+ "union select CifId,ServiceID,ServiceType,ProviderNo,ServiceStat,CustRoleType,SubscriptionDt,SvcExpDt,'','','','','',WriteoffStat,WriteoffStatDt,'',OverDueAmount,"
		+ "NofDaysPmtDelay,MonthsOnBook,'',IsCurrent,CurUtilRate,'',DPD30_Last6Months,AECBHistMonthCnt,DPD5_Last3Months,'','','','',isnull(Consider_For_Obligations,'true')"
		+ ",case when IsDuplicate= '1' then 'Y' else 'N' end,'',DPD5_Last12Months,DPD60Plus_Last12Months,'','','' from ng_dcc_cust_extexpo_ServicesDetails with (nolock)  "
		+ "where ServiceStat='Active' and wi_name  =  '"+wiName+"'";
		
		String add_xml_str = "";
		List<Map<String,String>> OutputXML = getDataFromDBMap(sQuery, cabinetName, sessionID, jtsIP, jtsPort);
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("ExternalBureauIndividualProducts list size"+ OutputXML.size()+ "");
			
		for (Map<String,String> map : OutputXML){
			
			String ContractType = validateValue(map.get("LoanType"));
			String phase = validateValue(map.get("LoanStat"));
			String CustRoleType = validateValue(map.get("CustRoleType"));
			String start_date = validateValue(map.get("LoanApprovedDate"));
			//String close_date = validateValue(map.get("LoanMaturityDate"));
			//String OutStanding_Balance = validateValue(map.get("OutstandingAmt"));
			//String TotalAmt = validateValue(map.get("TotalAmt"));
			//String PaymentsAmt = validateValue(map.get("PaymentsAmt"));
			//String TotalNoOfInstalments = validateValue(map.get("TotalNoOfInstalments"));
			//String RemainingInstalments = validateValue(map.get("RemainingInstalments"));
			String WorstStatus = validateValue(map.get("WriteoffStat"));
			String WorstStatusDate = validateValue(map.get("WriteoffStatDt"));
			//String CreditLimit = validateValue(map.get("CreditLimit"));
			//String OverdueAmt = validateValue(map.get("OverdueAmt"));
			String NofDaysPmtDelay = validateValue(map.get("NofDaysPmtDelay"));
			String MonthsOnBook = validateValue(map.get("MonthsOnBook"));
			//String last_repayment_date = validateValue(map.get("lastrepmtdt"));
			//String DPD60Last12Months = validateValue(map.get("DPD60_Last12Months"));
			String AECBHistMonthCnt = validateValue(map.get("AECBHistMonthCnt"));
			//String DPD30Last6Months = validateValue(map.get("DPD30_Last6Months"));
			String currently_current = validateValue(map.get("IsCurrent"));
			String current_utilization = validateValue(map.get("CurUtilRate"));
			String delinquent_in_last_3months = validateValue(map.get("DPD5_Last3Months"));
			//String QC_Amt = validateValue(map.get("qc_Amnt"));
			//String QC_emi = validateValue(map.get("Qc_emi"));
			String CAC_Indicator = validateValue(map.get("Cac_indicator"));
			String TakeOverIndicator = validateValue(map.get("Take_Over_Indicator"));
			String consider_for_obligation = validateValue(map.get("Consider_For_Obligations"));
			String Duplicate_flag=validateValue(map.get("IsDuplicate"));
			//String avg_utilization=validateValue(map.get("avg_utilization"));
			String DPD60plus_last12month=validateValue(map.get("DPD60Plus_Last12Months"));
			String DPD5_last12month=validateValue(map.get("DPD5_Last12Months"));
			//String MaximumOverDueAmount = validateValue(map.get("MaximumOverDueAmount"));  
			//String Pmtfreq = validateValue(map.get("Pmtfreq"));
			//String MaxOverDueAmountDate = validateValue(map.get("MaxOverDueAmountDate"));
			
			if (!ContractType.equals("")) {
				try {
					String cardquery = "select code from ng_master_contract_type with (nolock) where description='"+ ContractType + "'";
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("ExternalBureauIndividualProducts sQuery"+ cardquery+ "");
					Map<String, String> cardqueryXML = getDataFromDB(cardquery, cabinetName, sessionID, jtsIP, jtsPort, "code");
					ContractType = cardqueryXML.get("code");
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("ExternalBureauIndividualProducts ContractType"+ ContractType+ "ContractType");
				} catch (Exception e) {
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("ExternalBureauIndividualProducts ContractType Exception"+ e+ "Exception");
				}
			}
			
			phase = phase.startsWith("A") ? "A" : "C";
			
			if (!CustRoleType.equals("")) {
				String sQueryCustRoleType = "select code from ng_master_role_of_customer with(nolock) where Description='"+CustRoleType+"'";
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("CustRoleType"+sQueryCustRoleType);
				Map<String, String> cardqueryXML = getDataFromDB(sQueryCustRoleType, cabinetName, sessionID, jtsIP, jtsPort, "code");
				try {
					if (cardqueryXML != null && cardqueryXML.size() > 0 && cardqueryXML.get("code") != null) {
						CustRoleType = cardqueryXML.get("code");
					}
				}
				catch(Exception e){
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("Exception occured at sQueryCombinedLimit for"+sQueryCustRoleType);
				}	
			}

			CAC_Indicator = "true".equalsIgnoreCase(CAC_Indicator) ? "Y" : "N";
			
			TakeOverIndicator = "true".equalsIgnoreCase(TakeOverIndicator) ? "Y" : "N";
			
			consider_for_obligation = "true".equalsIgnoreCase(consider_for_obligation) ? "Y" : "N";
			
			//Always N because of salaried person
			String Company_flag="N";

			add_xml_str +="\n<ExternalBureauIndividualProducts><applicant_id>" + map.get("CifId") + "</applicant_id>"+ "\n";
			add_xml_str +="<external_bureau_individual_products_id>" + map.get("AgreementId") + "</external_bureau_individual_products_id>"+ "\n";
			add_xml_str +="<contract_type>" + ContractType + "</contract_type>"+ "\n";
			add_xml_str +="<provider_no>" + map.get("ProviderNo") + "</provider_no>"+ "\n";
			add_xml_str +="<phase>" + phase + "</phase>"+ "\n";
			add_xml_str +="<role_of_customer>" + CustRoleType + "</role_of_customer>"+ "\n";
			add_xml_str +="<start_date>" + start_date + "</start_date>"+ "\n";

			//add_xml_str +="<close_date>" + close_date + "</close_date>"+ "\n";
			//add_xml_str +="<outstanding_balance>" + OutStanding_Balance + "</outstanding_balance>"+ "\n";
			//add_xml_str +="<total_amount>" + TotalAmt + "</total_amount>"+ "\n";
			//add_xml_str +="<payments_amount>" + PaymentsAmt + "</payments_amount>"+ "\n";
			//add_xml_str +="<total_no_of_instalments>" + TotalNoOfInstalments + "</total_no_of_instalments>"+ "\n";
			//add_xml_str +="<no_of_remaining_instalments>" + RemainingInstalments + "</no_of_remaining_instalments>"+ "\n";
			add_xml_str +="<worst_status>" + WorstStatus + "</worst_status>"+ "\n";
			add_xml_str +="<worst_status_date>" + WorstStatusDate + "</worst_status_date>"+ "\n";

			//add_xml_str +="<credit_limit>" + CreditLimit + "</credit_limit>"+ "\n";
			//add_xml_str +="<overdue_amount>" + OverdueAmt + "</overdue_amount>"+ "\n";
			add_xml_str +="<no_of_days_payment_delay>" + NofDaysPmtDelay + "</no_of_days_payment_delay>"+ "\n";
			add_xml_str +="<mob>" + MonthsOnBook + "</mob>"+ "\n";
			//add_xml_str +="<last_repayment_date>" + last_repayment_date + "</last_repayment_date>"+ "\n";

			if (currently_current != null && "1".equalsIgnoreCase(currently_current)) {
				add_xml_str +="<currently_current>Y</currently_current>"+ "\n";
			} else {
				add_xml_str +="<currently_current>N</currently_current>"+ "\n";
			}
		
			add_xml_str +="<current_utilization>" + current_utilization + "</current_utilization>"+ "\n";
			//add_xml_str +="<dpd_30_last_6_mon>" + DPD30Last6Months + "</dpd_30_last_6_mon>"+ "\n";

			add_xml_str +="<dpd_60p_in_last_12_mon>" + DPD60plus_last12month + "</dpd_60p_in_last_12_mon>"+ "\n";
			add_xml_str +="<dpd_5_in_last_12_mon>" + DPD5_last12month + "</dpd_5_in_last_12_mon>"+ "\n";
			add_xml_str +="<no_months_aecb_history>" + AECBHistMonthCnt + "</no_months_aecb_history>"+ "\n";
			//add_xml_str +="<maximum_overdue_amount>" + MaximumOverDueAmount + "</maximum_overdue_amount>"+ "\n";// added by deppanshu
			add_xml_str +="<delinquent_in_last_3months>" + delinquent_in_last_3months + "</delinquent_in_last_3months>"+ "\n";
			//add_xml_str +="<clean_funded>" + "" + "</clean_funded>"+ "\n";
			//add_xml_str +="<cac_indicator>" + CAC_Indicator + "</cac_indicator>"+ "\n";
			//add_xml_str +="<qc_emi>" + QC_emi + "</qc_emi>"+ "\n";
			//add_xml_str +="<qc_amount>" + QC_Amt + "</qc_amount>">"+ "\n";
			add_xml_str +="<company_flag>"+Company_flag+"</company_flag>"+ "\n";
			//add_xml_str +="<cac_bank_name>" + CAC_BANK_NAME+ "</cac_bank_name>"+ "\n";
			//add_xml_str +="<take_over_indicator>" + TakeOverIndicator + "</take_over_indicator>"+ "\n";
			add_xml_str +="<consider_for_obligation>" + consider_for_obligation + "</consider_for_obligation>"+ "\n";
			add_xml_str +="<duplicate_flag>"+Duplicate_flag+"</duplicate_flag>"+ "\n";
			//add_xml_str +="<avg_utilization>"+avg_utilization+"</avg_utilization>"+ "\n";
			//add_xml_str +="<payment_frequency>"+Pmtfreq+"</payment_frequency>"+ "\n";
			//add_xml_str +="<maximum_overdue_date>"+MaxOverDueAmountDate+"</maximum_overdue_date>"+ "\n";
			add_xml_str +="</maximum_overdue_date></ExternalBureauIndividualProducts>";
			
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("RLOSCommon"+ "Internal liab tag Cration: "	+ add_xml_str);
		}
		
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("RLOSCommon"+ "Internal liab tag Cration: "	+ add_xml_str);
		return add_xml_str;
	}
	
	private static  String sInputXmlExternalBureauPipelineProducts(String wiName, String cabinetName, String sessionID, String jtsIP, String jtsPort) {
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("inside ExternalBureauPipelineProducts : ");
		String sQuery = "select CifId, AgreementId,ProviderNo,LoanType,LoanDesc,CustRoleType,Datelastupdated,TotalAmt,TotalNoOfInstalments,'' as col1,NoOfDaysInPipeline,"
				+ "isnull(Consider_For_Obligations,'true') as 'Consider_For_Obligations', case when IsDuplicate= '1' then 'Y' else 'N' end as 'IsDuplicate' from ng_dcc_cust_extexpo_LoanDetails with (nolock) "
				+ "where Wi_Name  =  '" + wiName + "' and LoanStat = 'Pipeline'"
				+ "union select CifId, CardEmbossNum,ProviderNo,CardType,CardTypeDesc, CustRoleType,LastUpdateDate,'' as col2,NoOfInstallments,TotalAmount,"
				+ "NoOfDaysInPipeLine,isnull(Consider_For_Obligations,'true') as 'Consider_For_Obligations',case when IsDuplicate= '1' then 'Y' else 'N' end as 'IsDuplicate' from ng_dcc_cust_extexpo_CardDetails "
				+ "with (nolock) where Wi_Name  =  '" + wiName + "' and cardstatus = 'Pipeline'";
		
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("ExternalBureauPipelineProducts sQuery" + sQuery+"");
		
		String add_xml_str = "";
		List<Map<String,String>> maps= getDataFromDBMap(sQuery, cabinetName, sessionID, jtsIP, jtsPort);
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("ExternalBureauPipelineProducts list size"+ maps.size()+ "");
			
		for (Map<String,String> map : maps) {

			String contractType = validateValue(map.get("LoanType"));
			String role = validateValue(map.get("CustRoleType"));
			//String lastUpdateDate = validateValue(map.get("Datelastupdated"));
			String consider_for_obligation=validateValue(map.get("Consider_For_Obligations"));

			if (!contractType.equals("")) {
				try {
					String cardquery = "select code from ng_master_contract_type with (nolock) where description='"+ contractType + "'";
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("ExternalBureauIndividualProducts sQuery"+ cardquery+ "");
					Map<String, String> cardqueryXML = getDataFromDB(cardquery, cabinetName, sessionID, jtsIP, jtsPort, "code");
					contractType = cardqueryXML.get("code");
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("ExternalBureauIndividualProducts ContractType"+ contractType+ "ContractType");
				} catch (Exception e) {
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("ExternalBureauIndividualProducts ContractType Exception"+ e+ "Exception");
				}
			}
			
			if (!role.equals("")) {
				String sQueryCustRoleType = "select code from ng_master_role_of_customer with(nolock) where Description='"+role+"'";
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("CustRoleType"+sQueryCustRoleType);
				Map<String, String> cardqueryXML = getDataFromDB(sQueryCustRoleType, cabinetName, sessionID, jtsIP, jtsPort, "code");
				try {
					if (cardqueryXML != null && cardqueryXML.size() > 0 && cardqueryXML.get("code") != null) {
						role = cardqueryXML.get("code");
					}
				}
				catch(Exception e){
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.info("Exception occured at sQueryCombinedLimit for"+sQueryCustRoleType);
				}	
			}
			
			if (!"".equalsIgnoreCase(consider_for_obligation) && "true".equalsIgnoreCase(consider_for_obligation)) {
				consider_for_obligation = "Y";
			} else {
				consider_for_obligation = "N";
			}
			
			add_xml_str +="\n<ExternalBureauPipelineProducts><applicant_ID>" + validateValue(map.get("CifId")) + "</applicant_ID>"+ "\n";
			add_xml_str +="<external_bureau_pipeline_products_id>" + validateValue(map.get("AgreementId")) + "</external_bureau_pipeline_products_id>"+ "\n";
			add_xml_str +="<ppl_provider_no>" + validateValue(map.get("ProviderNo")) + "</ppl_provider_no>"+ "\n";
			add_xml_str +="<ppl_type_of_contract>" + contractType + "</ppl_type_of_contract>"+ "\n";
			add_xml_str +="<ppl_type_of_product>" + validateValue(map.get("LoanDesc")) + "</ppl_type_of_product>"+ "\n";
			add_xml_str +="<ppl_phase>" + "PIPELINE" + "</ppl_phase>"+ "\n";
			add_xml_str +="<ppl_role>" + role + "</ppl_role>"+ "\n";
			add_xml_str +="<ppl_date_of_last_update>" + validateValue(map.get("Datelastupdated")) + "</ppl_date_of_last_update>"+ "\n";
			add_xml_str +="<ppl_total_amount>" + validateValue(map.get("TotalAmt")) + "</ppl_total_amount>"+ "\n";
			add_xml_str +="<ppl_no_of_instalments>" + validateValue(map.get("TotalNoOfInstalments")) + "</ppl_no_of_instalments>"+ "\n";
			add_xml_str +="<ppl_no_of_days_in_pipeline>" + validateValue(map.get("NoOfDaysInPipeline")) + "</ppl_no_of_days_in_pipeline>"+ "\n";
			add_xml_str +="<company_flag>N</company_flag>"+ "\n";
			add_xml_str +="<ppl_consider_for_obligation>"+consider_for_obligation+"</ppl_consider_for_obligation>"+ "\n";
			add_xml_str +="<ppl_duplicate_flag>"+validateValue(map.get("IsDuplicate"))+"</ppl_duplicate_flag></ExternalBureauPipelineProducts>";

		}
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("RLOSCommon"+ "Internal liab tag Cration: "	+ add_xml_str);
		return add_xml_str;
	}
	
	private static  String validateValue(String value) {
		if (value != null && ! value.equals("") && !value.equalsIgnoreCase("null")) {
			return value.toString();
		}
		return "";
	}
	
	private static  Map<String,String> getDataFromDB(String query, String cabinetName, String sessionID, String jtsIP, String jtsPort, String... columns) {
		try{
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Inside function getDataFromDB");
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("getDataFromDB query is: "+query);
			String InputXML = CommonMethods.apSelectWithColumnNames(query, cabinetName, sessionID);
			Map<String,String> temp = null;
			String OutXml = WFNGExecute(InputXML, jtsIP, jtsPort, 1);
			OutXml = OutXml.replaceAll("&", "#andsymb#");
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("getDataFromDB output xml is: "+OutXml);
			Document recordDoc1 = MapXML.getDocument(OutXml);
			NodeList records1 = recordDoc1.getElementsByTagName("Records");
			if (records1.getLength() > 0) {
				temp = new HashMap<String,String>();
				for(String column : columns) {
					String value= getTagValue(OutXml, column).replaceAll("#andsymb#", "&");
					//String value= getTagValue(OutXml, column);
					DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("value from getTagValue function is:"+value);
					if(null!=value && !"null".equalsIgnoreCase(value) && !"".equals(value)){
						DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Setting value of "+column+" as "+value);	
						temp.put(column, value);
					}
					else{
						DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Setting value of "+column+" as blank");
						temp.put(column, "");
					}
				}
				temp.put("TotalRetrieved", getTagValue(OutXml, "TotalRetrieved"));
			}
			return temp;	
		}
		catch(Exception ex){
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Exception in getDataFromDB method + "+printException(ex));
			return null;
		}
	}

	private static  List<Map<String,String>> getDataFromDBMap(String query, String cabinetName, String sessionID, String jtsIP, String jtsPort){
		try{
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Inside function getDataFromDB");
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("getDataFromDB query is: "+query);
			String InputXML = CommonMethods.apSelectWithColumnNames(query, cabinetName, sessionID);
			List<Map<String,String>> temp = new ArrayList<Map<String,String>>();
			String OutXml = WFNGExecute(InputXML, jtsIP, jtsPort, 1);
			OutXml = OutXml.replaceAll("&", "#andsymb#");
			Document recordDoc1 = MapXML.getDocument(OutXml);
			NodeList records1 = recordDoc1.getElementsByTagName("Record");
			if (records1.getLength() > 0) {
				for(int i=0;i<records1.getLength();i++){
					Node n = records1.item(i);
					Map<String,String> t = new HashMap<String,String>();
					if(n.hasChildNodes()) {
						NodeList child = n.getChildNodes();
						for(int j=0;j<child.getLength();j++) {
							Node n1 = child.item(j);
							String column = n1.getNodeName();
							String value = n1.getTextContent().replaceAll("#andsymb#", "&");
							if(null!=value && !"null".equalsIgnoreCase(value) && !"".equals(value)){
								DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("getDataFromDBMap Setting value of "+column+" as "+value);	
								t.put(column, value);
							}
							else{
								DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("getDataFromDBMap Setting value of "+column+" as blank");
								t.put(column, "");
							}
						}
					}
					temp.add(t);
				}
			}
			return temp;	
		}
		catch(Exception ex){
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Exception in getDataFromDBMap method + "+printException(ex));
			return null;
		}

	}
	
	static String socketConnection(String cabinetName, String username, String sessionId, String sJtsIp, String iJtsPort, String wi_name, String ws_name,
			int connection_timeout, int integrationWaitTime, HashMap<String, String> socketDetailsMap, StringBuilder sInputXML)
	{

		String socketServerIP;
		int socketServerPort;
		Socket socket = null;
		OutputStream out = null;
		InputStream socketInputStream = null;
		DataOutputStream dout = null;
		DataInputStream din = null;
		String outputResponse = null;
		String inputRequest = null;
		String inputMessageID = null;



		try
		{

			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("userName "+ username);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SessionId "+ sessionId);

			socketServerIP=socketDetailsMap.get("SocketServerIP");
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SocketServerIP "+ socketServerIP);
			socketServerPort=Integer.parseInt(socketDetailsMap.get("SocketServerPort"));
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SocketServerPort "+ socketServerPort);

	   		if (!("".equalsIgnoreCase(socketServerIP) && socketServerIP == null && socketServerPort==0))
	   		{

    			socket = new Socket(socketServerIP, socketServerPort);
    			socket.setSoTimeout(connection_timeout*1000);
    			out = socket.getOutputStream();
    			socketInputStream = socket.getInputStream();
    			dout = new DataOutputStream(out);
    			din = new DataInputStream(socketInputStream);
    			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Dout " + dout);
    			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Din " + din);

    			outputResponse = "";

    			inputRequest = getRequestXML( cabinetName,sessionId ,wi_name, ws_name, username, sInputXML);

    			if (inputRequest != null && inputRequest.length() > 0)
    			{
    				int inputRequestLen = inputRequest.getBytes("UTF-16LE").length;
    				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("RequestLen: "+inputRequestLen + "");
    				inputRequest = inputRequestLen + "##8##;" + inputRequest;
    				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("InputRequest"+"Input Request Bytes : "+ inputRequest.getBytes("UTF-16LE"));
    				dout.write(inputRequest.getBytes("UTF-16LE"));dout.flush();
    			}
    			byte[] readBuffer = new byte[500];
    			int num = din.read(readBuffer);
    			if (num > 0)
    			{

    				byte[] arrayBytes = new byte[num];
    				System.arraycopy(readBuffer, 0, arrayBytes, 0, num);
    				outputResponse = outputResponse+ new String(arrayBytes, "UTF-16LE");
					inputMessageID = outputResponse;
    				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("OutputResponse: "+outputResponse);

    				if(!"".equalsIgnoreCase(outputResponse))
    					outputResponse = getResponseXML(cabinetName,sJtsIp,iJtsPort,sessionId, wi_name,outputResponse,integrationWaitTime );

    				if(outputResponse.contains("&lt;"))
    				{
    					outputResponse=outputResponse.replaceAll("&lt;", "<");
    					outputResponse=outputResponse.replaceAll("&gt;", ">");
    				}
    			}
    			socket.close();

				outputResponse = outputResponse.replaceAll("</MessageId>","</MessageId>/n<InputMessageId>"+inputMessageID+"</InputMessageId>");

				//DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("outputResponse "+outputResponse);
				return outputResponse;

    	 		}

    		else
    		{
    			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SocketServerIp and SocketServerPort is not maintained "+"");
    			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("SocketServerIp is not maintained "+	socketServerIP);
    			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug(" SocketServerPort is not maintained "+	socketServerPort);
    			return "Socket Details not maintained";
    		}

		}

		catch (Exception e)
		{
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Exception Occured Mq_connection_CC"+e.getStackTrace());
			return "";
		}
		finally
		{
			try
			{
				if(out != null)
				{
					out.close();
					out=null;
				}
				if(socketInputStream != null)
				{

					socketInputStream.close();
					socketInputStream=null;
				}
				if(dout != null)
				{

					dout.close();
					dout=null;
				}
				if(din != null)
				{

					din.close();
					din=null;
				}
				if(socket != null)
				{
					if(!socket.isClosed())
						socket.close();
					socket=null;
				}

			}

			catch(Exception e)
			{
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Final Exception Occured Mq_connection_CC"+e.getStackTrace());
				//printException(e);
			}
		}
	}
	
	private static String getRequestXML(String cabinetName, String sessionId, String wi_name, String ws_name, String userName, StringBuilder sInputXML)
	{
		StringBuffer strBuff = new StringBuffer();
		strBuff.append("<APMQPUTGET_Input>");
		strBuff.append("<SessionId>" + sessionId + "</SessionId>");
		strBuff.append("<EngineName>" + cabinetName + "</EngineName>");
		strBuff.append("<XMLHISTORY_TABLENAME>NG_DCC_XMLLOG_HISTORY</XMLHISTORY_TABLENAME>");
		strBuff.append("<WI_NAME>" + wi_name + "</WI_NAME>");
		strBuff.append("<WS_NAME>" + ws_name + "</WS_NAME>");
		strBuff.append("<USER_NAME>" + userName + "</USER_NAME>");
		strBuff.append("<MQ_REQUEST_XML>");
		strBuff.append(sInputXML);
		strBuff.append("</MQ_REQUEST_XML>");
		strBuff.append("</APMQPUTGET_Input>");
		DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("GetRequestXML: "+ strBuff.toString());
		return strBuff.toString();
	}
	
	private static String getResponseXML(String cabinetName,String sJtsIp,String iJtsPort, String sessionId, String wi_name, String message_ID, int integrationWaitTime)
	{

		String outputResponseXML="";
		try
		{
			String QueryString = "select OUTPUT_XML from NG_DCC_XMLLOG_HISTORY with (nolock) where MESSAGE_ID ='"+message_ID+"' and WI_NAME = '"+wi_name+"'";

			String responseInputXML =CommonMethods.apSelectWithColumnNames(QueryString, cabinetName, sessionId);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Response APSelect InputXML: "+responseInputXML);

			int Loop_count=0;
			do
			{
				String responseOutputXML=CommonMethods.WFNGExecute(responseInputXML,sJtsIp,iJtsPort,1);
				DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Response APSelect OutputXML: "+responseOutputXML);

			    XMLParser xmlParserSocketDetails= new XMLParser(responseOutputXML);
			    String responseMainCode = xmlParserSocketDetails.getValueOf("MainCode");
			    DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("ResponseMainCode: "+responseMainCode);



			    int responseTotalRecords = Integer.parseInt(xmlParserSocketDetails.getValueOf("TotalRetrieved"));
			    DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("ResponseTotalRecords: "+responseTotalRecords);

			    if (responseMainCode.equals("0") && responseTotalRecords > 0)
				{

					String responseXMLData=xmlParserSocketDetails.getNextValueOf("Record");
					responseXMLData =responseXMLData.replaceAll("[ ]+>",">").replaceAll("<[ ]+", "<");

	        		XMLParser xmlParserResponseXMLData = new XMLParser(responseXMLData);
	        		//DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("ResponseXMLData: "+responseXMLData);

	        		outputResponseXML=xmlParserResponseXMLData.getValueOf("OUTPUT_XML");
	        		//DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("OutputResponseXML: "+outputResponseXML);

	        		if("".equalsIgnoreCase(outputResponseXML)){
	        			outputResponseXML="Error";
	    			}
	        		break;
				}
			    Loop_count++;
			    Thread.sleep(1000);
			}
			while(Loop_count<integrationWaitTime);
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("integrationWaitTime: "+integrationWaitTime);

		}
		catch(Exception e)
		{
			DECTECHSystemIntegrationLog.DECTECHSystemIntegrationLogger.debug("Exception occurred in outputResponseXML" + e.getMessage());
			outputResponseXML="Error";
		}

		return outputResponseXML;
	}

}
