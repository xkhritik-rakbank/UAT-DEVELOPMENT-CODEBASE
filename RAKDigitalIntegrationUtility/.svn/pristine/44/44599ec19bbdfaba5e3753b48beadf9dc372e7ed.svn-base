package com.newgen.DCC.EFMS;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.newgen.DCC.EFMS.DCC_EFMS_Exposure_IntegrationLog;
import com.newgen.common.CommonConnection;
import com.newgen.common.CommonMethods;
import com.newgen.omni.jts.cmgr.NGXmlList;
import com.newgen.omni.jts.cmgr.XMLParser;
import com.newgen.omni.wf.util.app.NGEjbClient;
import com.newgen.omni.wf.util.excp.NGException;
import com.newgen.wfdesktop.xmlapi.WFCallBroker;



public class DCC_EFMS_Exposure_Integration implements java.io.Serializable{
	

	
	
		
		private static final long serialVersionUID = 1L;
		
		static Map<String, String> DCCSystemIntegrationMap = new HashMap<String, String>();
		
		static NGEjbClient ngEjbClient;
		
		public static String GenerateXML(String wi_name, String activityID, String activityType, String processDefId) {
			
			try {
				String sessionID = "";
				String cabinetName = "";
				String jtsIP = "";
				String jtsPort = "";
				String queueID = "";
				int socketConnectionTimeout=0;
				int integrationWaitTime=0;
				int sleepIntervalInMin=0;
		
		
				DCC_EFMS_Exposure_IntegrationLog.setLogger();
				ngEjbClient = NGEjbClient.getSharedInstance();
				
				
				int configReadStatus = readConfig();
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("configReadStatus "+configReadStatus);
				if(configReadStatus !=0)
				{
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.error("Could not Read Config Properties [DCC_DECTECH_System_Integration_Config.properties]");
					return "";
				}

				cabinetName = CommonConnection.getCabinetName();
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Cabinet Name: " + cabinetName);

				jtsIP = CommonConnection.getJTSIP();
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("JTSIP: " + jtsIP);

				jtsPort = CommonConnection.getJTSPort();
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("JTSPORT: " + jtsPort);

				queueID = DCCSystemIntegrationMap.get("queueID");
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("QueueID: " + queueID);

				socketConnectionTimeout=Integer.parseInt(DCCSystemIntegrationMap.get("MQ_SOCKET_CONNECTION_TIMEOUT"));
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SocketConnectionTimeOut: "+socketConnectionTimeout);

				integrationWaitTime=Integer.parseInt(DCCSystemIntegrationMap.get("INTEGRATION_WAIT_TIME"));
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("IntegrationWaitTime: "+integrationWaitTime);

				sleepIntervalInMin=Integer.parseInt(DCCSystemIntegrationMap.get("SleepIntervalInMin"));
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SleepIntervalInMin: "+sleepIntervalInMin);

				String WorkItemID = DCCSystemIntegrationMap.get("WorkItemId");
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Current WorkItemID: " + WorkItemID);

				sessionID = CommonConnection.getSessionID(DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger, false);

				if(sessionID.trim().equalsIgnoreCase(""))
				{
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Could Not Connect to Server!");
				}
				else
				{
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Session ID found: " + sessionID);
					HashMap<String, String> socketDetailsMap= socketConnectionDetails(cabinetName, jtsIP, jtsPort, sessionID);
					DCC_EFMS_Exposure_IntegrationLog.setLogger();
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DECTECH CIF Verification...123.");
					generateRequestXML(cabinetName, jtsIP, jtsPort, sessionID, queueID, socketConnectionTimeout,
								integrationWaitTime, socketDetailsMap, wi_name, WorkItemID, activityID, activityType, processDefId);
						//System.out.println("No More workitems to Process, Sleeping!");
				}
				
				return wi_name;
			} catch (NGException e) {
				e.printStackTrace();
			}
			return wi_name;
		}
		
		private static  void generateRequestXML(String cabinetName, String jtsIP, String jtsPort, String sessionID,
				String queueID, int socketConnectionTimeout2, int integrationWaitTime2,
				HashMap<String, String> socketDetailsMap, String wi_name, String WorkItemID, String activityID, String activityType, String processDefId) {
			String ws_name = "CAD_Analyst1";
			//wi_name = "DCC-0000000049-process";
			
			try {
				/** Select data and put in the map from NG_DCC_EXTTABLE **/
				String DBQuery = "SELECT Wi_Name, Application_Type, CIF_ID, Product, Product_Desc, Sub_Product, Card_Product, CUSTOMERNAME, PassportNo, EmirateID, MobileNo, employercode, "
						+ "Employer_Name, EmploymentType, EmploymentType_Desc, email_id, Final_Limit, VIPFlag, Title, Title_Desc, FirstName, MiddleName, LastName, dob, Age, Nationality, Nationality_Desc, Designation, Designation_Desc, Cust_Decl_Salary, "
						+ "Prospect_id, FinalDBR, FinalTAI, Passport_expiry, Gender, Gender_Desc, IndusSeg, IndusSeg_Desc, EligibleCardProduct, EligibleCardProduct_Desc FROM NG_DCC_EXTTABLE with(nolock) WHERE WI_NAME='" + wi_name + "'";
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Select NG_DCC_EXTTABLE Query: "+DBQuery);

				String[] columns = { "Wi_Name", "Application_Type", "CIF_ID", "Product", "Product_Desc", "Sub_Product",
						"Card_Product", "CUSTOMERNAME", "PassportNo", "EmirateID", "MobileNo", "employercode",
						"Employer_Name", "EmploymentType", "EmploymentType_Desc", "email_id", "Final_Limit", "VIPFlag",
						"Title", "Title_Desc", "FirstName", "MiddleName", "LastName", "dob", "Age", "Nationality",
						"Nationality_Desc", "Designation", "Designation_Desc", "Cust_Decl_Salary", "Prospect_id",
						"FinalDBR", "FinalTAI", "Passport_expiry", "Gender", "Gender_Desc", "IndusSeg", "IndusSeg_Desc",
						"EligibleCardProduct", "EligibleCardProduct_Desc" };
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DBQuery: " + DBQuery);
				Map<String,String> ApplicantDetails_Map = getDataFromDB(DBQuery, cabinetName, sessionID, jtsIP, jtsPort, columns);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Total Retrieved Records: " + ApplicantDetails_Map.get("TotalRetrieved"));
				System.out.println("Total Retrieved Records: " + ApplicantDetails_Map.get("TotalRetrieved"));
				
				StringBuilder stringBuilder = readRequestXmlSample();
				
				String requested_xml = stringBuilder.toString().replace(">Str_ApplicationNumber<",">"+wi_name+"<");
				
				/** Application Details Tag**/
				SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.mmm");
				
				requested_xml = requested_xml.replace(">str_TimeStampyyyymmddhhmmsss<",">"+sdf1.format(new Date())+"<");
				
				String DateExtra2 = sdf1.format(new Date())+"+04:00";
				//String full_eligibility_availed = validateValue(ApplicantDetails_Map.get("EligibleCardProduct_Desc"));
				//full_eligibility_availed = full_eligibility_availed == "" ? "Select" : full_eligibility_availed;
				requested_xml = requested_xml.replace(">Str_full_eligibility_availed<",">Select<")
						.replace(">Str_product_type<",">CON<")
						.replace(">Str_app_category<",">BAU<")
						.replace(">Str_requested_product<",">CC<")
						.replace(">Str_requested_limit<",">"+validateValue(ApplicantDetails_Map.get("Final_Limit"))+"<")
						.replace(">Str_sub_product<",">"+validateValue(ApplicantDetails_Map.get("Sub_Product"))+"<")
						.replace(">Str_requested_card_product<",">"+validateValue(ApplicantDetails_Map.get("Card_Product"))+"<")
						.replace(">Str_interest_rate<",">0.00<")
						.replace(">Str_customer_type<",">NTB<")
						.replace(">Str_final_limit<",">"+validateValue(ApplicantDetails_Map.get("Final_Limit"))+"<")
						.replace(">Str_emi<",">0.00<")
						.replace(">Str_manual_deviation<",">N<")
						.replace(">Str_application_date<",">"+DateExtra2+"<");
				
				requested_xml = requested_xml.replace(">Str_Wi_Name<",">"+wi_name+"<");
				
				String app_details = sInputXmlApplicantDetails(ApplicantDetails_Map, cabinetName, sessionID, jtsIP, jtsPort);
				requested_xml = requested_xml.replace("<String_ApplicantDetails>",app_details);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DCC sInputXmlApplicantDetails : "+ requested_xml);
				
				/** External Bureau sub-tag **/
				String external_Bureau = sInputXmlExternalBureau(ApplicantDetails_Map, cabinetName, sessionID, jtsIP, jtsPort);
				requested_xml = requested_xml.replace("<String_ExternalBureau>",external_Bureau);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DCC sInputXmlExternalBureau : "+ requested_xml);
				
				/** Cheque Bounce sub-Tag **/
				String bounced_Cheques = sInputXmlExternalBouncedCheques(wi_name, cabinetName, sessionID, jtsIP, jtsPort);
				requested_xml = requested_xml.replace("<String_BouncedCheques>",bounced_Cheques);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DCC sInputXmlExternalBouncedCheques : "+ requested_xml);
				
				/** utilization sub-Tag **/
				String utilization = sInputXmlExternalUtilization(wi_name, cabinetName, sessionID, jtsIP, jtsPort);
				requested_xml = requested_xml.replace("<String_Utilization24months>",utilization);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DCC sInputXmlExternalBouncedCheques : "+ requested_xml);
				
				/** utilization sub-Tag **/
				String history = sInputXmlExternalHistory(wi_name, cabinetName, sessionID, jtsIP, jtsPort);
				requested_xml = requested_xml.replace("<String_History_24months>",history);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DCC sInputXmlExternalBouncedCheques : "+ requested_xml);
				
				/** Court Cases sub-Tag **/
				String court_cases = sInputXmlExternalCourtCase(wi_name, cabinetName, sessionID, jtsIP, jtsPort);
				requested_xml = requested_xml.replace("<String_CourtCase>",court_cases);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DCC sInputXmlExternalCourtCase : "+ requested_xml);
				
				/** External Bureau Individual Products sub-Tag **/
				String individual_Products = sInputXmlExternalBureauIndividualProducts(wi_name, cabinetName, sessionID, jtsIP, jtsPort);
				requested_xml = requested_xml.replace("<String_ExternalBureauIndividualProducts>",individual_Products);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DCC sInputXmlExternalBureauIndividualProducts : "+ requested_xml);
				
				/** External Bureau Pipeline Products sub-tag**/
				String pipeline_Products = sInputXmlExternalBureauPipelineProducts(wi_name, cabinetName, sessionID, jtsIP, jtsPort);
				requested_xml = requested_xml.replace("<String_ExternalBureauPipelineProducts>",pipeline_Products);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DCC sInputXmlExternalBureauPipelineProducts : "+ requested_xml);
				
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DCC"+ "Final XML : "+ requested_xml);
				
				String integrationStatus="Success";
				String attributesTag;
				String ErrDesc = "";
				StringBuilder finalString=new StringBuilder(requested_xml);
				HashMap<String, String> socketConnectionMap =socketConnectionDetails(cabinetName, jtsIP, jtsPort, sessionID); 
				
				integrationStatus = socketConnection(cabinetName, CommonConnection.getUsername(), sessionID, jtsIP, jtsPort, wi_name, ws_name, 60, 65,socketConnectionMap, finalString);
				
				XMLParser xmlParserSocketDetails= new XMLParser(integrationStatus);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug(" xmlParserSocketDetails : "+xmlParserSocketDetails);
				String return_code = xmlParserSocketDetails.getValueOf("ReturnCode");
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Return Code: "+return_code+ "WI: "+wi_name);
				String return_desc = xmlParserSocketDetails.getValueOf("ReturnDesc");
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("return_desc : "+return_desc+ "WI: "+wi_name);
				
				String MsgId ="";
				if (integrationStatus.contains("<MessageId>"))
					MsgId = xmlParserSocketDetails.getValueOf("MessageId");
				
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("MsgId : "+MsgId+" for WI: "+wi_name);
				
				if(return_code.equalsIgnoreCase("0000"))
				{
					integrationStatus="Success";
					ErrDesc = "DECTECH Done Successfully";
				}
				String decisionValue="";
				if ("Success".equalsIgnoreCase(integrationStatus))
				{
					decisionValue = "Success";
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Decision in success: " +decisionValue);
					attributesTag="<Decision>"+decisionValue+"</Decision>";
				}
				else
				{
					ErrDesc = integrationStatus.replace("~", ",").replace("|", "");
					decisionValue = "Failed";
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Decision in else : " +decisionValue);
					attributesTag="<Decision>"+decisionValue+"</Decision>";
				}

				//Lock Workitem.
				String getWorkItemInputXML = CommonMethods.getWorkItemInput(cabinetName, sessionID, wi_name, WorkItemID);
				String getWorkItemOutputXml = WFNGExecute(getWorkItemInputXML,jtsIP,jtsPort,1);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Output XML For WmgetWorkItemCall: "+ getWorkItemOutputXml);

				XMLParser xmlParserGetWorkItem = new XMLParser(getWorkItemOutputXml);
				String getWorkItemMainCode = xmlParserGetWorkItem.getValueOf("MainCode");
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("WmgetWorkItemCall Maincode:  "+ getWorkItemMainCode);

				if (getWorkItemMainCode.trim().equals("0"))
				{
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("WMgetWorkItemCall Successful: "+getWorkItemMainCode);

					String assignWorkitemAttributeInputXML = "<?xml version=\"1.0\"?><WMAssignWorkItemAttributes_Input>"
							+ "<Option>WMAssignWorkItemAttributes</Option>"
							+ "<EngineName>"+cabinetName+"</EngineName>"
							+ "<SessionId>"+sessionID+"</SessionId>"
							+ "<ProcessInstanceId>"+wi_name+"</ProcessInstanceId>"
							+ "<WorkItemId>"+WorkItemID+"</WorkItemId>"
							+ "<ActivityId>"+activityID+"</ActivityId>"
							+ "<ProcessDefId>"+processDefId+"</ProcessDefId>"
							+ "<LastModifiedTime></LastModifiedTime>"
							+ "<ActivityType>"+activityType+"</ActivityType>"
							+ "<complete>D</complete>"
							+ "<AuditStatus></AuditStatus>"
							+ "<Comments></Comments>"
							+ "<UserDefVarFlag>Y</UserDefVarFlag>"
							+ "<Attributes>"+attributesTag+"</Attributes>"
							+ "</WMAssignWorkItemAttributes_Input>";
					
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("InputXML for DECTECH Call : "+assignWorkitemAttributeInputXML);

					String assignWorkitemAttributeOutputXML=WFNGExecute(assignWorkitemAttributeInputXML,jtsIP,jtsPort,1);
					
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("OutputXML for DECTECH Call Notify: "+assignWorkitemAttributeOutputXML);
					
					XMLParser xmlParserWorkitemAttribute = new XMLParser(assignWorkitemAttributeOutputXML);
					String assignWorkitemAttributeMainCode = xmlParserWorkitemAttribute.getValueOf("MainCode");
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DECTECH MainCode: "+assignWorkitemAttributeMainCode);

					if(assignWorkitemAttributeMainCode.trim().equalsIgnoreCase("0"))
					{
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DECTECH Successful: "+assignWorkitemAttributeMainCode);

						System.out.println(wi_name + "Complete Succesfully with status "+decisionValue);

						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("WorkItem moved to next Workstep.");

						//Insert in WIHistory Table.decisionValue
						decisionValue = "Success";
					}
					else
					{
						//assignWorkitemAttributeMainCode="";
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("decisionValue : "+decisionValue);
						decisionValue = "Failed";
					}
					
					DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");

					Date actionDateTime= new Date();
					String formattedActionDateTime=dateFormat.format(actionDateTime);
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("FormattedActionDateTime: "+formattedActionDateTime);
					String columnNames="wi_name,decision_date_time,workstep,user_name,Decision,Remarks";
					String columnValues="'"+wi_name+"','"+formattedActionDateTime+"','"+ws_name+"','"
					+CommonConnection.getUsername()+"','"+decisionValue+"','"+ErrDesc+"'";

					String apInsertInputXML=CommonMethods.apInsert(cabinetName, sessionID, columnNames, columnValues,"NG_DCC_GR_DECISION_HISTORY");
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("APInsertInputXML: "+apInsertInputXML);

					String apInsertOutputXML = WFNGExecute(apInsertInputXML,jtsIP,jtsPort,1);
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("APInsertOutputXML: "+ apInsertInputXML);

					XMLParser xmlParserAPInsert = new XMLParser(apInsertOutputXML);
					String apInsertMaincode = xmlParserAPInsert.getValueOf("MainCode");
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Status of apInsertMaincode  "+ apInsertMaincode);

					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Completed On "+ ws_name);


					if(apInsertMaincode.equalsIgnoreCase("0"))
					{
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("ApInsert successful: "+apInsertMaincode);
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Inserted in WiHistory table successfully.");
					}
					else
					{
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("ApInsert failed: "+apInsertMaincode);
					}
					
				}
				else
				{
					getWorkItemMainCode="";
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("WmgetWorkItem failed: "+getWorkItemMainCode);
				}
			} catch (Exception e) {
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Exception: "+e.getMessage());
			}
		}

		private static  StringBuilder readRequestXmlSample(){
			StringBuilder sb=new StringBuilder("");
			try {
				String fileLocation=new StringBuffer().append(System.getProperty("user.dir")).append(System.getProperty("file.separator")).append("DCC_Integration")
						.append(System.getProperty("file.separator")).append("DECTECH_Integration.txt").toString();
				BufferedReader sbf = new BufferedReader(new FileReader(fileLocation));
				
				String line = sbf.readLine();
				while (line != null) {
					sb.append(line);
					sb.append(System.lineSeparator());
					line = sbf.readLine();
				}
			} catch (FileNotFoundException e) {
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.error("In Reading DECTECH_Integration.txt : " + e.getMessage());
				e.printStackTrace();
			} catch (IOException e) {
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.error("In Reading DECTECH_Integration.txt : " + e.getMessage());
				e.printStackTrace();
			}
			return sb;
		}
		
		protected static String WFNGExecute(String ipXML, String jtsServerIP, String serverPort, int flag)
				throws IOException, Exception {
			    DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("In WF NG Execute : " + serverPort);
			try {
				if (serverPort.startsWith("33"))
					return WFCallBroker.execute(ipXML, jtsServerIP, Integer.parseInt(serverPort), 1);
				else
					return ngEjbClient.makeCall(jtsServerIP, serverPort, "WebSphere", ipXML);
			} catch (Exception e) {
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Exception Occured in WF NG Execute : " + e.getMessage());
				e.printStackTrace();
				return "Error";
			}
		}
		
		public static String getTagValue(String xml, String tag) throws ParserConfigurationException, SAXException, IOException
		{
			if (xml != null && !xml.equals("")) {
				Document doc = getDocument(xml);
				NodeList nodeList = null;
				int length = 0;
				if (doc != null) {
					nodeList = doc.getElementsByTagName(tag);
					length = nodeList.getLength();
				}

				if (length > 0) {
					Node node = nodeList.item(0);
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Node : " + node);
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						NodeList childNodes = node.getChildNodes();
						String value = "";
						int count = childNodes.getLength();
						for (int i = 0; i < count; i++) {
							Node item = childNodes.item(i);
							if (item.getNodeType() == Node.TEXT_NODE) {
								value += item.getNodeValue();
							}
						}
						return value;
					} else if (node.getNodeType() == Node.TEXT_NODE) {
						return node.getNodeValue();
					}
				}
			}
			return "";
		}

		public static Document getDocument(String xml) throws ParserConfigurationException, SAXException, IOException {
			Document doc = null;
			try {
				// Step 1: create a DocumentBuilderFactory
				DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
				dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

				// Step 2: create a DocumentBuilder
				DocumentBuilder db = dbf.newDocumentBuilder();

				// Step 3: parse the input file to get a Document object
				doc = db.parse(new InputSource(new StringReader(xml)));
			} catch (Exception ex) {
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug(printException(ex));
			} finally {
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Inside finally block of getDocument method");

			}
			return doc;
		}
		
		public static String printException(Exception e){
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exception = sw.toString();
			return exception;	
		}
		
		private static  int readConfig() {
			Properties p = null;
			try {

				p = new Properties();
				p.load(new FileInputStream(new File(System.getProperty("user.dir") + File.separator + "ConfigFiles" + File.separator + "DCC_DECTECH_System_Integration_Config.properties")));

				Enumeration<?> names = p.propertyNames();

				while (names.hasMoreElements()) {
					String name = (String) names.nextElement();
					DCCSystemIntegrationMap.put(name, p.getProperty(name));
				}
			} catch (Exception e) {
				return -1;
			}
			return 0;
		}
		
		private static  HashMap<String, String> socketConnectionDetails(String cabinetName, String sJtsIp, String iJtsPort, String sessionID) {
			HashMap<String, String> socketDetailsMap = new HashMap<String, String>();

			try {
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Fetching Socket Connection Details.");
				System.out.println("Fetching Socket Connection Details.");

				String socketDetailsQuery = "SELECT SocketServerIP,SocketServerPort FROM NG_BPM_MQ_TABLE with (nolock) where ProcessName = 'DCC' and CallingSource = 'Utility'";

				String socketDetailsInputXML = CommonMethods.apSelectWithColumnNames(socketDetailsQuery, cabinetName, sessionID);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Socket Details APSelect InputXML: " + socketDetailsInputXML);

				String socketDetailsOutputXML = WFNGExecute(socketDetailsInputXML, sJtsIp, iJtsPort, 1);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Socket Details APSelect OutputXML: " + socketDetailsOutputXML);

				XMLParser xmlParserSocketDetails = new XMLParser(socketDetailsOutputXML);
				String socketDetailsMainCode = xmlParserSocketDetails.getValueOf("MainCode");
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SocketDetailsMainCode: " + socketDetailsMainCode);

				int socketDetailsTotalRecords = Integer.parseInt(xmlParserSocketDetails.getValueOf("TotalRetrieved"));
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SocketDetailsTotalRecords: " + socketDetailsTotalRecords);

				if (socketDetailsMainCode.equalsIgnoreCase("0") && socketDetailsTotalRecords > 0) {
					String xmlDataSocketDetails = xmlParserSocketDetails.getNextValueOf("Record");
					xmlDataSocketDetails = xmlDataSocketDetails.replaceAll("[ ]+>", ">").replaceAll("<[ ]+", "<");

					XMLParser xmlParserSocketDetailsRecord = new XMLParser(xmlDataSocketDetails);

					String socketServerIP = xmlParserSocketDetailsRecord.getValueOf("SocketServerIP");
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SocketServerIP: " + socketServerIP);
					socketDetailsMap.put("SocketServerIP", socketServerIP);

					String socketServerPort = xmlParserSocketDetailsRecord.getValueOf("SocketServerPort");
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SocketServerPort " + socketServerPort);
					socketDetailsMap.put("SocketServerPort", socketServerPort);

					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SocketServer Details found.");
					System.out.println("SocketServer Details found.");

				}
			} catch (Exception e) {
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger
						.debug("Exception in getting Socket Connection Details: " + e.getMessage());
				System.out.println("Exception in getting Socket Connection Details: " + e.getMessage());
			}

			return socketDetailsMap;
		}
		
		private static  String sInputXmlApplicantDetails(Map<String, String> applicantDetails_Map, String cabinetName, String sessionID, String jtsIP, String jtsPort) {
			String industry_sector = "";
			String industry_macro = "";
			String industry_micro = "";
			String employercode = validateValue(applicantDetails_Map.get("employercode"));
			if (!employercode.equals("")) {
				String query = "select top 1 INDUSTRY_SECTOR, INDUSTRY_MACRO, INDUSTRY_MICRO from ng_rlos_aloc_offline_data where EMPLOYER_CODE = '" + employercode+ "'";
				try {
					List<Map<String,String>> OutputXML_ref = getDataFromDBMap(query, cabinetName, sessionID, jtsIP, jtsPort);
					if(OutputXML_ref.size()>0)
					{
						industry_sector=OutputXML_ref.get(0).get("INDUSTRY_SECTOR");
						industry_macro=OutputXML_ref.get(0).get("INDUSTRY_MACRO");
						industry_micro=OutputXML_ref.get(0).get("INDUSTRY_MICRO");
					}
				}
				catch(Exception e)
				{
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug(" Exception occurred in ApplicantDetails Query"+ query);
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug(" Exception occurred in sInputXmlApplicantDetails()"+ e.getMessage());
				}
			}
			
			return "<ApplicantDetails>" + ""
			+"<applicant_id>2909099</applicant_id>" + ""
			//+"<primary_cif>"+validateValue(applicantDetails_Map.get("CIF_ID"))+"</primary_cif>" + ""
			+"<ref_no>"+applicantDetails_Map.get("Wi_Name")+"</ref_no>" + ""
			+"<wi_name>"+applicantDetails_Map.get("Wi_Name")+"</wi_name>" + ""
			+"<cust_name>"+validateValue(applicantDetails_Map.get("FirstName"))+ " "+validateValue(applicantDetails_Map.get("LastName"))+"</cust_name>" + ""
			+"<emp_type>S</emp_type>" + ""
			+"<dob>"+validateValue(applicantDetails_Map.get("dob"))+"</dob>" + ""
			+"<age>"+validateValue(applicantDetails_Map.get("Age"))+"</age>" + "" //TODO set according to DOB
			+"<dbr>"+validateValue(applicantDetails_Map.get("FinalDBR"))+"</dbr>" + ""
			+"<tai>25000.00</tai>" + ""
			+"<nationality>"+validateValue(applicantDetails_Map.get("Nationality_Desc"))+"</nationality>" + ""
			+"<resident_flag>Y</resident_flag>" + ""
			+"<world_check>Negative</world_check>" + ""
			+"<blacklist_cust_type>I</blacklist_cust_type>" + ""
			+"<negative_cust_type>I</negative_cust_type>" + ""
			+"<no_of_cheque_bounce_int_3mon_Ind>2</no_of_cheque_bounce_int_3mon_Ind>" + ""
			+"<no_of_DDS_return_int_3mon_Ind>0</no_of_DDS_return_int_3mon_Ind>" + ""
			+"<external_blacklist_flag>I</external_blacklist_flag>" + ""
			+"<los>3.00</los>" + ""
			+"<target_segment_code>ALOC</target_segment_code>" + ""
			//+"<avg_credit_turnover_3>66666.67</avg_credit_turnover_3>" + ""
			//+"<avg_bal_3>223145.2</avg_bal_3>" + ""
			+"<current_emp_catogery>"+validateValue(applicantDetails_Map.get("EmploymentType_Desc"))+"</current_emp_catogery>" + "" //TODO
			+"<year_in_uae>04.00</year_in_uae>" + ""
			+"<ref_relationship>Friend</ref_relationship>" + ""
			+"<passport_expiry_date>"+validateValue(applicantDetails_Map.get("Passport_expiry"))+"</passport_expiry_date>" + ""
			+"<designation>"+validateValue(applicantDetails_Map.get("Designation_Desc"))+"</designation>" + ""
			+"<emirates_work>DXB</emirates_work>" + ""
			+"<gender>"+validateValue(applicantDetails_Map.get("Gender_Desc"))+"</gender>" + ""
			+"<cust_mobile_no>"+validateValue(applicantDetails_Map.get("MobileNo"))+"</cust_mobile_no>" + ""
			+"<salary_with_rakbank>N</salary_with_rakbank>" + ""
			+"<emirates_of_residence>DXB</emirates_of_residence>" + ""
			+"<emp_name>"+validateValue(applicantDetails_Map.get("Employer_Name"))+"</emp_name>" + ""
			/*+"<NegatedDetails>" + ""
			+"</NegatedDetails>" + ""
			+"<BlacklistDetails>" + ""
			+"</BlacklistDetails>" + ""*/
			//+"Str_NegatedDetails" + "" // TODO multiple records replace by this
			//+"<NegatedDetails>" + ""
			//+"<negative_cust_type>I</negative_cust_type>" + ""
			//+"<internal_negative_flag>N</internal_negative_flag>" + ""
			//+"</NegatedDetails>" + ""
			//+"Str_BlacklistDetails" + ""// TODO multiple records replace by this
			/*+"<BlacklistDetails>" + ""
			+"<blacklist_cust_type>I</blacklist_cust_type>" + ""
			+"<internal_blacklist>N</internal_blacklist>" + ""
			+"</BlacklistDetails>" + ""*/
			+"<cust_type>"+validateValue(applicantDetails_Map.get("Application_Type"))+"</cust_type>" + ""
			/*+"<bank_no_borrowing_relation_individual>0</bank_no_borrowing_relation_individual>" + ""
			+"<bank_no_borrowing_relation_company>0</bank_no_borrowing_relation_company>" + ""
			+"<AccountDetails>" + ""
			+"</AccountDetails>" + ""*/
			+"<industry_sector>"+industry_sector+"</industry_sector>" + ""
			+"<industry_macro>"+industry_macro+"</industry_macro>" + ""
			/*+"<industry_micro>"+industry_micro+"</industry_micro>" + ""
			+"<no_bank_other_statement_provided>3</no_bank_other_statement_provided>" + ""*/
			+"<aggregate_exposed>25000.00</aggregate_exposed>" + ""
			//+"<bvr>N</bvr>" + ""
			+"<cc_employer_status>LO</cc_employer_status>" + ""
			+"<pl_employer_status>OP</pl_employer_status>" + ""
			+"<marketing_code>BAU</marketing_code>" + ""
			+"<nmf_flag>N</nmf_flag>" + ""
			+"<visa_sponsor>Binacle</visa_sponsor>" + ""
			/*+"<eff_date_estba>2020-06-28</eff_date_estba>" + ""
			+"<eff_lob>2.05</eff_lob>" + ""
			+"<tlc_issue_date>2020-06-28</tlc_issue_date>" + ""
			+"<no_bank_statement>3</no_bank_statement>" + ""
			+"<no_of_partners>1</no_of_partners>" + ""*/
			+"<standing_instruction>N</standing_instruction>" + ""
			+"<country_of_residence>AE</country_of_residence>" + ""
			+"<vip_flag>"+validateValue(applicantDetails_Map.get("VIPFlag"))+"</vip_flag>" + ""
			+"<title>"+validateValue(applicantDetails_Map.get("Title_Desc"))+"</title>" + ""
			+"<gcc_national>Y</gcc_national>" + ""
			+"<customer_category>5</customer_category>" + ""
			+"<employer_type>P</employer_type>" + ""
			+"</ApplicantDetails>" ;
		}                                                      
	    
		private static String sInputXmlExternalBureau(Map<String, String> applicantDetails_Map, String cabinetName, String sessionID, String jtsIP, String jtsPort) 
		{
			String Wi_Name = applicantDetails_Map.get("Wi_Name");
			
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("inside ExternalBureauData : ");
			String sQuery = "select distinct CifId, fullnm,TotalOutstanding,TotalOverdue,NoOfContracts,Total_Exposure,WorstCurrentPaymentDelay,"
					+ "Worst_PaymentDelay_Last24Months,Worst_Status_Last24Months,Nof_Records,NoOf_Cheque_Return_Last3,Nof_DDES_Return_Last3Months,"
					+ "Nof_Cheque_Return_Last6,DPD30_Last6Months,(select max(ExternalWriteOffCheck) ExternalWriteOffCheck "
					+ "from ((select convert(int,isNULL(ExternalWriteOffCheck,0)) ExternalWriteOffCheck  from ng_dcc_cust_extexpo_CardDetails with(nolock) "
					+ "where Wi_Name  = '"+Wi_Name+"' and ProviderNo!='B01'  "
					
					+ "union all select convert(int,isNULL(ExternalWriteOffCheck,0)) ExternalWriteOffCheck "
					+ "from ng_dcc_cust_extexpo_LoanDetails where Wi_Name  = '"+Wi_Name+"' and ProviderNo!='B01' "
					
					+ "union all select convert(int,isNULL(ExternalWriteOffCheck,0)) ExternalWriteOffCheck from ng_dcc_cust_extexpo_AccountDetails "
					+ "where Wi_Name = '"+Wi_Name+"' and ProviderNo!='B01')) as ExternalWriteOffCheck) as 'ExternalWriteOffCheck' ,(select count(*) "
					+ "from (select DisputeAlert from ng_dcc_cust_extexpo_LoanDetails with(nolock) where Wi_Name = '"+Wi_Name+"' and DisputeAlert='1' "
					
					+ "union select DisputeAlert from ng_dcc_cust_extexpo_CardDetails with(nolock) where Wi_Name = '"+Wi_Name+"' and DisputeAlert='1') "
					+ "as tempTable) as 'DisputeAlert'  from ng_dcc_cust_extexpo_Derived with (nolock) where Wi_Name  = '"+Wi_Name+"' and Request_type= 'ExternalExposure'";
			
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("ExternalBureauData sQuery" + sQuery+ "");
			String AecbHistQuery = "select isnull(max(AECBHistMonthCnt),0) as AECBHistMonthCnt from ( select MAX(cast(isnull(AECBHistMonthCnt,'0') as int)) as AECBHistMonthCnt  "
							+ "from ng_dcc_cust_extexpo_CardDetails with (nolock) where  Wi_Name  = '"+ Wi_Name + "' and cardtype not in ( '85','99','Communication Services',"
							+ "'TelCo-Mobile Prepaid','101','Current/Saving Account with negative Balance','58','Overdraft') and custroletype not in ('Co-Contract Holder','Guarantor') "
							
							+ "union all select Max(cast(isnull(AECBHistMonthCnt,'0') as int)) as AECBHistMonthCnt from ng_dcc_cust_extexpo_LoanDetails with (nolock) "
							+ "where Wi_Name  = '"+ Wi_Name + "' and loantype not in ('85','99','Communication Services','TelCo-Mobile Prepaid','101',"
							+ "'Current/Saving Account with negative Balance','58','Overdraft') and custroletype not in ('Co-Contract Holder','Guarantor')) as ext_expo";
			
			String add_xml_str = "";
			try {
				
				List<Map<String,String>> OutputXML = getDataFromDBMap(sQuery, cabinetName, sessionID, jtsIP, jtsPort);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("ExternalBureauData list size" + OutputXML.size()+ "");
					
				List<Map<String,String>> AecbHistMap = getDataFromDBMap(AecbHistQuery, cabinetName, sessionID, jtsIP, jtsPort);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("ExternalBureauData list size" + AecbHistMap.size()+ "");
				
				if (OutputXML.size() == 0)
				{
					String aecb_score="";
					String range ="";
					String refNo ="";
					//TODO Include cifid in where condition
					String query = "select top 1 ReferenceNo, AECB_Score,Range from ng_dcc_cust_extexpo_Derived with(nolock) where Wi_Name ='"+Wi_Name
							+"' and Request_Type='ExternalExposure' ORDER BY enquiryDate desc"  ;
					try {
						List<Map<String,String>> OutputXML_ref = getDataFromDBMap(query, cabinetName, sessionID, jtsIP, jtsPort);
						if(OutputXML_ref.size()>0)
						{
							refNo=OutputXML_ref.get(0).get("ReferenceNo");
							aecb_score=OutputXML_ref.get(0).get("AECB_Score");
							range=OutputXML_ref.get(0).get("Range");
						}				
					}
					catch(Exception e)
					{
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug(" Exception occurred in externalBureauData Query"+ query);
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug(" Exception occurred in externalBureauData()"+ e.getMessage());
					}
					
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug( "aecb_score :"+aecb_score+" range :: "+range+" refNo:: "+refNo);
					
					add_xml_str +="<ExternalBureau>" + "";
					add_xml_str +="<applicant_id>" + validateValue(applicantDetails_Map.get("CIF_ID")) + "</applicant_id>" + "";
					add_xml_str +="<bureauone_ref_no>"+refNo+"</bureauone_ref_no>" + "";
					add_xml_str +="<full_name>" + validateValue(applicantDetails_Map.get("FirstName")) +" "+ validateValue(applicantDetails_Map.get("LastName")) + "</full_name>" + ""; //, MiddleName, 
					add_xml_str +="<total_out_bal></total_out_bal>" + "";

					add_xml_str +="<total_overdue></total_overdue>" + "";
					add_xml_str +="<no_default_contract></no_default_contract>" + "";
					add_xml_str +="<total_exposure></total_exposure>" + "";
					add_xml_str +="<worst_curr_pay></worst_curr_pay>" + "";
					add_xml_str +="<worst_curr_pay_24></worst_curr_pay_24>" + "";
					//add_xml_str +="<worst_status_24></worst_status_24>" + "";

					add_xml_str +="<no_of_rec></no_of_rec>" + "";
					add_xml_str +="<cheque_return_3mon></cheque_return_3mon>" + "";
					add_xml_str +="<dds_return_3mon></dds_return_3mon>" + "";
					//add_xml_str +="<cheque_return_6mon>" + Nof_Cheque_Return_Last6 + "</cheque_return_6mon>" + "";
					//add_xml_str +="<dds_return_6mon>" + DPD30_Last6Months + "</dds_return_6mon>" + "";
					//add_xml_str +="<prod_external_writeoff_amount>" + "" + "</prod_external_writeoff_amount>" + "";

					add_xml_str +="<no_months_aecb_history>" + AecbHistMap.get(0).get("AECBHistMonthCnt") + "</no_months_aecb_history>" + "";
					//changes done by shivang for 2.1 
					add_xml_str +="<aecb_score>"+aecb_score+"</aecb_score>" + "";
					add_xml_str +="<range>"+range+"</range>" + "";
					add_xml_str +="<company_flag>N</company_flag></ExternalBureau>" + "";

					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("dectech External : " + add_xml_str);
					return add_xml_str;
				} 
				else {
					for (Map<String,String> map : OutputXML){
						String CifId = validateValue(map.get("CifId"));
						String fullnm = validateValue(map.get("fullnm"));
						String TotalOutstanding = validateValue(map.get("TotalOutstanding"));
						String TotalOverdue = validateValue(map.get("TotalOverdue"));
						String NoOfContracts = validateValue(map.get("NoOfContracts"));
						String Total_Exposure = validateValue(map.get("Total_Exposure"));
						String WorstCurrentPaymentDelay = validateValue(map.get("WorstCurrentPaymentDelay"));
						String Worst_PaymentDelay_Last24Months = validateValue(map.get("Worst_PaymentDelay_Last24Months"));
						String Worst_Status_Last24Months = validateValue(map.get("Worst_Status_Last24Months"));
						String Nof_Records = validateValue(map.get("Nof_Records"));
						String NoOf_Cheque_Return_Last3 = validateValue(map.get("NoOf_Cheque_Return_Last3"));
						String Nof_DDES_Return_Last3Months = validateValue(map.get("Nof_DDES_Return_Last3Months"));
						//String Nof_Cheque_Return_Last6 = checkValue(map.get("Nof_Cheque_Return_Last6"));
						//String DPD30_Last6Months = checkValue(map.get("DPD30_Last6Months"));
						//String ExternalWriteOffCheck = checkValue(map.get("ExternalWriteOffCheck"));
						String dispute_alert=validateValue(map.get("tempTable"));
						//String EnquiryDate = validateValue(map.get("EnquiryDate")); //TODO COLUMN IS NOT IN DERIVED TABLE
						
						String aecb_score=""; 
						String range =""; 
						String refNo ="";
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug( "aecb_score :"+aecb_score+" range :: "+range+" refNo:: "+refNo);
						 
						if (!dispute_alert.equals("")) {
							try {
								if (Integer.parseInt(dispute_alert) > 0) {
									dispute_alert = "Y";
								} else {
									dispute_alert = "N";
								}
							} catch (NumberFormatException e) {
								dispute_alert = "N";
								DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.error( "NumberFormatException : "+e.getMessage());
							}
						} else {
							dispute_alert = "N";
						}
						
						String Company_flag = "N";
						String Ref_query = "select ReferenceNo, AECB_Score,Range from ng_dcc_cust_extexpo_Derived with(nolock) where Wi_Name ='"+Wi_Name+"' and Request_Type='ExternalExposure' and CifId='"+CifId+"'";
						try {
							List<Map<String,String>> OutputXML_ref = getDataFromDBMap(Ref_query, cabinetName, sessionID, jtsIP, jtsPort);
							if(OutputXML_ref.size()>0)
							{
								refNo=OutputXML_ref.get(0).get("ReferenceNo");
								aecb_score=OutputXML_ref.get(0).get("AECB_Score");
								range=OutputXML_ref.get(0).get("Range");
								Company_flag = "Y";
							}				
						}
						catch(Exception e)
						{
							DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug(" Exception occurred in externalBureauData Query"+ Ref_query);
							DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug(" Exception occurred in externalBureauData()"+ e.getMessage());
						}
						
						add_xml_str +="<ExternalBureau>" + "";
						add_xml_str +="<applicant_id>" + CifId+ "</applicant_id>" + "";
						add_xml_str +="<bureauone_ref_no>"+refNo+"</bureauone_ref_no>" + "";
						add_xml_str +="<full_name>" + fullnm+ "</full_name>" + "";
						add_xml_str +="<total_out_bal>"+ TotalOutstanding + "</total_out_bal>" + "";

						add_xml_str +="<total_overdue>"+ TotalOverdue + "</total_overdue>" + "";
						add_xml_str +="<no_default_contract>"+ NoOfContracts + "</no_default_contract>" + "";
						add_xml_str +="<total_exposure>"+ Total_Exposure + "</total_exposure>" + "";
						add_xml_str +="<worst_curr_pay>"+ WorstCurrentPaymentDelay + "</worst_curr_pay>" + "";
						add_xml_str +="<worst_curr_pay_24>"+ Worst_PaymentDelay_Last24Months+ "</worst_curr_pay_24>" + "";
						add_xml_str +="<worst_status_24>"+ Worst_Status_Last24Months + "</worst_status_24>" + "";

						add_xml_str +="<no_of_rec>" + Nof_Records+ "</no_of_rec>" + "";
						add_xml_str +="<cheque_return_3mon>"+ NoOf_Cheque_Return_Last3+ "</cheque_return_3mon>" + "";
						add_xml_str +="<dds_return_3mon>"+ Nof_DDES_Return_Last3Months+ "</dds_return_3mon>" + "";
						//add_xml_str +="<cheque_return_6mon>"+ Nof_Cheque_Return_Last6 + "</cheque_return_6mon>" + "";
						//add_xml_str +="<dds_return_6mon>"+ DPD30_Last6Months + "</dds_return_6mon>" + "";
						//add_xml_str = add_xml_str+ "<prod_external_writeoff_amount>" +ExternalWriteOffCheck+ "</prod_external_writeoff_amount>" + "";

						add_xml_str +="<no_months_aecb_history>"+ AecbHistMap.get(0).get("AECBHistMonthCnt")+ "</no_months_aecb_history>" + "";

						//changes done by shivang for 2.1 
						add_xml_str +="<aecb_score>"+aecb_score+"</aecb_score>" + "";
						add_xml_str +="<range>"+range+"</range>" + "";
						add_xml_str +="<AECB_Enquiry_date></AECB_Enquiry_date>" + ""; //"+EnquiryDate+"
						add_xml_str +="<company_flag>"+Company_flag+"</company_flag>" + "";
						add_xml_str +="<dispute_alert>"+dispute_alert+"</dispute_alert></ExternalBureau>";

					}
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("RLOSCommon"+"Internal liab tag Cration: " + add_xml_str);
					return add_xml_str;
				}
			}

			catch (Exception e) {
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("DECTECH Exception occurred in externalBureauData()"+ e.getMessage() + " Error: "+ e.getMessage());
				return null;
			}
		}
		
		private static  String sInputXmlExternalCourtCase(String Wi_Name, String cabinetName, String sessionID, String jtsIP, String jtsPort) {
			String court_cases = "";
			String QueryCaseDetails ="select CodOrganization, ProviderCaseNo, ReferenceDate, CaseCategoryCode,CaseOpenDate, isnull(CaseCloseDate,'') as CaseCloseDate, CaseStatusCode," +
					"InitialTotalClaimAmount from ng_dcc_cust_extexpo_CaseDetails where Wi_Name='"+Wi_Name+"'";
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Select ng_dcc_cust_extexpo_CaseDetails Query: "+QueryCaseDetails);
			List<Map<String,String>> list_map = getDataFromDBMap(QueryCaseDetails, cabinetName, sessionID, jtsIP, jtsPort);
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Total Retrieved Records: " + list_map.size());
			System.out.println("Total Retrieved Records: " + list_map.size());
			for (Map<String,String> map : list_map) {
				court_cases += "<CourtCase>"+ ""
				+"<CodOrganization>"+validateValue(map.get("CodOrganization"))+"</CodOrganization>"+ ""
				+"<ProviderCaseNo>"+validateValue(map.get("ProviderCaseNo"))+"</ProviderCaseNo>"+ ""
				+"<ReferenceDate>"+validateValue(map.get("ReferenceDate"))+"</ReferenceDate>"+ ""
				+"<CaseCategoryCode>"+validateValue(map.get("CaseCategoryCode"))+"</CaseCategoryCode>"+ ""
				+"<OpenDate>"+validateValue(map.get("CaseOpenDate"))+"</OpenDate>"+ ""
				+"<CloseDate>"+validateValue(map.get("CaseCloseDate"))+"</CloseDate>"+ ""
				+"<CaseStatusCode>"+validateValue(map.get("CaseStatusCode"))+"</CaseStatusCode>"+ ""
				+"<InitialTotalClaimAmount>"+validateValue(map.get("InitialTotalClaimAmount"))+"</InitialTotalClaimAmount>"+ ""
				+"</CourtCase>";
			}
			
			return court_cases;
		}
		
		private static  String sInputXmlExternalBouncedCheques(String wiName, String cabinetName, String sessionID, String jtsIP, String jtsPort) {
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("RLOSCommon java file"+"inside ExternalBouncedCheques : ");
			String sQuery = "SELECT CifId,ChqType,number,amount,reasoncode,returndate,providerno FROM ng_dcc_cust_extexpo_ChequeDetails  with (nolock) "
					+ "where Wi_Name = '" + wiName + "' and Request_Type = 'ExternalExposure'";
			
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("ExternalBouncedCheques sQuery" + sQuery+ "");
			String add_xml_str = "";
				
			List<Map<String,String>> OutputXML = getDataFromDBMap(sQuery, cabinetName, sessionID, jtsIP, jtsPort);
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("ExternalBouncedCheques list size" + OutputXML.size()+ "");

			for (Map<String,String> map : OutputXML) {
				add_xml_str +="<ExternalBouncedCheques><applicant_id>" + validateValue(map.get("CifId")) + "</applicant_id>"+ "";
				//add_xml_str +="<external_bounced_cheques_id></external_bounced_cheques_id>"+ "";
				add_xml_str +="<bounced_cheque>" + validateValue(map.get("ChqType")) + "</bounced_cheque>"+ "";
				add_xml_str +="<cheque_no>" + validateValue(map.get("number")) + "</cheque_no>"+ "";
				add_xml_str +="<amount>" + validateValue(map.get("amount")) + "</amount>"+ "";
				add_xml_str +="<reason>" + validateValue(map.get("reasoncode")) + "</reason>"+ "";
				add_xml_str +="<return_date>" + validateValue(map.get("returndate")) + "</return_date>"+ "";
				add_xml_str +="<provider_no>" + validateValue(map.get("providerno")) + "</provider_no><company_flag>N</company_flag></ExternalBouncedCheques>"; // to
			}
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("RLOSCommon"+ "Internal liab tag Cration: "+ add_xml_str);
			return add_xml_str;
		}
		
			
		private static String sInputXmlExternalUtilization(String wiName, String cabinetName, String sessionID, String jtsIP, String jtsPort)
		{
			String sQuery = "select CardEmbossNum, Utilizations24Months as UtilizationsMonths from ng_dcc_cust_extexpo_CardDetails where Wi_Name='" + wiName + "' and (History is not null or History!='') "
					+ "union all select AgreementId, Utilizations24Months as UtilizationsMonths from ng_dcc_cust_extexpo_LoanDetails where Wi_Name='" + wiName + "' and (History is not null or History!='')";
			String add_xml_str = "";

			try {
				String extTabDataIPXML = CommonMethods.apSelectWithColumnNames(sQuery, CommonConnection.getCabinetName(), CommonConnection.getSessionID(DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger, false));
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("extTabDataIPXML: " + extTabDataIPXML);
				String extTabDataOPXML = CommonMethods.WFNGExecute(extTabDataIPXML, CommonConnection.getJTSIP(), CommonConnection.getJTSPort(), 1);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("extTabDataOPXML: " + extTabDataOPXML);

				XMLParser xmlParserData = new XMLParser(extTabDataOPXML);
				int iTotalrec = Integer.parseInt(xmlParserData.getValueOf("TotalRetrieved"));

				if (xmlParserData.getValueOf("MainCode").equalsIgnoreCase("0") && iTotalrec > 0) {
					String xmlDataExtTab = xmlParserData.getNextValueOf("Record");
					xmlDataExtTab = xmlDataExtTab.replaceAll("[ ]+>", ">").replaceAll("<[ ]+", "<");

					NGXmlList objWorkList = xmlParserData.createList("Records", "Record");
					String Utilizations24Months = "";
					for (; objWorkList.hasMoreElements(true); objWorkList.skip(true)) {
						String agreementID = validateValue(objWorkList.getVal("CardEmbossNum"));
						String UtilizationTag = validateValue(objWorkList.getVal("UtilizationsMonths"));

						UtilizationTag = UtilizationTag.replaceAll("Utilizations24Months", "Month_Utilization");
						Utilizations24Months += UtilizationTag.replaceAll("<Month_Utilization>", "<Month_Utilization><CB_application_id>" + agreementID + "</CB_application_id>");
					}
					
					if (!Utilizations24Months.equals(""))
						add_xml_str = add_xml_str + "<Utilization24months>" + Utilizations24Months + "</Utilization24months>";
				}
			} catch (Exception e) {
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Utilization24months Exception : " + e.getMessage());
				e.printStackTrace();
			}
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Utilization24months : " + add_xml_str);
			return add_xml_str;
		}

		private static String sInputXmlExternalHistory(String wiName, String cabinetName, String sessionID, String jtsIP, String jtsPort) {
			String sQuery = "select CardEmbossNum, history as extHistory from ng_dcc_cust_extexpo_CardDetails where Wi_Name='" + wiName + "' and (History is not null or History!='') "
					+ "union all select AgreementId, history as extHistory from ng_dcc_cust_extexpo_LoanDetails where Wi_Name='" + wiName + "' and (History is not null or History!='')";

			String add_xml_str = "";
			try {
				String extTabDataIPXML = CommonMethods.apSelectWithColumnNames(sQuery, CommonConnection.getCabinetName(), CommonConnection.getSessionID(DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger, false));
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("extTabDataIPXML: " + extTabDataIPXML);
				String extTabDataOPXML = CommonMethods.WFNGExecute(extTabDataIPXML, CommonConnection.getJTSIP(), CommonConnection.getJTSPort(), 1);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("extTabDataOPXML: " + extTabDataOPXML);

				XMLParser xmlParserData = new XMLParser(extTabDataOPXML);
				int iTotalrec = Integer.parseInt(xmlParserData.getValueOf("TotalRetrieved"));

				if (xmlParserData.getValueOf("MainCode").equalsIgnoreCase("0") && iTotalrec > 0) {
					String xmlDataExtTab = xmlParserData.getNextValueOf("Record");
					xmlDataExtTab = xmlDataExtTab.replaceAll("[ ]+>", ">").replaceAll("<[ ]+", "<");

					NGXmlList objWorkList = xmlParserData.createList("Records", "Record");
					String history = "";
					for (; objWorkList.hasMoreElements(true); objWorkList.skip(true)) {
						String agreementID = validateValue(objWorkList.getVal("CardEmbossNum"));
						String HistoryTag = validateValue(objWorkList.getVal("extHistory"));
						HistoryTag = HistoryTag.replaceAll("Key", "monthyear");

						history += HistoryTag.replaceAll("<History>", "<History><CB_application_id>" + agreementID + "</CB_application_id>");
					}
					
					if (!history.equals(""))
						add_xml_str = add_xml_str + "<History_24months>" + history + "</History_24months>";
				}
			} catch (Exception e) {
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("History_24months Exception : " + e.getMessage());
				e.printStackTrace();
			}
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("History_24months : " + add_xml_str);
			return add_xml_str;
		}

		private static  String sInputXmlExternalBureauIndividualProducts(String wiName, String cabinetName, String sessionID, String jtsIP, String jtsPort) {
			//DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("RLOSCommon java file"+"inside ExternalBureauIndividualProducts : ");
			String sQuery = "select CifId,AgreementId,LoanType,ProviderNo,LoanStat,CustRoleType,LoanApprovedDate,LoanMaturityDate,OutstandingAmt,TotalAmt,PaymentsAmt,"
					+ "TotalNoOfInstalments,RemainingInstalments,WriteoffStat,WriteoffStatDt,CreditLimit,OverdueAmt,NofDaysPmtDelay,MonthsOnBook,lastrepmtdt,IsCurrent,"
					+ "CurUtilRate,DPD30_Last6Months,DPD60_Last12Months,AECBHistMonthCnt,DPD5_Last3Months,'' as qc_Amnt,'' as Qc_emi,'' as Cac_indicator,Take_Over_Indicator,"
					+ "Consider_For_Obligations, case when IsDuplicate= '1' then 'Y' else 'N' end AS IsDuplicate,avg_utilization,DPD5_Last12Months,DPD60Plus_Last12Months,MaximumOverDueAmount,"
					+ "Pmtfreq, MaxOverDueAmountDate from ng_dcc_cust_extexpo_LoanDetails with (nolock) where Wi_Name= '"+ wiName + "'  and LoanStat != 'Pipeline' "
					
			+ "union select CifId,CardEmbossNum,CardType,ProviderNo,CardStatus,CustRoleType,StartDate,ClosedDate,CurrentBalance,'' as col6,"
			+ "PaymentsAmount,NoOfInstallments,'' as col5,WriteoffStat,WriteoffStatDt,CashLimit,OverdueAmount,NofDaysPmtDelay,MonthsOnBook,lastrepmtdt,IsCurrent,CurUtilRate,"
			+ "DPD30_Last6Months,DPD60_Last12Months,AECBHistMonthCnt,DPD5_Last3Months,qc_amt,qc_emi,CAC_Indicator,Take_Over_Indicator,Consider_For_Obligations,case when "
			+ "IsDuplicate= '1' then 'Y' else 'N' end AS IsDuplicate,avg_utilization,DPD5_Last12Months,DPD60Plus_Last12Months,MaximumOverDueAmount,Pmtfreq, MaxOverDueAmountDate from "
			+ "ng_dcc_cust_extexpo_CardDetails with (nolock) where Wi_Name = '" + wiName+ "' and cardstatus != 'Pipeline'   "
			
			+ "union select CifId,AcctId,AcctType,ProviderNo,AcctStat,CustRoleType,StartDate,ClosedDate,OutStandingBalance,TotalAmount,PaymentsAmount,'','',"
			+ "WriteoffStat,WriteoffStatDt,CreditLimit,OverdueAmount,"
			+ "NofDaysPmtDelay,MonthsOnBook,'',IsCurrent,CurUtilRate,DPD30_Last6Months,DPD60_Last12Months,AECBHistMonthCnt,DPD5_Last3Months,'','','','',"
			+ "isnull(Consider_For_Obligations,'true'),case when IsDuplicate= '1' then 'Y' else 'N' end AS IsDuplicate,'',DPD5_Last12Months,DPD60Plus_Last12Months,"
			+ "MaximumOverDueAmount,Pmtfreq, MaxOverDueAmountDate from ng_dcc_cust_extexpo_AccountDetails with (nolock)  where Wi_Name  =  '"+wiName+"' "
			
			+ "union select CifId,ServiceID,ServiceType,ProviderNo,ServiceStat,CustRoleType,SubscriptionDt,SvcExpDt,'','','','','',WriteoffStat,WriteoffStatDt,'',OverDueAmount,"
			+ "NofDaysPmtDelay,MonthsOnBook,'',IsCurrent,CurUtilRate,'',DPD30_Last6Months,AECBHistMonthCnt,DPD5_Last3Months,'','','','',isnull(Consider_For_Obligations,'true')"
			+ ",case when IsDuplicate= '1' then 'Y' else 'N' end AS IsDuplicate,'',DPD5_Last12Months,DPD60Plus_Last12Months,'','','' from ng_dcc_cust_extexpo_ServicesDetails with (nolock)  "
			+ "where ServiceStat='Active' and wi_name  =  '"+wiName+"'";
			
			String add_xml_str = "";
			List<Map<String,String>> OutputXML = getDataFromDBMap(sQuery, cabinetName, sessionID, jtsIP, jtsPort);
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("ExternalBureauIndividualProducts list size"+ OutputXML.size()+ "");
				
			for (Map<String,String> map : OutputXML){
				
				String ContractType = validateValue(map.get("LoanType"));
				String phase = validateValue(map.get("LoanStat"));
				String CustRoleType = validateValue(map.get("CustRoleType"));
				String start_date = validateValue(map.get("LoanApprovedDate"));
				String close_date = validateValue(map.get("LoanMaturityDate"));
				String OutStanding_Balance = validateValue(map.get("OutstandingAmt"));
				String TotalAmt = validateValue(map.get("TotalAmt"));
				String PaymentsAmt = validateValue(map.get("PaymentsAmt"));
				String TotalNoOfInstalments = validateValue(map.get("TotalNoOfInstalments"));
				String RemainingInstalments = validateValue(map.get("RemainingInstalments"));
				String WorstStatus = validateValue(map.get("WriteoffStat"));
				String WorstStatusDate = validateValue(map.get("WriteoffStatDt"));
				//String CreditLimit = validateValue(map.get("CreditLimit"));
				String OverdueAmt = validateValue(map.get("OverdueAmt"));
				String NofDaysPmtDelay = validateValue(map.get("NofDaysPmtDelay"));
				String MonthsOnBook = validateValue(map.get("MonthsOnBook"));
				String last_repayment_date = validateValue(map.get("lastrepmtdt"));
				//String DPD60Last12Months = validateValue(map.get("DPD60_Last12Months"));
				//String AECBHistMonthCnt = validateValue(map.get("AECBHistMonthCnt"));
				String DPD30Last6Months = validateValue(map.get("DPD30_Last6Months"));
				String currently_current = validateValue(map.get("IsCurrent"));
				String current_utilization = validateValue(map.get("CurUtilRate"));
				String delinquent_in_last_3months = validateValue(map.get("DPD5_Last3Months"));
				//String QC_Amt = validateValue(map.get("qc_Amnt"));
				//String QC_emi = validateValue(map.get("Qc_emi"));
				String CAC_Indicator = validateValue(map.get("Cac_indicator"));
				String TakeOverIndicator = validateValue(map.get("Take_Over_Indicator"));
				String consider_for_obligation = validateValue(map.get("Consider_For_Obligations"));
				String Duplicate_flag=validateValue(map.get("IsDuplicate"));
				//String avg_utilization=validateValue(map.get("avg_utilization"));
				String DPD60plus_last12month=validateValue(map.get("DPD60Plus_Last12Months"));
				String DPD5_last12month=validateValue(map.get("DPD5_Last12Months"));
				String MaximumOverDueAmount = validateValue(map.get("MaximumOverDueAmount"));  
				String Pmtfreq = validateValue(map.get("Pmtfreq"));
				String MaxOverDueAmountDate = validateValue(map.get("MaxOverDueAmountDate"));
				
				if (!ContractType.equals("")) {
					try {
						String cardquery = "select code from ng_master_contract_type with (nolock) where description='"+ ContractType + "'";
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("ExternalBureauIndividualProducts sQuery"+ cardquery+ "");
						Map<String, String> cardqueryXML = getDataFromDB(cardquery, cabinetName, sessionID, jtsIP, jtsPort, "code");
						ContractType = cardqueryXML.get("code");
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("ExternalBureauIndividualProducts ContractType"+ ContractType+ "ContractType");
					} catch (Exception e) {
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("ExternalBureauIndividualProducts ContractType Exception"+ e+ "Exception");
					}
				}
				
				phase = phase.startsWith("A") ? "A" : "C";
				
				if (!CustRoleType.equals("")) {
					String sQueryCustRoleType = "select code from ng_master_role_of_customer with(nolock) where Description='"+CustRoleType+"'";
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("CustRoleType"+sQueryCustRoleType);
					Map<String, String> cardqueryXML = getDataFromDB(sQueryCustRoleType, cabinetName, sessionID, jtsIP, jtsPort, "code");
					try {
						if (cardqueryXML != null && cardqueryXML.size() > 0 && cardqueryXML.get("code") != null) {
							CustRoleType = cardqueryXML.get("code");
						}
					}
					catch(Exception e){
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("Exception occured at sQueryCombinedLimit for"+sQueryCustRoleType);
					}	
				}

				CAC_Indicator = "true".equalsIgnoreCase(CAC_Indicator) ? "Y" : "N";
				
				TakeOverIndicator = "true".equalsIgnoreCase(TakeOverIndicator) ? "Y" : "N";
				
				consider_for_obligation = "true".equalsIgnoreCase(consider_for_obligation) ? "Y" : "N";
				
				//Always N because of salaried person
				String Company_flag="N";

				add_xml_str +="<ExternalBureauIndividualProducts><applicant_id>" + map.get("CifId") + "</applicant_id>"+ "";
				add_xml_str +="<external_bureau_individual_products_id>" + map.get("AgreementId") + "</external_bureau_individual_products_id>"+ "";
				add_xml_str +="<contract_type>" + ContractType + "</contract_type>"+ "";
				add_xml_str +="<provider_no>" + map.get("ProviderNo") + "</provider_no>"+ "";
				add_xml_str +="<phase>" + phase + "</phase>"+ "";
				add_xml_str +="<role_of_customer>" + CustRoleType + "</role_of_customer>"+ "";
				add_xml_str +="<start_date>" + start_date + "</start_date>"+ "";

				add_xml_str +="<close_date>" + close_date + "</close_date>"+ "";
				add_xml_str +="<outstanding_balance>" + OutStanding_Balance + "</outstanding_balance>"+ "";
				add_xml_str +="<total_amount>" + TotalAmt + "</total_amount>"+ "";
				add_xml_str +="<payments_amount>" + PaymentsAmt + "</payments_amount>"+ "";
				add_xml_str +="<total_no_of_instalments>" + TotalNoOfInstalments + "</total_no_of_instalments>"+ "";
				add_xml_str +="<no_of_remaining_instalments>" + RemainingInstalments + "</no_of_remaining_instalments>"+ "";
				add_xml_str +="<worst_status>" + WorstStatus + "</worst_status>"+ "";
				add_xml_str +="<worst_status_date>" + WorstStatusDate + "</worst_status_date>"+ "";

				//add_xml_str +="<credit_limit>" + CreditLimit + "</credit_limit>"+ "";
				add_xml_str +="<overdue_amount>" + OverdueAmt + "</overdue_amount>"+ "";
				add_xml_str +="<no_of_days_payment_delay>" + NofDaysPmtDelay + "</no_of_days_payment_delay>"+ "";
				add_xml_str +="<mob>" + MonthsOnBook + "</mob>"+ "";
				add_xml_str +="<last_repayment_date>" + last_repayment_date + "</last_repayment_date>"+ "";

				if (currently_current != null && "1".equalsIgnoreCase(currently_current)) {
					add_xml_str +="<currently_current>Y</currently_current>"+ "";
				} else {
					add_xml_str +="<currently_current>N</currently_current>"+ "";
				}
			
				add_xml_str +="<current_utilization>" + current_utilization + "</current_utilization>"+ "";
				add_xml_str +="<dpd_30_last_6_mon>" + DPD30Last6Months + "</dpd_30_last_6_mon>"+ "";

				add_xml_str +="<dpd_60p_in_last_12_mon>" + DPD60plus_last12month + "</dpd_60p_in_last_12_mon>"+ "";
				add_xml_str +="<dpd_5_in_last_12_mon>" + DPD5_last12month + "</dpd_5_in_last_12_mon>"+ "";
				//add_xml_str +="<no_months_aecb_history>" + AECBHistMonthCnt + "</no_months_aecb_history>"+ "";
				add_xml_str +="<maximum_overdue_amount>" + MaximumOverDueAmount + "</maximum_overdue_amount>"+ "";// added by deppanshu
				add_xml_str +="<delinquent_in_last_3months>" + delinquent_in_last_3months + "</delinquent_in_last_3months>"+ "";
				//add_xml_str +="<clean_funded>" + "" + "</clean_funded>"+ "";
				//add_xml_str +="<cac_indicator>" + CAC_Indicator + "</cac_indicator>"+ "";
				//add_xml_str +="<qc_emi>" + QC_emi + "</qc_emi>"+ "";
				//add_xml_str +="<qc_amount>" + QC_Amt + "</qc_amount>">"+ "";
				add_xml_str +="<company_flag>"+Company_flag+"</company_flag>"+ "";
				//add_xml_str +="<cac_bank_name>" + CAC_BANK_NAME+ "</cac_bank_name>"+ "";
				add_xml_str +="<take_over_indicator>" + TakeOverIndicator + "</take_over_indicator>"+ "";
				add_xml_str +="<consider_for_obligation>" + consider_for_obligation + "</consider_for_obligation>"+ "";
				add_xml_str +="<duplicate_flag>"+Duplicate_flag+"</duplicate_flag>"+ "";
				//add_xml_str +="<avg_utilization>"+avg_utilization+"</avg_utilization>"+ "";
				add_xml_str +="<payment_frequency>"+Pmtfreq+"</payment_frequency>"+ "";
				add_xml_str +="<maximum_overdue_date>"+MaxOverDueAmountDate+"</maximum_overdue_date>"+ "";
				add_xml_str +="</ExternalBureauIndividualProducts>";
				
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("Internal liab tag Cration: "	+ add_xml_str);
			}
			
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("Internal liab tag Cration: "	+ add_xml_str);
			return add_xml_str;
		}
		
		private static  String sInputXmlExternalBureauPipelineProducts(String wiName, String cabinetName, String sessionID, String jtsIP, String jtsPort) {
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("inside ExternalBureauPipelineProducts : ");
			String sQuery = "select CifId, AgreementId,ProviderNo,LoanType,LoanDesc,CustRoleType,Datelastupdated,TotalAmt,TotalNoOfInstalments,CreditLimit,'' as col1,NoOfDaysInPipeline,"
					+ "isnull(Consider_For_Obligations,'true') as 'Consider_For_Obligations', case when IsDuplicate= '1' then 'Y' else 'N' end as 'IsDuplicate' from ng_dcc_cust_extexpo_LoanDetails with (nolock) "
					+ "where Wi_Name  =  '" + wiName + "' and LoanStat = 'Pipeline'"
					+ "union select CifId, CardEmbossNum,ProviderNo,CardType,CardTypeDesc, CustRoleType,LastUpdateDate,'' as col2,NoOfInstallments, '' as col3, TotalAmount, "
					+ "NoOfDaysInPipeLine,isnull(Consider_For_Obligations,'true') as 'Consider_For_Obligations',case when IsDuplicate= '1' then 'Y' else 'N' end as 'IsDuplicate' from ng_dcc_cust_extexpo_CardDetails "
					+ "with (nolock) where Wi_Name  =  '" + wiName + "' and cardstatus = 'Pipeline'";
			
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("ExternalBureauPipelineProducts sQuery" + sQuery+"");
			
			String add_xml_str = "";
			List<Map<String,String>> maps= getDataFromDBMap(sQuery, cabinetName, sessionID, jtsIP, jtsPort);
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("ExternalBureauPipelineProducts list size"+ maps.size()+ "");
				
			for (Map<String,String> map : maps) {

				String contractType = validateValue(map.get("LoanType"));
				String role = validateValue(map.get("CustRoleType"));
				//String lastUpdateDate = validateValue(map.get("Datelastupdated"));
				String consider_for_obligation=validateValue(map.get("Consider_For_Obligations"));

				if (!contractType.equals("")) {
					try {
						String cardquery = "select code from ng_master_contract_type with (nolock) where description='"+ contractType + "'";
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("ExternalBureauIndividualProducts sQuery"+ cardquery+ "");
						Map<String, String> cardqueryXML = getDataFromDB(cardquery, cabinetName, sessionID, jtsIP, jtsPort, "code");
						contractType = cardqueryXML.get("code");
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("ExternalBureauIndividualProducts ContractType"+ contractType+ "ContractType");
					} catch (Exception e) {
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("ExternalBureauIndividualProducts ContractType Exception"+ e+ "Exception");
					}
				}
				
				if (!role.equals("")) {
					String sQueryCustRoleType = "select code from ng_master_role_of_customer with(nolock) where Description='"+role+"'";
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("CustRoleType"+sQueryCustRoleType);
					Map<String, String> cardqueryXML = getDataFromDB(sQueryCustRoleType, cabinetName, sessionID, jtsIP, jtsPort, "code");
					try {
						if (cardqueryXML != null && cardqueryXML.size() > 0 && cardqueryXML.get("code") != null) {
							role = cardqueryXML.get("code");
						}
					}
					catch(Exception e){
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.info("Exception occured at sQueryCombinedLimit for"+sQueryCustRoleType);
					}	
				}
				
				if (!"".equalsIgnoreCase(consider_for_obligation) && "true".equalsIgnoreCase(consider_for_obligation)) {
					consider_for_obligation = "Y";
				} else {
					consider_for_obligation = "N";
				}
				
				add_xml_str +="<ExternalBureauPipelineProducts><applicant_ID>" + validateValue(map.get("CifId")) + "</applicant_ID>"+ "";
				add_xml_str +="<external_bureau_pipeline_products_id>" + validateValue(map.get("AgreementId")) + "</external_bureau_pipeline_products_id>"+ "";
				add_xml_str +="<ppl_provider_no>" + validateValue(map.get("ProviderNo")) + "</ppl_provider_no>"+ "";
				add_xml_str +="<ppl_type_of_contract>" + contractType + "</ppl_type_of_contract>"+ "";
				add_xml_str +="<ppl_type_of_product>" + validateValue(map.get("LoanDesc")) + "</ppl_type_of_product>"+ "";
				add_xml_str +="<ppl_phase>" + "PIPELINE" + "</ppl_phase>"+ "";
				add_xml_str +="<ppl_role>" + role + "</ppl_role>"+ "";
				add_xml_str +="<ppl_date_of_last_update>" + validateValue(map.get("Datelastupdated")) + "</ppl_date_of_last_update>"+ "";
				//add_xml_str +="<ppl_total_amount>" + validateValue(map.get("TotalAmt")) + "</ppl_total_amount>"+ "";
				add_xml_str +="<ppl_no_of_instalments>" + validateValue(map.get("TotalNoOfInstalments")) + "</ppl_no_of_instalments>"+ "";
				if (validateValue(map.get("LoanType")).toUpperCase().contains("LOAN")) {
					add_xml_str +="<ppl_total_amount>" + validateValue(map.get("TotalAmt")) + "</ppl_total_amount>"+ "";
				} else {
					add_xml_str +="<ppl_credit_limit>" + validateValue(map.get("col1")) + "</ppl_credit_limit>"+ "";
				}
				add_xml_str +="<ppl_no_of_days_in_pipeline>" + validateValue(map.get("NoOfDaysInPipeline")) + "</ppl_no_of_days_in_pipeline>"+ "";
				add_xml_str +="<company_flag>N</company_flag>"+ "";
				add_xml_str +="<ppl_consider_for_obligation>"+consider_for_obligation+"</ppl_consider_for_obligation>"+ "";
				add_xml_str +="<ppl_duplicate_flag>"+validateValue(map.get("IsDuplicate"))+"</ppl_duplicate_flag></ExternalBureauPipelineProducts>";
			}
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("RLOSCommon"+ "Internal liab tag Cration: "	+ add_xml_str);
			return add_xml_str;
		}
		
		private static  String validateValue(String value) {
			if (value != null && ! value.equals("") && !value.equalsIgnoreCase("null")) {
				return value.toString();
			}
			return "";
		}
		
		private static  Map<String,String> getDataFromDB(String query, String cabinetName, String sessionID, String jtsIP, String jtsPort, String... columns) {
			try{
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Inside function getDataFromDB");
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("getDataFromDB query is: "+query);
				String InputXML = CommonMethods.apSelectWithColumnNames(query, cabinetName, sessionID);
				Map<String,String> temp = null;
				String OutXml = WFNGExecute(InputXML, jtsIP, jtsPort, 1);
				OutXml = OutXml.replaceAll("&", "#andsymb#");
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("getDataFromDB output xml is: "+OutXml);
				Document recordDoc1 = null;//MapXML.getDocument(OutXml);
				NodeList records1 = recordDoc1.getElementsByTagName("Records");
				if (records1.getLength() > 0) {
					temp = new HashMap<String,String>();
					for(String column : columns) {
						String value= getTagValue(OutXml, column).replaceAll("#andsymb#", "&");
						//String value= getTagValue(OutXml, column);
						DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("value from getTagValue function is:"+value);
						if(null!=value && !"null".equalsIgnoreCase(value) && !"".equals(value)){
							DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Setting value of "+column+" as "+value);	
							temp.put(column, value);
						}
						else{
							DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Setting value of "+column+" as blank");
							temp.put(column, "");
						}
					}
					temp.put("TotalRetrieved", getTagValue(OutXml, "TotalRetrieved"));
				}
				return temp;	
			}
			catch(Exception ex){
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Exception in getDataFromDB method + "+printException(ex));
				return null;
			}
		}

		private static  List<Map<String,String>> getDataFromDBMap(String query, String cabinetName, String sessionID, String jtsIP, String jtsPort){
			try{
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Inside function getDataFromDB");
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("getDataFromDB query is: "+query);
				String InputXML = CommonMethods.apSelectWithColumnNames(query, cabinetName, sessionID);
				List<Map<String,String>> temp = new ArrayList<Map<String,String>>();
				String OutXml = WFNGExecute(InputXML, jtsIP, jtsPort, 1);
				OutXml = OutXml.replaceAll("&", "#andsymb#");
				Document recordDoc1 = null; //MapXML.getDocument(OutXml);
				NodeList records1 = recordDoc1.getElementsByTagName("Record");
				if (records1.getLength() > 0) {
					for(int i=0;i<records1.getLength();i++){
						Node n = records1.item(i);
						Map<String,String> t = new HashMap<String,String>();
						if(n.hasChildNodes()) {
							NodeList child = n.getChildNodes();
							for(int j=0;j<child.getLength();j++) {
								Node n1 = child.item(j);
								String column = n1.getNodeName();
								String value = n1.getTextContent().replaceAll("#andsymb#", "&");
								if(null!=value && !"null".equalsIgnoreCase(value) && !"".equals(value)){
									DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("getDataFromDBMap Setting value of "+column+" as "+value);	
									t.put(column, value);
								}
								else{
									DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("getDataFromDBMap Setting value of "+column+" as blank");
									t.put(column, "");
								}
							}
						}
						temp.add(t);
					}
				}
				return temp;	
			}
			catch(Exception ex){
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Exception in getDataFromDBMap method + "+printException(ex));
				return null;
			}

		}
		
		static String socketConnection(String cabinetName, String username, String sessionId, String sJtsIp, String iJtsPort, String wi_name, String ws_name,
				int connection_timeout, int integrationWaitTime, HashMap<String, String> socketDetailsMap, StringBuilder sInputXML)
		{

			String socketServerIP;
			int socketServerPort;
			Socket socket = null;
			OutputStream out = null;
			InputStream socketInputStream = null;
			DataOutputStream dout = null;
			DataInputStream din = null;
			String outputResponse = null;
			String inputRequest = null;
			String inputMessageID = null;



			try
			{

				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("userName "+ username);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SessionId "+ sessionId);

				socketServerIP=socketDetailsMap.get("SocketServerIP");
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SocketServerIP "+ socketServerIP);
				socketServerPort=Integer.parseInt(socketDetailsMap.get("SocketServerPort"));
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SocketServerPort "+ socketServerPort);

		   		if (!("".equalsIgnoreCase(socketServerIP) && socketServerIP == null && socketServerPort==0))
		   		{

	    			socket = new Socket(socketServerIP, socketServerPort);
	    			socket.setSoTimeout(connection_timeout*1000);
	    			out = socket.getOutputStream();
	    			socketInputStream = socket.getInputStream();
	    			dout = new DataOutputStream(out);
	    			din = new DataInputStream(socketInputStream);
	    			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Dout " + dout);
	    			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Din " + din);

	    			outputResponse = "";

	    			inputRequest = getRequestXML( cabinetName,sessionId ,wi_name, ws_name, username, sInputXML);

	    			if (inputRequest != null && inputRequest.length() > 0)
	    			{
	    				int inputRequestLen = inputRequest.getBytes("UTF-16LE").length;
	    				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("RequestLen: "+inputRequestLen + "");
	    				inputRequest = inputRequestLen + "##8##;" + inputRequest;
	    				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("InputRequest"+"Input Request Bytes : "+ inputRequest.getBytes("UTF-16LE"));
	    				dout.write(inputRequest.getBytes("UTF-16LE"));dout.flush();
	    			}
	    			byte[] readBuffer = new byte[500];
	    			int num = din.read(readBuffer);
	    			if (num > 0)
	    			{

	    				byte[] arrayBytes = new byte[num];
	    				System.arraycopy(readBuffer, 0, arrayBytes, 0, num);
	    				outputResponse = outputResponse+ new String(arrayBytes, "UTF-16LE");
						inputMessageID = outputResponse;
	    				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("OutputResponse: "+outputResponse);

	    				if(!"".equalsIgnoreCase(outputResponse))
	    					outputResponse = getResponseXML(cabinetName,sJtsIp,iJtsPort,sessionId, wi_name,outputResponse,integrationWaitTime );

	    				if(outputResponse.contains("&lt;"))
	    				{
	    					outputResponse=outputResponse.replaceAll("&lt;", "<");
	    					outputResponse=outputResponse.replaceAll("&gt;", ">");
	    				}
	    			}
	    			socket.close();

					outputResponse = outputResponse.replaceAll("</MessageId>","</MessageId>/n<InputMessageId>"+inputMessageID+"</InputMessageId>");

					//DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("outputResponse "+outputResponse);
					return outputResponse;

	    	 		}

	    		else
	    		{
	    			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SocketServerIp and SocketServerPort is not maintained "+"");
	    			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("SocketServerIp is not maintained "+	socketServerIP);
	    			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug(" SocketServerPort is not maintained "+	socketServerPort);
	    			return "Socket Details not maintained";
	    		}

			}

			catch (Exception e)
			{
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Exception Occured Mq_connection_CC"+e.getStackTrace());
				return "";
			}
			finally
			{
				try
				{
					if(out != null)
					{
						out.close();
						out=null;
					}
					if(socketInputStream != null)
					{

						socketInputStream.close();
						socketInputStream=null;
					}
					if(dout != null)
					{

						dout.close();
						dout=null;
					}
					if(din != null)
					{

						din.close();
						din=null;
					}
					if(socket != null)
					{
						if(!socket.isClosed())
							socket.close();
						socket=null;
					}

				}

				catch(Exception e)
				{
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Final Exception Occured Mq_connection_CC"+e.getStackTrace());
					//printException(e);
				}
			}
		}
		
		private static String getRequestXML(String cabinetName, String sessionId, String wi_name, String ws_name, String userName, StringBuilder sInputXML)
		{
			StringBuffer strBuff = new StringBuffer();
			strBuff.append("<APMQPUTGET_Input>");
			strBuff.append("<SessionId>" + sessionId + "</SessionId>");
			strBuff.append("<EngineName>" + cabinetName + "</EngineName>");
			strBuff.append("<XMLHISTORY_TABLENAME>NG_DCC_XMLLOG_HISTORY</XMLHISTORY_TABLENAME>");
			strBuff.append("<WI_NAME>" + wi_name + "</WI_NAME>");
			strBuff.append("<WS_NAME>" + ws_name + "</WS_NAME>");
			strBuff.append("<USER_NAME>" + userName + "</USER_NAME>");
			strBuff.append("<MQ_REQUEST_XML>");
			strBuff.append(sInputXML);
			strBuff.append("</MQ_REQUEST_XML>");
			strBuff.append("</APMQPUTGET_Input>");
			DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("GetRequestXML: "+ strBuff.toString());
			return strBuff.toString();
		}
		
		private static String getResponseXML(String cabinetName,String sJtsIp,String iJtsPort, String sessionId, String wi_name, String message_ID, int integrationWaitTime)
		{

			String outputResponseXML="";
			try
			{
				String QueryString = "select OUTPUT_XML from NG_DCC_XMLLOG_HISTORY with (nolock) where MESSAGE_ID ='"+message_ID+"' and WI_NAME = '"+wi_name+"'";

				String responseInputXML =CommonMethods.apSelectWithColumnNames(QueryString, cabinetName, sessionId);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Response APSelect InputXML: "+responseInputXML);

				int Loop_count=0;
				do
				{
					String responseOutputXML=CommonMethods.WFNGExecute(responseInputXML,sJtsIp,iJtsPort,1);
					DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Response APSelect OutputXML: "+responseOutputXML);

				    XMLParser xmlParserSocketDetails= new XMLParser(responseOutputXML);
				    String responseMainCode = xmlParserSocketDetails.getValueOf("MainCode");
				    DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("ResponseMainCode: "+responseMainCode);



				    int responseTotalRecords = Integer.parseInt(xmlParserSocketDetails.getValueOf("TotalRetrieved"));
				    DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("ResponseTotalRecords: "+responseTotalRecords);

				    if (responseMainCode.equals("0") && responseTotalRecords > 0)
					{

						String responseXMLData=xmlParserSocketDetails.getNextValueOf("Record");
						responseXMLData =responseXMLData.replaceAll("[ ]+>",">").replaceAll("<[ ]+", "<");

		        		XMLParser xmlParserResponseXMLData = new XMLParser(responseXMLData);
		        		//DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("ResponseXMLData: "+responseXMLData);

		        		outputResponseXML=xmlParserResponseXMLData.getValueOf("OUTPUT_XML");
		        		//DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("OutputResponseXML: "+outputResponseXML);

		        		if("".equalsIgnoreCase(outputResponseXML)){
		        			outputResponseXML="Error";
		    			}
		        		break;
					}
				    Loop_count++;
				    Thread.sleep(1000);
				}
				while(Loop_count<integrationWaitTime);
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("integrationWaitTime: "+integrationWaitTime);

			}
			catch(Exception e)
			{
				DCC_EFMS_Exposure_IntegrationLog.DCC_EFMSIntegrationLogger.debug("Exception occurred in outputResponseXML" + e.getMessage());
				outputResponseXML="Error";
			}

			return outputResponseXML;
		}

	

}
