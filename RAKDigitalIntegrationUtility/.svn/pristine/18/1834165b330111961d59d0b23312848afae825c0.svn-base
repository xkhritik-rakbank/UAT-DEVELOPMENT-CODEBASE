/*
---------------------------------------------------------------------------------------------------------
                  NEWGEN SOFTWARE TECHNOLOGIES LIMITED

Group                   : Application - Projects
Project/Product			: RAK BPM
Application				: RAK BPM Utility
Module					: RAOP Status
File Name				: RAOPStatus.java
Author 					: Ravindra Kumar	
Date (DD/MM/YYYY)		: 01/06/2022

---------------------------------------------------------------------------------------------------------
                 	CHANGE HISTORY
---------------------------------------------------------------------------------------------------------

Problem No/CR No        Change Date           Changed By             Change Description
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
*/


package com.newgen.DCC.Notify;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import ISPack.CImageServer;
import ISPack.CPISDocumentTxn;
import ISPack.ISUtil.JPISException;
import Jdts.DataObject.JPDBString;

import com.newgen.common.CommonConnection;
import com.newgen.common.CommonMethods;
import com.newgen.omni.jts.cmgr.NGXmlList;
import com.newgen.omni.jts.cmgr.XMLParser;
import com.newgen.wfdesktop.xmlapi.WFXmlResponse;


public class DCC_Notify_App implements Runnable
{
	static Map<String, String> NotifyAppConfigParamMap= new HashMap<String, String>();

	int socketConnectionTimeout=0;
	int integrationWaitTime=0;
	int sleepIntervalInMin=0;
	private static String cabinetName = null;
	private static String jtsIP = null;
	private static String jtsPort = null;
	private static String queueID = null;
	private static String propDocsPath = null;
	private static String docList = null;
	@Override
	public void run()
	{
		String sessionID = "";
		
		

		try
		{
			DCCNotifyLog.setLogger();

			DCCNotifyLog.DCCNotifyLogger.debug("Connecting to Cabinet.");

			int configReadStatus = readConfig();

			DCCNotifyLog.DCCNotifyLogger.debug("configReadStatus "+configReadStatus);
			if(configReadStatus !=0)
			{
				DCCNotifyLog.DCCNotifyLogger.error("Could not Read Config Properties [DCCNotifyAPP]");
				return;
			}

			cabinetName = CommonConnection.getCabinetName();
			DCCNotifyLog.DCCNotifyLogger.debug("Cabinet Name: " + cabinetName);

			jtsIP = CommonConnection.getJTSIP();
			DCCNotifyLog.DCCNotifyLogger.debug("JTSIP: " + jtsIP);

			jtsPort = CommonConnection.getJTSPort();
			DCCNotifyLog.DCCNotifyLogger.debug("JTSPORT: " + jtsPort);

			queueID = NotifyAppConfigParamMap.get("queueID");
			DCCNotifyLog.DCCNotifyLogger.debug("QueueID: " + queueID);
			
			propDocsPath=NotifyAppConfigParamMap.get("DOCGENERATIONPATH");
			DCCNotifyLog.DCCNotifyLogger.debug("propDocsPath: "+propDocsPath);
			
			docList=NotifyAppConfigParamMap.get("COOLINGDOCS");
			DCCNotifyLog.DCCNotifyLogger.debug("docList: "+docList);
			
			if(docList!=null && docList.contains(","))
				docList=docList.replaceAll(",", "','");

			socketConnectionTimeout=Integer.parseInt(NotifyAppConfigParamMap.get("MQ_SOCKET_CONNECTION_TIMEOUT"));
			DCCNotifyLog.DCCNotifyLogger.debug("SocketConnectionTimeOut: "+socketConnectionTimeout);

			integrationWaitTime=Integer.parseInt(NotifyAppConfigParamMap.get("INTEGRATION_WAIT_TIME"));
			DCCNotifyLog.DCCNotifyLogger.debug("IntegrationWaitTime: "+integrationWaitTime);

			sleepIntervalInMin=Integer.parseInt(NotifyAppConfigParamMap.get("SleepIntervalInMin"));
			DCCNotifyLog.DCCNotifyLogger.debug("SleepIntervalInMin: "+sleepIntervalInMin);


			sessionID = CommonConnection.getSessionID(DCCNotifyLog.DCCNotifyLogger, false);

			if(sessionID.trim().equalsIgnoreCase(""))
			{
				DCCNotifyLog.DCCNotifyLogger.debug("Could Not Connect to Server!");
			}
			else
			{
				DCCNotifyLog.DCCNotifyLogger.debug("Session ID found: " + sessionID);
				HashMap<String, String> socketDetailsMap = CommonMethods.socketConnectionDetails(cabinetName, jtsIP, jtsPort, sessionID);
				while (true) {
					DCCNotifyLog.setLogger();
					DCCNotifyLog.DCCNotifyLogger.debug("DCC Notify TO DEH ...123.");
					DCC_NotifyAppUtility(cabinetName, jtsIP, jtsPort, sessionID, queueID, socketConnectionTimeout, integrationWaitTime, socketDetailsMap);
					System.out.println("No More workitems to Process, Sleeping!");
					Thread.sleep(sleepIntervalInMin * 60 * 1000);
				}
			}
		}

		catch(Exception e)
		{
			e.printStackTrace();
			DCCNotifyLog.DCCNotifyLogger.error("Exception Occurred in DCCNotifyAPP : "+e);
			final Writer result = new StringWriter();
			final PrintWriter printWriter = new PrintWriter(result);
			e.printStackTrace(printWriter);
			DCCNotifyLog.DCCNotifyLogger.error("Exception Occurred in DCCNotifyAPP : "+result);
		}
	}

	@SuppressWarnings("unused")
	private void DCC_NotifyAppUtility(String cabinetName, String sJtsIp, String iJtsPort, String sessionId, String queueID, 
			int socketConnectionTimeOut, int integrationWaitTime, HashMap<String, String> socketDetailsMap)
	{
		final String ws_name="Sys_DEH_Notify";
		
		try
		{
			final HashMap<String, String> CheckGridDataMap = new HashMap<String, String>();
			//Validate Session ID
			sessionId  = CommonConnection.getSessionID(DCCNotifyLog.DCCNotifyLogger, false);

			if (sessionId == null || sessionId.equalsIgnoreCase("") || sessionId.equalsIgnoreCase("null"))
			{
				DCCNotifyLog.DCCNotifyLogger.error("Could Not Get Session ID "+sessionId);
				return;
			}

			//Fetch all Work-Items on given queueID.
			DCCNotifyLog.DCCNotifyLogger.debug("Fetching all Workitems on DCCNotifyAPP queue");
			System.out.println("Fetching all Workitems on CIF_Update_Initial queue");
			String fetchWorkitemListInputXML=CommonMethods.fetchWorkItemsInput(cabinetName, sessionId, queueID);
			DCCNotifyLog.DCCNotifyLogger.debug("InputXML for fetchWorkList Call: "+fetchWorkitemListInputXML);

			String fetchWorkitemListOutputXML= CommonMethods.WFNGExecute(fetchWorkitemListInputXML,sJtsIp,iJtsPort,1);

			DCCNotifyLog.DCCNotifyLogger.debug("WMFetchWorkList DCCNotifyAPP OutputXML: "+fetchWorkitemListOutputXML);

			XMLParser xmlParserFetchWorkItemlist = new XMLParser(fetchWorkitemListOutputXML);

			String fetchWorkItemListMainCode = xmlParserFetchWorkItemlist.getValueOf("MainCode");
			DCCNotifyLog.DCCNotifyLogger.debug("FetchWorkItemListMainCode: "+fetchWorkItemListMainCode);

			int fetchWorkitemListCount = Integer.parseInt(xmlParserFetchWorkItemlist.getValueOf("RetrievedCount"));
			DCCNotifyLog.DCCNotifyLogger.debug("RetrievedCount for WMFetchWorkList Call: "+fetchWorkitemListCount);

			DCCNotifyLog.DCCNotifyLogger.debug("Number of workitems retrieved on DCCNotifyAPP: "+fetchWorkitemListCount);

			System.out.println("Number of workitems retrieved on DCCNotifyAPP: "+fetchWorkitemListCount);

			if (fetchWorkItemListMainCode.trim().equals("0") && fetchWorkitemListCount > 0)
			{
				for(int i=0; i<fetchWorkitemListCount; i++)
				{
					String fetchWorkItemlistData=xmlParserFetchWorkItemlist.getNextValueOf("Instrument");
					fetchWorkItemlistData =fetchWorkItemlistData.replaceAll("[ ]+>",">").replaceAll("<[ ]+", "<");

					DCCNotifyLog.DCCNotifyLogger.debug("Parsing <Instrument> in WMFetchWorkList OutputXML: "+fetchWorkItemlistData);
					XMLParser xmlParserfetchWorkItemData = new XMLParser(fetchWorkItemlistData);

					String processInstanceID=xmlParserfetchWorkItemData.getValueOf("ProcessInstanceId");
					DCCNotifyLog.DCCNotifyLogger.debug("Current ProcessInstanceID: "+processInstanceID);
					//processInstanceID="DCC-0000000833-process";
					DCCNotifyLog.DCCNotifyLogger.debug("Processing Workitem: "+processInstanceID);
					System.out.println("\nProcessing Workitem: "+processInstanceID);

					String WorkItemID=xmlParserfetchWorkItemData.getValueOf("WorkItemId");
					DCCNotifyLog.DCCNotifyLogger.debug("Current WorkItemID: "+WorkItemID);

					String entryDateTime=xmlParserfetchWorkItemData.getValueOf("EntryDateTime");
					DCCNotifyLog.DCCNotifyLogger.debug("Current EntryDateTime: "+entryDateTime);

					String ActivityName=xmlParserfetchWorkItemData.getValueOf("ActivityName");
					DCCNotifyLog.DCCNotifyLogger.debug("ActivityName: "+ActivityName);
					
					String ActivityID = xmlParserfetchWorkItemData.getValueOf("WorkStageId");
					DCCNotifyLog.DCCNotifyLogger.debug("ActivityID: "+ActivityID);
					String ActivityType = xmlParserfetchWorkItemData.getValueOf("ActivityType");
					DCCNotifyLog.DCCNotifyLogger.debug("ActivityType: "+ActivityType);
					String ProcessDefId = xmlParserfetchWorkItemData.getValueOf("RouteId");
					DCCNotifyLog.DCCNotifyLogger.debug("ProcessDefId: "+ProcessDefId);
					
					
					String decisionValue="";
					String Notify_app_input_xml="";
					
				    String DBQuery ="select  FIRCO_Flag,EFMS_Status,FTS_Ack_flg,Dectech_Decision,Decision,Final_Limit,Card_Limit,ADDITIONAL_DOCUMENT_REQUIRED,prospect_id,NOTIFY_DEH_IDENTIFIER,Card_Product_Sub_Type," +
				    		"cast(isnull(Expense1,0) as int)+cast(isnull(Expense2,0) as int)+cast(isnull(Expense3,0) as int)+cast(isnull(Expense4,0) as int)+cast(isnull(Expense4,0) as int) as LifeStyleExpenditure," +
				    		"FinalTAI,DBR_lifeStyle_expenses,Output_TotalDeduction,Output_Stress_BufferAmt,cancel_in_cooling_period,Decline_reason from NG_DCC_EXTTABLE with(nolock) where WI_name='" + processInstanceID + "'";
				    
				    String extTabDataIPXML =CommonMethods.apSelectWithColumnNames(DBQuery, cabinetName, CommonConnection.getSessionID(DCCNotifyLog.DCCNotifyLogger, false));
				    DCCNotifyLog.DCCNotifyLogger.debug("extTabDataIPXML: " + extTabDataIPXML);
				    String extTabDataOPXML = CommonMethods.WFNGExecute(extTabDataIPXML, CommonConnection.getJTSIP(), CommonConnection.getJTSPort(), 1);
				    DCCNotifyLog.DCCNotifyLogger.debug("extTabDataOPXML: " + extTabDataOPXML);
				   
				    XMLParser xmlParserData = new XMLParser(extTabDataOPXML);
				    
				    int iTotalrec = Integer.parseInt(xmlParserData.getValueOf("TotalRetrieved"));
				   
				    if (xmlParserData.getValueOf("MainCode").equalsIgnoreCase("0") && iTotalrec > 0)
			        {
				    	String NOTIFY_DEH_IDENTIFIER=xmlParserData.getValueOf("NOTIFY_DEH_IDENTIFIER");
				    	String prospect_id=xmlParserData.getValueOf("prospect_id");
				    	String Final_Limit=xmlParserData.getValueOf("Final_Limit");
				    	String Card_Limit=xmlParserData.getValueOf("Card_Limit");
				    	String ADDITIONAL_DOCUMENT_REQUIRED=xmlParserData.getValueOf("ADDITIONAL_DOCUMENT_REQUIRED");
				    	String Decision=xmlParserData.getValueOf("Decision");
				    	String cardType =xmlParserData.getValueOf("Card_Product_Sub_Type");
				    	String firco=xmlParserData.getValueOf("FIRCO_Flag");
				    	String fts=xmlParserData.getValueOf("FTS_Ack_flg");
				    	String efms=xmlParserData.getValueOf("EFMS_Status");
				    	String DectechDecision=xmlParserData.getValueOf("Dectech_Decision");
				    	String LIFESTYLE=xmlParserData.getValueOf("LifeStyleExpenditure");
						String AECB_MONTHLY=xmlParserData.getValueOf("Output_TotalDeduction");
						String STRESS=xmlParserData.getValueOf("Output_Stress_BufferAmt");
						String ASS_INCOME=xmlParserData.getValueOf("FinalTAI");
						String AFF_RATIO=xmlParserData.getValueOf("DBR_lifeStyle_expenses");
						String cancel_in_cooling_period=xmlParserData.getValueOf("cancel_in_cooling_period");
						String Decline_reason=xmlParserData.getValueOf("Decline_reason");
						
				    	
				    	
				    	DCCNotifyLog.DCCNotifyLogger.debug("NOTIFY_DEH_IDENTIFIER: "+NOTIFY_DEH_IDENTIFIER);
				    	DCCNotifyLog.DCCNotifyLogger.debug("prospect_id: "+prospect_id);
				    	DCCNotifyLog.DCCNotifyLogger.debug("Final_Limit: "+Final_Limit);
				    	DCCNotifyLog.DCCNotifyLogger.debug("ADDITIONAL_DOCUMENT_REQUIRED: "+ADDITIONAL_DOCUMENT_REQUIRED);
				    	DCCNotifyLog.DCCNotifyLogger.debug("Decision: "+Decision);
				    	
				    	if(NOTIFY_DEH_IDENTIFIER!=null && !"".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER))
				    	{
				    		if("FIRCO".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER))
				    		{ // WS from Firco
				    			/*DCCNotifyLog.DCCNotifyLogger.debug("Inside FIRCO: "+NOTIFY_DEH_IDENTIFIER);
			    				String query = "select Top 1 decision_date_time from NG_DCC_GR_DECISION_HISTORY with(nolock) where workstep='Firco' and wi_name = '" + processInstanceID + "' order by decision_date_time desc";
			    				String ActdateIPXML =CommonMethods.apSelectWithColumnNames(query, cabinetName, CommonConnection.getSessionID(DCCNotifyLog.DCCNotifyLogger, false));
							    DCCNotifyLog.DCCNotifyLogger.debug("extTabDataIPXML: " + ActdateIPXML);
							    String ActdateOPXML = CommonMethods.WFNGExecute(ActdateIPXML,jtsIP, jtsPort, 1);
							    DCCNotifyLog.DCCNotifyLogger.debug("extTabDataOPXML: " + ActdateOPXML);*/
							    
							    String actionDate="";
				    			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");//yyyy-MM-dd HH:MM:ss
				    			actionDate=simpleDateFormat.format(new Date());
							    // using xml parser to pass the output data in desired format 
							    //XMLParser xmlParserActData = new XMLParser(ActdateOPXML);
							    // total values retrieved > 0 is a check
							   // int iTotalrecAct = Integer.parseInt(xmlParserActData.getValueOf("TotalRetrieved"));
//							   / if (xmlParserActData.getValueOf("MainCode").equalsIgnoreCase("0") && iTotalrecAct > 0)
						      
							    //	String actionDateTime=xmlParserActData.getValueOf("decision_date_time");
							    	String additioal_docs_details = "";
							    	/*if(actionDateTime!=null && !"".equalsIgnoreCase(actionDateTime))
							    	{*/
							    		//String actionDate= CommonMethods.parseDate(actionDateTime,"yyyy-MM-dd HH:mm:ss","dd-MM-yyyy");//2022-07-22 18:28:37.000
							    		DCCNotifyLog.DCCNotifyLogger.debug("Inside FIRCO actionDate : "+actionDate);
							    		// documents for notify_app - AdditionalDocumentDetails
									    if (ADDITIONAL_DOCUMENT_REQUIRED != null && "Y".equalsIgnoreCase(ADDITIONAL_DOCUMENT_REQUIRED)) 
									    {
									    	// document status SHOULD BE PPENDING
								            String DBQuery_doc ="select document_name,document_month, document_year,document_remarks from NG_DCC_GR_ADDITIONAL_DOCUMENT with(nolock) where WI_name = '" + processInstanceID + "' and document_status='Pending'";
								            
								            String docDataIPXML =CommonMethods.apSelectWithColumnNames(DBQuery_doc, cabinetName, CommonConnection.getSessionID(DCCNotifyLog.DCCNotifyLogger, false));
								    	    DCCNotifyLog.DCCNotifyLogger.debug("extTabDataIPXML: " + docDataIPXML);
								    	    String docDataOPXML = CommonMethods.WFNGExecute(docDataIPXML, jtsIP, jtsPort, 1);
								    	    DCCNotifyLog.DCCNotifyLogger.debug("extTabDataOPXML: " + docDataOPXML);
								            
								    	    XMLParser xmlParserDocData = new XMLParser(docDataOPXML);
								            
								    	    int iTotalrec1 = Integer.parseInt(xmlParserDocData.getValueOf("TotalRetrieved"));
								    	    
								    	    if (xmlParserDocData.getValueOf("MainCode").equalsIgnoreCase("0") && iTotalrec1 > 0)
								            {
												for (int j = 0; j < iTotalrec1; j++)
												{
													String fetchlistData=xmlParserDocData.getNextValueOf("Record");
													fetchlistData =fetchlistData.replaceAll("[ ]+>",">").replaceAll("<[ ]+", "<");
						
													DCCNotifyLog.DCCNotifyLogger.debug("Parsing <Instrument> in WMFetchWorkList OutputXML: "+fetchWorkItemlistData);
													XMLParser xmlParserfetchData = new XMLParser(fetchlistData);
													
													String monthName=xmlParserfetchData.getValueOf("document_month");
													String year=xmlParserfetchData.getValueOf("document_year");
													String docName=xmlParserfetchData.getValueOf("document_name");
													
													if(monthName!=null && !"".equalsIgnoreCase(monthName) && year!=null && !"".equalsIgnoreCase(year)&& monthName!=null && !"".equalsIgnoreCase(monthName))
													{
														String monthYear=getMonthNumber(monthName)+"-"+year;
														additioal_docs_details += "\t\t" +"<DocNameList>"+ "\n" +
																"\t\t\t" +"<DocumentName>"+xmlParserfetchData.getValueOf("document_name")+"</DocumentName>"+ "\n" +
																"\t\t\t" +"<MonthYear>"+monthYear+"</MonthYear>"+ "\n" +
																"\t\t" +"</DocNameList>";
													}
												}
									    }
									    
									    String fileLocation=new StringBuffer().append(System.getProperty("user.dir")).append(System.getProperty("file.separator")).append("DCC_Integration")
						    		    		.append(System.getProperty("file.separator")).append("FIRCO_DOCS_REQD.txt").toString();
									    BufferedReader sbf=new BufferedReader(new FileReader(fileLocation));
							    		
							    		StringBuilder sb=new StringBuilder();
							    		String line=sbf.readLine();
							    		while(line!=null)
							    		{
							    			sb.append(line);
							    			sb.append(System.lineSeparator());
							    			line=sbf.readLine();
							    		}
							    		Notify_app_input_xml=sb.toString();
							    		if(actionDate==null)
							    			actionDate="";
							    		Notify_app_input_xml=Notify_app_input_xml.replace("#WI_NAME#", processInstanceID);
							    		Notify_app_input_xml=Notify_app_input_xml.replace("#PROSPECTID#", prospect_id);
							    		Notify_app_input_xml=Notify_app_input_xml.replace("#DOCREQUIRED#", ADDITIONAL_DOCUMENT_REQUIRED);
							    		Notify_app_input_xml=Notify_app_input_xml.replace("#DOCUMENTLIST#", additioal_docs_details);
							    		Notify_app_input_xml=Notify_app_input_xml.replace("#ACTIONEDDATE#", actionDate);
							    		
							    		
							    		
							    		DCCNotifyLog.DCCNotifyLogger.debug("Notify_app_input_xml FIRCO: " + Notify_app_input_xml);
							    		
									    }	      
			    		}
				    	else if("Decline_Prospect".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER))
				    		{ // WS from system assign cif
					    		String fileLocation=new StringBuffer().append(System.getProperty("user.dir")).append(System.getProperty("file.separator")).append("DCC_Integration")
		    		    		.append(System.getProperty("file.separator")).append("DECLINE_PROS_CLOSURE.txt").toString();
							    BufferedReader sbf=new BufferedReader(new FileReader(fileLocation));
					    		
					    		StringBuilder sb=new StringBuilder();
					    		String line=sbf.readLine();
					    		while(line!=null)
					    		{
					    			sb.append(line);
					    			sb.append(System.lineSeparator());
					    			line=sbf.readLine();
					    		}
					    		String actionDate="";
				    			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");//yyyy-MM-dd HH:MM:ss
				    			actionDate=simpleDateFormat.format(new Date());
				    			
				    			
					    		Notify_app_input_xml=sb.toString();
					    		Notify_app_input_xml=Notify_app_input_xml.replace("#WI_NAME#", processInstanceID);
					    		Notify_app_input_xml=Notify_app_input_xml.replace("#PROSPECTID#", prospect_id);
					    		Notify_app_input_xml=Notify_app_input_xml.replace("#CLOSE_PROSPECT#", "Y");
					    		Notify_app_input_xml=Notify_app_input_xml.replace("#DecisionDate#", actionDate);
					    		
					    		if("CB".equalsIgnoreCase(firco))
					    		{
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#FIRCO_DECLINE#", "Y");
					    		}
					    		else if("N".equalsIgnoreCase(firco)||"FP".equalsIgnoreCase(firco))
					    		{
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#FIRCO_DECLINE#", "N");
					    		}
					    		else
					    		{
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#FIRCO_DECLINE#", "");
					    		}
					    		
					    		if("D".equalsIgnoreCase(DectechDecision))
					    		{
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECTCH_DECLINE#", "Y");
					    		}
					    		else if("A".equalsIgnoreCase(DectechDecision) || "R".equalsIgnoreCase(DectechDecision))
					    		{
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECTCH_DECLINE#", "N");
					    		}
					    		else
					    		{
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECTCH_DECLINE#", "");
					    		}
					    		if("Confirmed Fraud".equalsIgnoreCase(efms))
					    		{
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#EFMS_DECLINE#", "Y");
					    		}
					    		else if("Non-Alerted".equalsIgnoreCase(efms) || "Closed".equalsIgnoreCase(efms))
					    		{
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#EFMS_DECLINE#", "N");
					    		}
					    		else
					    		{
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#EFMS_DECLINE#", "");
					    		}
					    		if(LIFESTYLE!=null)
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#LIFESTYLE#", LIFESTYLE);
					    		else
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#LIFESTYLE#", "");
					    		if(AECB_MONTHLY!=null)
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#AECB_MONTHLY#", AECB_MONTHLY);
					    		else
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#AECB_MONTHLY#", "");
					    		if(STRESS!=null)
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#STRESS#", STRESS);
					    		else
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#STRESS#", "");
					    		if(ASS_INCOME!=null)
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#ASS_INCOME#", ASS_INCOME);
					    		else
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#ASS_INCOME#","");
					    		if(AFF_RATIO!=null)
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#AFF_RATIO#",AFF_RATIO);
					    		else
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#AFF_RATIO#","");
					    		if(cardType!=null)
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#CARD_TYPE#", cardType);
					    		else
					    			Notify_app_input_xml=Notify_app_input_xml.replace("#CARD_TYPE#", "");
					    		
					    		Notify_app_input_xml=Notify_app_input_xml.replace("#DEDUCTION#", "");
					    		Notify_app_input_xml=Notify_app_input_xml.replace("#DISPOSE#", "");
					    		
					    		DCCNotifyLog.DCCNotifyLogger.debug("Notify_app_input_xml DECLINE_PROS_CLOSURE: " + Notify_app_input_xml);
					    		
					    		
				    		}
				    	else if("Sys_PrimeAWB_Gen".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER))
			    		{ // WS from sys awb prime 
			    			DCCNotifyLog.DCCNotifyLogger.debug("IBPS Card dispatch");
			    			String actionDate="";
			    			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");//yyyy-MM-dd HH:MM:ss
			    			actionDate=simpleDateFormat.format(new Date());
			    			/*String IBPS_FINAL_APPROVAL_query = "select Top 1 decision_date_time from NG_DCC_GR_DECISION_HISTORY with(nolock) where workstep='' and wi_name = '" + processInstanceID + "' order by decision_date_time desc";
		    				String IBPS_FINAL_APPROVAL_ActdateIPXML =CommonMethods.apSelectWithColumnNames(IBPS_FINAL_APPROVAL_query, cabinetName, CommonConnection.getSessionID(DCCNotifyLog.DCCNotifyLogger, false));
						    DCCNotifyLog.DCCNotifyLogger.debug("extTabDataIPXML: " + IBPS_FINAL_APPROVAL_ActdateIPXML);
						    String IBPS_FINAL_APPROVAL_ActdateOPXML = CommonMethods.WFNGExecute(IBPS_FINAL_APPROVAL_ActdateIPXML,jtsIP, jtsPort, 1);
						    DCCNotifyLog.DCCNotifyLogger.debug("extTabDataOPXML: " + IBPS_FINAL_APPROVAL_ActdateOPXML);
						    XMLParser xmlParser_IBPS_FINAL_APPROVAL = new XMLParser(IBPS_FINAL_APPROVAL_ActdateOPXML);
						    int iTotalrec_IBPS_FINAL_APPROVAL = Integer.parseInt(xmlParser_IBPS_FINAL_APPROVAL.getValueOf("TotalRetrieved"));
						    if (xmlParser_IBPS_FINAL_APPROVAL.getValueOf("MainCode").equalsIgnoreCase("0") && iTotalrec_IBPS_FINAL_APPROVAL > 0)
					        {
						    	actionDateTime=xmlParser_IBPS_FINAL_APPROVAL.getValueOf("decision_date_time");
							    if(actionDateTime!=null && !"".equalsIgnoreCase(actionDateTime))
						    	{
							    	actionDate= CommonMethods.parseDate(actionDateTime,"yyyy-MM-dd HH:mm:ss","dd-MM-yyyy");//2022-07-22 18:28:37.000
						    	}
					        }
						    DCCNotifyLog.DCCNotifyLogger.debug("xmlParser_IBPS_FINAL_APPROVAL actionDate: " +actionDate);*/   
				    		DCCNotifyLog.DCCNotifyLogger.debug("COOLING actionDate: " +actionDate);
			    			
			    			
			    			String fileLocation=new StringBuffer().append(System.getProperty("user.dir")).append(System.getProperty("file.separator")).append("DCC_Integration")
	    		    		.append(System.getProperty("file.separator")).append("CARD_DISPATCH.txt").toString();
						    BufferedReader sbf=new BufferedReader(new FileReader(fileLocation));
				    		
				    		StringBuilder sb=new StringBuilder();
				    		String line=sbf.readLine();
				    		while(line!=null)
				    		{
				    			sb.append(line);
				    			sb.append(System.lineSeparator());
				    			line=sbf.readLine();
				    		}
				    		Notify_app_input_xml=sb.toString();
				    		if(processInstanceID!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#WI_NAME#", processInstanceID);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#WI_NAME#", "");
				    		if(prospect_id!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#PROSPECTID#", prospect_id);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#PROSPECTID#", "");
				    		if(actionDate!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECISIONDATE#",actionDate);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECISIONDATE#","");
				    		if(Final_Limit!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#CARDLIMIT#", Final_Limit);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#CARDLIMIT#", "");
				    		DCCNotifyLog.DCCNotifyLogger.debug("Notify_app_input_xml CARD_DISPATCH: " + Notify_app_input_xml);
			    		}
				    	else if("Card_Ops_Approve".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER))
			    		{ // WS from cards 
			    			DCCNotifyLog.DCCNotifyLogger.debug("INSIDE COOLING");
			    			
			    			String actionDate="";
			    			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");//YYYY-MM-DD
			    			actionDate=simpleDateFormat.format(new Date());
						    
				    		DCCNotifyLog.DCCNotifyLogger.debug("COOLING actionDate: " +actionDate);
			    			
			    			String fileLocation=new StringBuffer().append(System.getProperty("user.dir")).append(System.getProperty("file.separator")).append("DCC_Integration")
	    		    		.append(System.getProperty("file.separator")).append("COOLING.txt").toString();
						    BufferedReader sbf=new BufferedReader(new FileReader(fileLocation));
				    		
				    		StringBuilder sb=new StringBuilder();
				    		String line=sbf.readLine();
				    		while(line!=null)
				    		{
				    			sb.append(line);
				    			sb.append(System.lineSeparator());
				    			line=sbf.readLine();
				    		}
				    		Notify_app_input_xml=sb.toString();
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#WI_NAME#", processInstanceID);
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#PROSPECTID#", prospect_id);
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#YYYY-MM-DD#", actionDate);
				    		
				    		if(actionDate!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#YYYY-MM-DD#", actionDate);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#YYYY-MM-DD#", "");

				    		if(LIFESTYLE!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#LIFESTYLE#", LIFESTYLE);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#LIFESTYLE#", "");
				    		if(AECB_MONTHLY!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AECB_MONTHLY#", AECB_MONTHLY);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AECB_MONTHLY#", "");
				    		if(STRESS!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#STRESS#", STRESS);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#STRESS#", "");
				    		if(ASS_INCOME!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#ASS_INCOME#", ASS_INCOME);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#ASS_INCOME#","");
				    		if(AFF_RATIO!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AFF_RATIO#",AFF_RATIO);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AFF_RATIO#","");
				    		if(cardType!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#CARD_TYPE#", cardType);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#CARD_TYPE#", "");
				    		
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#DEDUCTION#", "");
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#DISPOSE#", "");
				    		
				    		if(docList!= null)//&& downloadAttachDocuments(processInstanceID)!=null
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#COOL_DOC_LIST#", docList);
				    		}
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#COOL_DOC_LIST#", "");
				    		
				    		DCCNotifyLog.DCCNotifyLogger.debug("COOLING Notify_app_input_xml : " +Notify_app_input_xml);
			    		}
				    	else if("Card_Ops_Reject".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER)||"Courier_Reject".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER))
			    		{ // WS from card blck || 
				    		
				    		String actionDate="";
			    			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");//YYYY-MM-DD
			    			actionDate=simpleDateFormat.format(new Date());
				    		String fileLocation=new StringBuffer().append(System.getProperty("user.dir")).append(System.getProperty("file.separator")).append("DCC_Integration")
	    		    		.append(System.getProperty("file.separator")).append("CANCEL_PROS_CLOSURE.txt").toString();
						    BufferedReader sbf=new BufferedReader(new FileReader(fileLocation));
				    		
				    		StringBuilder sb=new StringBuilder();
				    		String line=sbf.readLine();
				    		while(line!=null)
				    		{
				    			sb.append(line);
				    			sb.append(System.lineSeparator());
				    			line=sbf.readLine();
				    		}
				    		Notify_app_input_xml=sb.toString();
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#WI_NAME#", processInstanceID);
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#PROSPECTID#", prospect_id);
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#CLOSE_PROSPECT#", "Y");
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#DecisionDate#", actionDate);
				    		
				    		if("Card_Ops_Reject".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER))
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#DEL_CLOSEURE#", "Y");
				    		}
				    		else if("CP_Reject".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER))
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#DEL_CLOSEURE#", "N");
				    		}
				    		
				    		if(cancel_in_cooling_period!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#CANCEL_COOLING#", cancel_in_cooling_period);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#CANCEL_COOLING#", "");
				    		if(Decline_reason!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECLINE_REASON#", Decline_reason);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECLINE_REASON#", "");
				    		if(LIFESTYLE!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#LIFESTYLE#", LIFESTYLE);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#LIFESTYLE#", "");
				    		if(AECB_MONTHLY!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AECB_MONTHLY#", AECB_MONTHLY);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AECB_MONTHLY#", "");
				    		if(STRESS!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#STRESS#", STRESS);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#STRESS#", "");
				    		if(ASS_INCOME!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#ASS_INCOME#", ASS_INCOME);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#ASS_INCOME#","");
				    		if(AFF_RATIO!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AFF_RATIO#",AFF_RATIO);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AFF_RATIO#","");
				    		if(cardType!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#CARD_TYPE#", cardType);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#CARD_TYPE#", "");
				    		
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#DEDUCTION#", "");
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#DISPOSE#", "");
				    		
				    		DCCNotifyLog.DCCNotifyLogger.debug("Notify_app_input_xml CANCEL_PROS_CLOSURE: " + Notify_app_input_xml);
				    	}
				    	else if("Card_Ops_Refer".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER))
			    		{ // WS from cards ops
				    		String actionDate="";
			    			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");//YYYY-MM-DD
			    			actionDate=simpleDateFormat.format(new Date());
				    		String fileLocation=new StringBuffer().append(System.getProperty("user.dir")).append(System.getProperty("file.separator")).append("DCC_Integration")
			    		    		.append(System.getProperty("file.separator")).append("RESCHEDULE_DOCS.txt").toString();
								    BufferedReader sbf=new BufferedReader(new FileReader(fileLocation));
						    		
				    		StringBuilder sb=new StringBuilder();
				    		String line=sbf.readLine();
				    		while(line!=null)
				    		{
				    			sb.append(line);
				    			sb.append(System.lineSeparator());
				    			line=sbf.readLine();
				    		}
				    		Notify_app_input_xml=sb.toString();
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#WI_NAME#", processInstanceID);
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#PROSPECTID#", prospect_id);
				    		if(actionDate!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#dd-mm-yyyy#", actionDate);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#dd-mm-yyyy#", "");
			    		}
			    		else if("Sys_Limit_Increase".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER))
			    		{	// WS from sys limit inc
			    			DCCNotifyLog.DCCNotifyLogger.debug("INSIDE LIMIT_INCREASE");
			    			
			    			
			    			String actionDate="";
			    			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");//yyyy-MM-dd HH:MM:ss
			    			actionDate=simpleDateFormat.format(new Date());
			    			/*String LIMIT_INCREASE_query = "select Top 1 decision_date_time from NG_DCC_GR_DECISION_HISTORY with(nolock) where workstep='' and wi_name = '" + processInstanceID + "' order by decision_date_time desc";
		    				String LIMIT_INCREASE_ActdateIPXML =CommonMethods.apSelectWithColumnNames(LIMIT_INCREASE_query, cabinetName, CommonConnection.getSessionID(DCCNotifyLog.DCCNotifyLogger, false));
						    DCCNotifyLog.DCCNotifyLogger.debug("extTabDataIPXML: " + LIMIT_INCREASE_ActdateIPXML);
						    String LIMIT_INCREASE_ActdateOPXML = CommonMethods.WFNGExecute(LIMIT_INCREASE_ActdateIPXML,jtsIP, jtsPort, 1);
						    DCCNotifyLog.DCCNotifyLogger.debug("extTabDataOPXML: " + LIMIT_INCREASE_ActdateOPXML);
						    XMLParser xmlParser_LIMIT_INCREASE = new XMLParser(LIMIT_INCREASE_ActdateOPXML);
						    int iTotalrec_LIMIT_INCREASE = Integer.parseInt(xmlParser_LIMIT_INCREASE.getValueOf("TotalRetrieved"));
						    if (xmlParser_LIMIT_INCREASE.getValueOf("MainCode").equalsIgnoreCase("0") && iTotalrec_LIMIT_INCREASE > 0)
					        {
						    	actionDateTime=xmlParser_LIMIT_INCREASE.getValueOf("decision_date_time");
							    if(actionDateTime!=null && !"".equalsIgnoreCase(actionDateTime))
						    	{
							    	actionDate= CommonMethods.parseDate(actionDateTime,"yyyy-MM-dd HH:mm:ss","dd-MM-yyyy");//2022-07-22 18:28:37.000
						    	}
					        }*/
				    		DCCNotifyLog.DCCNotifyLogger.debug("LIMIT_INCREASE actionDate: " +actionDate);
			    			String fileLocation=new StringBuffer().append(System.getProperty("user.dir")).append(System.getProperty("file.separator")).append("DCC_Integration")
	    		    		.append(System.getProperty("file.separator")).append("LIMIT_INCREASE.txt").toString();
						    BufferedReader sbf=new BufferedReader(new FileReader(fileLocation));
				    		
				    		StringBuilder sb=new StringBuilder();
				    		String line=sbf.readLine();
				    		while(line!=null)
				    		{
				    			sb.append(line);
				    			sb.append(System.lineSeparator());
				    			line=sbf.readLine();
				    		}
				    		Notify_app_input_xml=sb.toString();
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#WI_NAME#", processInstanceID);
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#PROSPECTID#", prospect_id);
				    		Notify_app_input_xml=Notify_app_input_xml.replace("dd-mm-yyyy", actionDate);
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#CARDLIMIT#",Card_Limit );
				    		
				    		DCCNotifyLog.DCCNotifyLogger.debug("Notify_app_input_xml LIMIT INC: " + Notify_app_input_xml);
			    		}
			    		else if("Expire_Prospect".equalsIgnoreCase(NOTIFY_DEH_IDENTIFIER))
			    		{
			    			String actionDate="";
			    			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");//YYYY-MM-DD
			    			actionDate=simpleDateFormat.format(new Date());
				    		String fileLocation=new StringBuffer().append(System.getProperty("user.dir")).append(System.getProperty("file.separator")).append("DCC_Integration")
	    		    		.append(System.getProperty("file.separator")).append("EXPIRED_PROS_CLOSURE.txt").toString();
						    BufferedReader sbf=new BufferedReader(new FileReader(fileLocation));
				    		
				    		StringBuilder sb=new StringBuilder();
				    		String line=sbf.readLine();
				    		while(line!=null)
				    		{
				    			sb.append(line);
				    			sb.append(System.lineSeparator());
				    			line=sbf.readLine();
				    		}
				    		Notify_app_input_xml=sb.toString();
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#WI_NAME#", processInstanceID);
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#PROSPECTID#", prospect_id);
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#CLOSE_PROSPECT#", "Y");
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#DecisionDate#", actionDate);
				    		
				    		if("CB".equalsIgnoreCase(firco))
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#FIRCO_DECLINE#", "Y");
				    		}
				    		else if("N".equalsIgnoreCase(firco)||"FP".equalsIgnoreCase(firco))
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#FIRCO_DECLINE#", "N");
				    		}
				    		else
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#FIRCO_DECLINE#", "");
				    		}
				    		
				    		if("D".equalsIgnoreCase(DectechDecision))
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECTCH_DECLINE#", "Y");
				    		}
				    		else if("A".equalsIgnoreCase(DectechDecision) || "R".equalsIgnoreCase(DectechDecision))
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECTCH_DECLINE#", "N");
				    		}
				    		else
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECTCH_DECLINE#", "");
				    		}
				    		if("Confirmed Fraud".equalsIgnoreCase(efms))
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#EFMS_DECLINE#", "Y");
				    		}
				    		else if("Non-Alerted".equalsIgnoreCase(efms) || "Closed".equalsIgnoreCase(efms))
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#EFMS_DECLINE#", "N");
				    		}
				    		else
				    		{
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#EFMS_DECLINE#", "");
				    		}
				    		if(LIFESTYLE!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#LIFESTYLE#", LIFESTYLE);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#LIFESTYLE#", "");
				    		if(AECB_MONTHLY!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AECB_MONTHLY#", AECB_MONTHLY);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AECB_MONTHLY#", "");
				    		if(STRESS!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#STRESS#", STRESS);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#STRESS#", "");
				    		if(ASS_INCOME!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#ASS_INCOME#", ASS_INCOME);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#ASS_INCOME#","");
				    		if(AFF_RATIO!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AFF_RATIO#",AFF_RATIO);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#AFF_RATIO#","");
				    		if(cardType!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#CARD_TYPE#", cardType);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#CARD_TYPE#", "");
				    		if(Decline_reason!=null)
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECLINE_REASON#", Decline_reason);
				    		else
				    			Notify_app_input_xml=Notify_app_input_xml.replace("#DECLINE_REASON#", "");
				    		
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#DEDUCTION#", "");
				    		Notify_app_input_xml=Notify_app_input_xml.replace("#DISPOSE#", "");
				    		
				    		DCCNotifyLog.DCCNotifyLogger.debug("Notify_app_input_xml Expire_Prospect: " + Notify_app_input_xml);
				    	}
			    	}
			   }

		    		DCCNotifyLog.DCCNotifyLogger.debug("Notify_appliation: " + Notify_app_input_xml);
						
					String integrationStatus="Success";
					String attributesTag;
					String ErrDesc = "";
					StringBuilder finalString=new StringBuilder();
					finalString = finalString.append(Notify_app_input_xml);
					//changes need to done to updae the correct flag
					//HashMap<String, String> socketConnectionMap =socketConnectionDetails(cabinetName, sJtsIp, iJtsPort, sessionId); 
					
					integrationStatus = socketConnection(cabinetName, CommonConnection.getUsername(), sessionId, sJtsIp, iJtsPort, processInstanceID, ws_name, 60, 65,socketDetailsMap, finalString);
					
					XMLParser xmlParserSocketDetails= new XMLParser(integrationStatus);
					DCCNotifyLog.DCCNotifyLogger.debug(" xmlParserSocketDetails : "+xmlParserSocketDetails);
				    String return_code = xmlParserSocketDetails.getValueOf("ReturnCode");
				    DCCNotifyLog.DCCNotifyLogger.debug("Return Code: "+return_code+ "WI: "+processInstanceID);
				    String return_desc = xmlParserSocketDetails.getValueOf("ReturnDesc");
				    DCCNotifyLog.DCCNotifyLogger.debug("return_desc : "+return_desc+ "WI: "+processInstanceID);
					
				    String MsgId ="";
				    if (integrationStatus.contains("<MessageId>"))
						MsgId = xmlParserSocketDetails.getValueOf("MessageId");
					
				    DCCNotifyLog.DCCNotifyLogger.debug("MsgId : "+MsgId+" for WI: "+processInstanceID);
					
				    if(return_code.equalsIgnoreCase("0000"))
				    {
				    	integrationStatus="Success";
				    	ErrDesc = "Notify Done Successfully";
				    }
				    else
				    {
				    	integrationStatus="Failed";
				    	ErrDesc = "Error in Notify DEH";
				    }
					if ("Success".equalsIgnoreCase(integrationStatus))
					{
						decisionValue = "Success";
						DCCNotifyLog.DCCNotifyLogger.debug("Decision in success: " +decisionValue);
						attributesTag="<Decision>"+decisionValue+"</Decision>";
					}
					else
					{
						ErrDesc = return_desc; //integrationStatus.replace("~", ",").replace("|", "\n");
						decisionValue = "Failed";
						DCCNotifyLog.DCCNotifyLogger.debug("Decision in else : " +decisionValue);
						attributesTag="<Decision>"+decisionValue+"</Decision>";
					}

					//To be modified according to output of Integration Call.

					//Lock Workitem.
					String getWorkItemInputXML = CommonMethods.getWorkItemInput(cabinetName, sessionId, processInstanceID,WorkItemID);
					String getWorkItemOutputXml = CommonMethods.WFNGExecute(getWorkItemInputXML,sJtsIp,iJtsPort,1);
					DCCNotifyLog.DCCNotifyLogger.debug("Output XML For WmgetWorkItemCall: " + getWorkItemOutputXml);

					XMLParser xmlParserGetWorkItem = new XMLParser(getWorkItemOutputXml);
					String getWorkItemMainCode = xmlParserGetWorkItem.getValueOf("MainCode");
					DCCNotifyLog.DCCNotifyLogger.debug("WmgetWorkItemCall Maincode:  "+ getWorkItemMainCode);

					if (getWorkItemMainCode.trim().equals("0") || true )
					{
						DCCNotifyLog.DCCNotifyLogger.debug("WMgetWorkItemCall Successful: "+getWorkItemMainCode);

						//String assignWorkitemAttributeInputXML=CommonMethods.assignWorkitemAttributeInput(cabinetName, sessionId,processInstanceID,WorkItemID,attributesTag);
						
						String assignWorkitemAttributeInputXML = "<?xml version=\"1.0\"?><WMAssignWorkItemAttributes_Input>"
								+ "<Option>WMAssignWorkItemAttributes</Option>"
								+ "<EngineName>"+cabinetName+"</EngineName>"
								+ "<SessionId>"+sessionId+"</SessionId>"
								+ "<ProcessInstanceId>"+processInstanceID+"</ProcessInstanceId>"
								+ "<WorkItemId>"+WorkItemID+"</WorkItemId>"
								+ "<ActivityId>"+ActivityID+"</ActivityId>"
								+ "<ProcessDefId>"+ProcessDefId+"</ProcessDefId>"
								+ "<LastModifiedTime></LastModifiedTime>"
								+ "<ActivityType>"+ActivityType+"</ActivityType>"
								+ "<complete>D</complete>"
								+ "<AuditStatus></AuditStatus>"
								+ "<Comments></Comments>"
								+ "<UserDefVarFlag>Y</UserDefVarFlag>"
								+ "<Attributes>"+attributesTag+"</Attributes>"
								+ "</WMAssignWorkItemAttributes_Input>";
						
						DCCNotifyLog.DCCNotifyLogger.debug("InputXML for assignWorkitemAttribute Call Notify: "+assignWorkitemAttributeInputXML);

						String assignWorkitemAttributeOutputXML=CommonMethods.WFNGExecute(assignWorkitemAttributeInputXML,sJtsIp,
								iJtsPort,1);
						
						DCCNotifyLog.DCCNotifyLogger.debug("OutputXML for assignWorkitemAttribute Call Notify: "+assignWorkitemAttributeOutputXML);
						
						XMLParser xmlParserWorkitemAttribute = new XMLParser(assignWorkitemAttributeOutputXML);
						String assignWorkitemAttributeMainCode = xmlParserWorkitemAttribute.getValueOf("MainCode");
						DCCNotifyLog.DCCNotifyLogger.debug("AssignWorkitemAttribute MainCode: "+assignWorkitemAttributeMainCode);

						if(assignWorkitemAttributeMainCode.trim().equalsIgnoreCase("0"))
						{
							DCCNotifyLog.DCCNotifyLogger.debug("AssignWorkitemAttribute Successful: "+assignWorkitemAttributeMainCode);
							System.out.println(processInstanceID + "Complete Succesfully with status "+decisionValue);
							DCCNotifyLog.DCCNotifyLogger.debug("WorkItem moved to next Workstep.");
						}
						else
						{
							DCCNotifyLog.DCCNotifyLogger.debug("decisionValue : "+decisionValue);
						}
						
						DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
						
						Date current_date = new Date();
						String formattedEntryDatetime=dateFormat.format(current_date);
						DCCNotifyLog.DCCNotifyLogger.debug("FormattedEntryDatetime: "+formattedEntryDatetime);
						
						String columnNames="wi_name,decision_date_time,workstep,user_name,Decision,Remarks";
						String columnValues="'"+processInstanceID+"','"+formattedEntryDatetime+"','"+ActivityName+"','"
						+CommonConnection.getUsername()+"','"+decisionValue+"','"+ErrDesc+"'";

						String apInsertInputXML=CommonMethods.apInsert(cabinetName, sessionId, columnNames, columnValues,"NG_DCC_GR_DECISION_HISTORY");
						DCCNotifyLog.DCCNotifyLogger.debug("APInsertInputXML: "+apInsertInputXML);

						String apInsertOutputXML = CommonMethods.WFNGExecute(apInsertInputXML,sJtsIp,iJtsPort,1);
						DCCNotifyLog.DCCNotifyLogger.debug("APInsertOutputXML: "+ apInsertInputXML);

						XMLParser xmlParserAPInsert = new XMLParser(apInsertOutputXML);
						String apInsertMaincode = xmlParserAPInsert.getValueOf("MainCode");
						DCCNotifyLog.DCCNotifyLogger.debug("Status of apInsertMaincode  "+ apInsertMaincode);

						DCCNotifyLog.DCCNotifyLogger.debug("Completed On "+ ActivityName);

						if(apInsertMaincode.equalsIgnoreCase("0"))
						{
							DCCNotifyLog.DCCNotifyLogger.debug("ApInsert successful: "+apInsertMaincode);
							DCCNotifyLog.DCCNotifyLogger.debug("Inserted in WiHistory table successfully.");
						}
						else
						{
							DCCNotifyLog.DCCNotifyLogger.debug("ApInsert failed: "+apInsertMaincode);
						}
					}
					else
					{
						getWorkItemMainCode="";
						DCCNotifyLog.DCCNotifyLogger.debug("WmgetWorkItem failed: "+getWorkItemMainCode);
					}
				}
			}
		}
			catch (Exception e)

		{
			DCCNotifyLog.DCCNotifyLogger.debug("Exception: "+e.getMessage());
		}
	}
	
	String socketConnection(String cabinetName, String username, String sessionId, String sJtsIp, String iJtsPort, String processInstanceID, String ws_name,
			int connection_timeout, int integrationWaitTime,HashMap<String, String> socketDetailsMap, StringBuilder sInputXML)
	{

		String socketServerIP;
		int socketServerPort;
		Socket socket = null;
		OutputStream out = null;
		InputStream socketInputStream = null;
		DataOutputStream dout = null;
		DataInputStream din = null;
		String outputResponse = null;
		String inputRequest = null;
		String inputMessageID = null;

		try
		{

			DCCNotifyLog.DCCNotifyLogger.debug("userName "+ username);
			DCCNotifyLog.DCCNotifyLogger.debug("SessionId "+ sessionId);

			socketServerIP=socketDetailsMap.get("SocketServerIP");
			DCCNotifyLog.DCCNotifyLogger.debug("SocketServerIP "+ socketServerIP);
			socketServerPort=Integer.parseInt(socketDetailsMap.get("SocketServerPort"));
			DCCNotifyLog.DCCNotifyLogger.debug("SocketServerPort "+ socketServerPort);

	   		if (!("".equalsIgnoreCase(socketServerIP) && socketServerIP == null && socketServerPort==0))
	   		{

    			socket = new Socket(socketServerIP, socketServerPort);
    			socket.setSoTimeout(connection_timeout*1000);
    			out = socket.getOutputStream();
    			socketInputStream = socket.getInputStream();
    			dout = new DataOutputStream(out);
    			din = new DataInputStream(socketInputStream);
    			DCCNotifyLog.DCCNotifyLogger.debug("Dout " + dout);
    			DCCNotifyLog.DCCNotifyLogger.debug("Din " + din);

    			outputResponse = "";

    			inputRequest = getRequestXML(cabinetName,sessionId ,processInstanceID, ws_name, username, sInputXML);


    			if (inputRequest != null && inputRequest.length() > 0)
    			{
    				int inputRequestLen = inputRequest.getBytes("UTF-16LE").length;
    				DCCNotifyLog.DCCNotifyLogger.debug("RequestLen: "+inputRequestLen + "");
    				inputRequest = inputRequestLen + "##8##;" + inputRequest;
    				DCCNotifyLog.DCCNotifyLogger.debug("InputRequest"+"Input Request Bytes : "+ inputRequest.getBytes("UTF-16LE"));
    				dout.write(inputRequest.getBytes("UTF-16LE"));dout.flush();
    			}
    			byte[] readBuffer = new byte[500];
    			int num = din.read(readBuffer);
    			if (num > 0)
    			{
    				byte[] arrayBytes = new byte[num];
    				System.arraycopy(readBuffer, 0, arrayBytes, 0, num);
    				outputResponse = outputResponse+ new String(arrayBytes, "UTF-16LE");
					inputMessageID = outputResponse;
    				DCCNotifyLog.DCCNotifyLogger.debug("OutputResponse: "+outputResponse);

    				if(!"".equalsIgnoreCase(outputResponse))
    					outputResponse = getResponseXML(cabinetName,sJtsIp,iJtsPort,sessionId, processInstanceID,outputResponse,integrationWaitTime);

    				if(outputResponse.contains("&lt;"))
    				{
    					outputResponse=outputResponse.replaceAll("&lt;", "<");
    					outputResponse=outputResponse.replaceAll("&gt;", ">");
    				}
    			}
    			socket.close();

				outputResponse = outputResponse.replaceAll("</MessageId>","</MessageId>/n<InputMessageId>"+inputMessageID+"</InputMessageId>");

				//DCCNotifyAPPLog.DCCNotifyLogger.debug("outputResponse "+outputResponse);
				return outputResponse;

    	 		}

    		else
    		{
    			DCCNotifyLog.DCCNotifyLogger.debug("SocketServerIp and SocketServerPort is not maintained "+"");
    			DCCNotifyLog.DCCNotifyLogger.debug("SocketServerIp is not maintained "+	socketServerIP);
    			DCCNotifyLog.DCCNotifyLogger.debug(" SocketServerPort is not maintained "+	socketServerPort);
    			return "Socket Details not maintained";
    		}

		}

		catch (Exception e)
		{
			System.out.println(e.getMessage());
			DCCNotifyLog.DCCNotifyLogger.debug("Exception Occured Mq_connection_CC"+e.getStackTrace());
			return "";
		}
		finally
		{
			try
			{
				if(out != null)
				{
					out.close();
					out=null;
				}
				if(socketInputStream != null)
				{

					socketInputStream.close();
					socketInputStream=null;
				}
				if(dout != null)
				{

					dout.close();
					dout=null;
				}
				if(din != null)
				{

					din.close();
					din=null;
				}
				if(socket != null)
				{
					if(!socket.isClosed())
						socket.close();
					socket=null;
				}

			}

			catch(Exception e)
			{
				DCCNotifyLog.DCCNotifyLogger.debug("Final Exception Occured Mq_connection_CC"+e.getStackTrace());
				//printException(e);
			}
		}


	}
	private String getResponseXML(String cabinetName,String sJtsIp,String iJtsPort, String sessionId, String processInstanceID,String message_ID, int integrationWaitTime)
	{

		String outputResponseXML="";
		try
		{
			String QueryString = "select OUTPUT_XML from NG_DCC_XMLLOG_HISTORY with (nolock) where MESSAGE_ID ='"+message_ID+"' and WI_NAME = '"+processInstanceID+"'";

			String responseInputXML =CommonMethods.apSelectWithColumnNames(QueryString, cabinetName, sessionId);
			DCCNotifyLog.DCCNotifyLogger.debug("Response APSelect InputXML: "+responseInputXML);

			int Loop_count=0;
			do
			{
				String responseOutputXML=CommonMethods.WFNGExecute(responseInputXML,sJtsIp,iJtsPort,1);
				DCCNotifyLog.DCCNotifyLogger.debug("Response APSelect OutputXML: "+responseOutputXML);

			    XMLParser xmlParserSocketDetails= new XMLParser(responseOutputXML);
			    String responseMainCode = xmlParserSocketDetails.getValueOf("MainCode");
			    DCCNotifyLog.DCCNotifyLogger.debug("ResponseMainCode: "+responseMainCode);



			    int responseTotalRecords = Integer.parseInt(xmlParserSocketDetails.getValueOf("TotalRetrieved"));
			    DCCNotifyLog.DCCNotifyLogger.debug("ResponseTotalRecords: "+responseTotalRecords);

			    if (responseMainCode.equals("0") && responseTotalRecords > 0)
				{

					String responseXMLData=xmlParserSocketDetails.getNextValueOf("Record");
					responseXMLData =responseXMLData.replaceAll("[ ]+>",">").replaceAll("<[ ]+", "<");

	        		XMLParser xmlParserResponseXMLData = new XMLParser(responseXMLData);
	        		//DCCNotifyAPPLog.DCCNotifyLogger.debug("ResponseXMLData: "+responseXMLData);

	        		outputResponseXML=xmlParserResponseXMLData.getValueOf("OUTPUT_XML");
	        		//DCCNotifyAPPLog.DCCNotifyLogger.debug("OutputResponseXML: "+outputResponseXML);

	        		if("".equalsIgnoreCase(outputResponseXML)){
	        			outputResponseXML="Error";
	    			}
	        		break;
				}
			    Loop_count++;
			    Thread.sleep(1000);
			}
			while(Loop_count<integrationWaitTime);
			DCCNotifyLog.DCCNotifyLogger.debug("integrationWaitTime: "+integrationWaitTime);

		}
		catch(Exception e)
		{
			DCCNotifyLog.DCCNotifyLogger.debug("Exception occurred in outputResponseXML" + e.getMessage());
			outputResponseXML="Error";
		}

		return outputResponseXML;

	}
	
	private String getRequestXML(String cabinetName, String sessionId,
			String processInstanceID, String ws_name, String userName, StringBuilder sInputXML)
	{
		StringBuffer strBuff = new StringBuffer();
		strBuff.append("<APMQPUTGET_Input>");
		strBuff.append("<SessionId>" + sessionId + "</SessionId>");
		strBuff.append("<EngineName>" + cabinetName + "</EngineName>");
		strBuff.append("<XMLHISTORY_TABLENAME>NG_DCC_XMLLOG_HISTORY</XMLHISTORY_TABLENAME>");
		strBuff.append("<WI_NAME>" + processInstanceID + "</WI_NAME>");
		strBuff.append("<WS_NAME>" + ws_name + "</WS_NAME>");
		strBuff.append("<USER_NAME>" + userName + "</USER_NAME>");
		strBuff.append("<MQ_REQUEST_XML>");
		strBuff.append(sInputXML);
		strBuff.append("</MQ_REQUEST_XML>");
		strBuff.append("</APMQPUTGET_Input>");
		DCCNotifyLog.DCCNotifyLogger.debug("GetRequestXML: "+ strBuff.toString());
		return strBuff.toString();
	}
	

	private int readConfig() {
		Properties p = null;
		try {

			p = new Properties();
			p.load(new FileInputStream(new File(System.getProperty("user.dir") + File.separator + "ConfigFiles" + File.separator + "DCC_Notify_Config.properties")));

			Enumeration<?> names = p.propertyNames();

			while (names.hasMoreElements()) {
				String name = (String) names.nextElement();
				NotifyAppConfigParamMap.put(name, p.getProperty(name));
			}
		} catch (Exception e) {
			return -1;
		}
		return 0;
	}
	
	private String getMonthNumber(String month)
	{
		String ans="";
		try
		{
			switch(month)
			{
			case "January" :
				ans="01";
				break;
			case "February" :
				ans="02";
				break;
			case "March" :
				ans="03";
				break;
			case "April" :
				ans="04";
				break;
			case "May" :
				ans="05";
				break;
			case "June" :
				ans="06";
				break;
			case "July" :
				ans="07";
				break;
			case "August" :
				ans="08";
				break;
			case "September" :
				ans="09";
				break;
			case "October" :
				ans="10";
				break;
			case "November" :
				ans="11";
				break;
			case "December" :
				ans="12";
				break;
			}
		}
		catch(Exception e)
		{
			DCCNotifyLog.DCCNotifyLogger.debug("Exceptione in getting month no from month name--"+ e.toString());
		}
		
		return ans;
	}
	private String downloadAttachDocuments(String processInstanceID)
	{
		try
		{
			DCCNotifyLog.DCCNotifyLogger.debug("Doclist to download.."+docList);
			String query123 = "select name as DOCUMENTNAME, AppName as APPNAME , ImageIndex as IMAGE_INDEX,  VolumeId as VOLUME_ID from PDBDocument with(nolock) where name in ('"+docList+"') and DocumentIndex in ( select DocumentIndex from PDBDocumentContent where ParentFolderIndex = (select itemindex from NG_DCC_EXTTABLE with(nolock) where Wi_Name='"+processInstanceID+"'))";
			String sessionID = CommonConnection.getSessionID(DCCNotifyLog.DCCNotifyLogger, false);
			String sInputXML123 = "<?xml version=\"1.0\"?>"+
					"<APSelectWithColumnNames_Input>"+ 
					"<Option>APSelectWithColumnNames</Option>"+
					"<EngineName>" + cabinetName + "</EngineName> "+
					"<SessionId>" + sessionID + "</SessionId>"+
					"<Query>" + query123 + "</Query>"+
					"</APSelectWithColumnNames_Input>";
					
			DCCNotifyLog.DCCNotifyLogger.debug("Input:123"+sInputXML123);	
			String sOutputXml = CommonMethods.WFNGExecute(sInputXML123,jtsIP,jtsPort,1);
			DCCNotifyLog.DCCNotifyLogger.debug("sOutputXml"+sOutputXml);
			XMLParser xmlParserData = new XMLParser(sOutputXml);
			String mainCode=xmlParserData.getValueOf("MainCode");
			if("0".equalsIgnoreCase(mainCode) && Integer.parseInt(xmlParserData.getValueOf("TotalRetrieved"))>0)
			{
				String Records = xmlParserData.getNextValueOf("Records");
				DCCNotifyLog.DCCNotifyLogger.debug("TotalRecords: "+Records);
				String parseStringArray[]=CommonMethods.getTagValues(Records, "Record").split("`");
				DCCNotifyLog.DCCNotifyLogger.debug("Total no of documents: "+parseStringArray.length);
				File file = new File(propDocsPath+System.getProperty("file.separator")+processInstanceID);
				if (!file.exists()) 
				{
					if (file.mkdir()) 
					{
								
					} 
					else 
					{
											
					}
				}
				
				propDocsPath=propDocsPath+System.getProperty("file.separator")+processInstanceID+System.getProperty("file.separator");
				for(int j=0;j<parseStringArray.length;j++)
				{
					WFXmlResponse parsergetlist = new WFXmlResponse(parseStringArray[j]);
					String docname=parsergetlist.getVal("DOCUMENTNAME");
					String imageindex=parsergetlist.getVal("IMAGE_INDEX");
					int volid=Integer.parseInt(parsergetlist.getVal("VOLUME_ID"));
					String ext =parsergetlist.getVal("APPNAME");
				
				
					DCCNotifyLog.DCCNotifyLogger.debug("sOutputXml docname : "+docname);
					DCCNotifyLog.DCCNotifyLogger.debug("sOutputXml imageindex : "+imageindex);
					DCCNotifyLog.DCCNotifyLogger.debug("sOutputXml volid : "+volid);
					DCCNotifyLog.DCCNotifyLogger.debug("sOutputXml  ext: "+ext);
					
					DCCNotifyLog.DCCNotifyLogger.debug("fewfewbnfewbnfejn  ffewfewfext: "+parseStringArray.length);
									
					DCCNotifyLog.DCCNotifyLogger.debug("temppppp"+propDocsPath);
					DCCNotifyLog.DCCNotifyLogger.debug("dfdsfsdf"+imageindex);
					DCCNotifyLog.DCCNotifyLogger.debug("temppppp"+jtsPort);
					DCCNotifyLog.DCCNotifyLogger.debug("IP"+jtsIP);
					try
					{
						CImageServer cImageServer=null;
						try 
						{
							cImageServer = new CImageServer(null,jtsIP, Short.parseShort(jtsPort));
						}
						catch (JPISException e) 
						{
							DCCNotifyLog.DCCNotifyLogger.debug(e.toString());
							//msg = e.getMessage();
							return null;
			
						}
						DCCNotifyLog.DCCNotifyLogger.debug("inside tryyyy ");
						try{
						   /* JPDBString siteName = new JPDBString();
						    
						    CPISDocumentTxn.GetDocInFile_MT(null, "127.0.0.1", (short)Integer.parseInt(jtsPort),
						    cabinetName, (short)1,(short)volid, Integer.parseInt(imageindex),null, propDocsPath+docname+"."+ext, siteName);
						    */
							DCCNotifyLog.DCCNotifyLogger.debug("jtsPort : "+jtsPort);
							DCCNotifyLog.DCCNotifyLogger.debug("cabinetName  : "+cabinetName);
							DCCNotifyLog.DCCNotifyLogger.debug("volid volid : "+volid);
							DCCNotifyLog.DCCNotifyLogger.debug("doc location: "+propDocsPath+docname+"."+ext);
							int odDownloadCode=cImageServer.JPISGetDocInFile_MT(null,jtsIP, Short.parseShort(jtsPort), cabinetName, Short.parseShort("1"),Short.parseShort(String.valueOf(volid)), 
									Integer.parseInt(imageindex),"",propDocsPath+docname+"."+ext, new JPDBString());
							if(odDownloadCode==1)
							{
								DCCNotifyLog.DCCNotifyLogger.debug("CALL_COMPLETE");
							}
						    

						}catch(Exception e)
						{
							DCCNotifyLog.DCCNotifyLogger.debug("Exception-"+e.toString());
							DCCNotifyLog.DCCNotifyLogger.debug("sOutputXml : sadfdsfsdf");
							return null;
							//e.printStackTrace();
						} /*catch (JPISException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
							DCCNotifyLog.DCCNotifyLogger.debug("Exception-"+e.toString());
							return null;
						}*/
						DCCNotifyLog.DCCNotifyLogger.debug("dddd");	
					}
					catch(Exception e)
					{
							DCCNotifyLog.DCCNotifyLogger.debug("Exception-"+e.toString());
							DCCNotifyLog.DCCNotifyLogger.debug("sOutputXml : sadfdsfsdf");
							return null;
							//e.printStackTrace();
					}
				}
			}
			else
			{
				DCCNotifyLog.DCCNotifyLogger.debug("No documents records received from apselect-"+mainCode);
			}
		}
		catch(Exception e)
		{
			DCCNotifyLog.DCCNotifyLogger.debug("Exception-"+e.toString());
			return null;
		}
		return "Done";
	}
}



