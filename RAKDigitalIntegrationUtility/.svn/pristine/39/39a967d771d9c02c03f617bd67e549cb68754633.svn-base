package com.newgen.DCC.CAMGenCIFUpdate;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.SocketException;
import java.util.Properties;

//import com.itextpdf.io.image.ImageData;
//import com.itextpdf.io.image.ImageDataFactory;
//import com.itextpdf.kernel.pdf.PdfDocument;
//import com.itextpdf.kernel.pdf.PdfWriter;
//import com.itextpdf.layout.element.Cell;
//import com.itextpdf.layout.element.IBlockElement;
//import com.itextpdf.layout.element.Table;
//import com.itextpdf.layout.properties.HorizontalAlignment;
//import com.itextpdf.layout.properties.TextAlignment;
//
//import com.itextpdf.text.BaseColor;
//import com.itextpdf.layout.Document;
//import com.itextpdf.layout.element.Image;
//
//import com.itextpdf.text.PageSize;
//import com.itextpdf.layout.element.Paragraph;
//import com.itextpdf.text.Phrase;
//import com.itextpdf.text.pdf.PdfPCell;
//import com.itextpdf.text.pdf.PdfPTable;

import com.newgen.common.CommonConnection;
import com.newgen.common.CommonMethods;
import com.newgen.omni.jts.cmgr.XMLParser;

public class Digital_CC_CAMTemplate  {

	public String generate_CAM_ReportT(String pdfName,String Cif_Id, String processInstanceID, String sessionId) throws IOException,
			Exception {

		Digital_CCLog.Digital_CC.debug("Inside generate cam report method: ");

		String prop_file_loc= System.getProperty("user.dir")+ System.getProperty("file.separator")+ "ConfigFiles" + System.getProperty("file.separator")+ "DCC_CAMGen_Config.properties";
		Digital_CCLog.Digital_CC.debug("prop_file_loc: " + prop_file_loc);
		
		File file = new File(prop_file_loc);
        FileInputStream fileInput = new FileInputStream(file);
        Properties properties = new Properties();
        properties.load(fileInput);
        fileInput.close();
        
        
         String gtIP= properties.getProperty("gtIP");
         Digital_CCLog.Digital_CC.debug("gtIP: " + gtIP);
         
         String gtPortProperty = properties.getProperty("gtPort");
         Digital_CCLog.Digital_CC.debug("gtPortProperty: " + gtPortProperty);
         
		 int gtPort = Integer.parseInt(gtPortProperty); 
		 Digital_CCLog.Digital_CC.debug("gtPort: " + gtPort);

		String Query = "select distinct Created_Date,Is_STP,CUSTOMERNAME,Nationality, Product_Desc,card_application_date,Age,IPA_Limit,EFMS_Status,Requested_Limit,FIRCO_Status, Employer_Name,dob,Designation,employercode,FinalDBR,Aecb_score,Final_Limit,DBR_lifeStyle_expenses,deviation_description,delegation_authority from NG_DCC_EXTTABLE with (NOLOCK) where Wi_Name ='"
				+ processInstanceID + "'";

		Digital_CCLog.Digital_CC.debug("Query : " + Query);

		String extTabDataIPXML = CommonMethods.apSelectWithColumnNames(Query, CommonConnection.getCabinetName(),
				CommonConnection.getSessionID(Digital_CCLog.Digital_CC, false));
		Digital_CCLog.Digital_CC.debug("extTabDataIPXML: " + extTabDataIPXML);
		String extTabDataOPXML = CommonMethods.WFNGExecute(extTabDataIPXML, CommonConnection.getJTSIP(),
				CommonConnection.getJTSPort(), 1);
		Digital_CCLog.Digital_CC.debug("extTabDataOPXML: " + extTabDataOPXML);

		XMLParser xmlParserData = new XMLParser(extTabDataOPXML);

		// variables
		String attrbList = "";
		String Is_STP = xmlParserData.getValueOf("Is_STP");
		Digital_CCLog.Digital_CC.debug("Is_STP: " + Is_STP);

		String Created_Date = xmlParserData.getValueOf("Created_Date");
		Digital_CCLog.Digital_CC.debug("Created_Date: " + Created_Date);

		String CifId = xmlParserData.getValueOf("CifId");
		String CUSTOMERNAME = xmlParserData.getValueOf("CUSTOMERNAME");
		Digital_CCLog.Digital_CC.debug("CUSTOMERNAME: " + CUSTOMERNAME);

		String Nationality = xmlParserData.getValueOf("Nationality");
		Digital_CCLog.Digital_CC.debug("Nationality: " + Nationality);

		String Product_Desc = xmlParserData.getValueOf("Product_Desc");
		Digital_CCLog.Digital_CC.debug("Product_Desc: " + Product_Desc);

		String card_application_date = xmlParserData.getValueOf("card_application_date");
		Digital_CCLog.Digital_CC.debug("card_application_date: " + card_application_date);

		String Age = xmlParserData.getValueOf("Age");
		Digital_CCLog.Digital_CC.debug("Age: " + Age);

		String IPA_Limit = xmlParserData.getValueOf("IPA_Limit");
		Digital_CCLog.Digital_CC.debug("IPA_Limit: " + IPA_Limit);

		String EFMS_Status = xmlParserData.getValueOf("EFMS_Status");
		Digital_CCLog.Digital_CC.debug("EFMS_Status: " + EFMS_Status);

		String Requested_Limit = xmlParserData.getValueOf("Requested_Limit");
		Digital_CCLog.Digital_CC.debug("Requested_Limit: " + Requested_Limit);

		String FIRCO_Status = xmlParserData.getValueOf("FIRCO_Status");
		Digital_CCLog.Digital_CC.debug("FIRCO_Status: " + FIRCO_Status);

		String response = "";
		
		
//		String TemplatePath = "E:/EclipseWorkSpace/RAKDigitalIntegrationUtility/PDFTemplates/generated/"
//				+ processInstanceID + pdfName + ".pdf";
//		Digital_CCLog.Digital_CC.debug("TemplatePath" + TemplatePath);
		
	
		attrbList += "&<currentDateTime>&" + Created_Date;
		attrbList += "&<customerName>&" + CUSTOMERNAME;
		attrbList += "&<nationality>&" + Nationality;
		attrbList += "&<cardType>&" + Product_Desc;
		attrbList += "&<cardApplicationDate>&" + card_application_date;
		attrbList += "&<workitemNumber>&" + processInstanceID;
		attrbList += "&<CIF>&" + Cif_Id;
		attrbList += "&<age>&" + Age;
		attrbList += "&<productType>&" + Product_Desc;
		attrbList += "&<IPALimit>&" + IPA_Limit;
		attrbList += "&<EFMSStatus>&" + EFMS_Status;
		attrbList += "&<requestedLimit>&" + Requested_Limit;
		attrbList += "&<fircoStatus>&" + FIRCO_Status;

		String output = makeSocketCall(attrbList, processInstanceID, pdfName, sessionId, gtIP, gtPort);
//		// response = AttachDocumentWithWI(processInstanceID,pdfName );
		Digital_CCLog.Digital_CC.debug("attrbList" + attrbList);
		Digital_CCLog.Digital_CC.debug("output" + output);

		String statusarr[] = output.split("~");

		return attrbList;

	}

	public String makeSocketCall(String argumentString, String wi_name, String docName, String sessionId, String gtIP,
			int gtPort) {
		String socketParams = argumentString + "~" + wi_name + "~" + docName + "~" + sessionId;

		System.out.println("socketParams -- " + socketParams);
		Digital_CCLog.Digital_CC.debug("socketParams" + socketParams);

		Socket template_socket = null;
		DataOutputStream template_dout = null;
		DataInputStream template_in = null;
		String result = "";
		try {
			// Socket write code started
			template_socket = new Socket(gtIP, gtPort);
			Digital_CCLog.Digital_CC.debug("template_socket" + template_socket);

			template_dout = new DataOutputStream(template_socket.getOutputStream());
			Digital_CCLog.Digital_CC.debug("template_dout" + template_dout);

			if (socketParams != null && socketParams.length() > 0) {
				int outPut_len = socketParams.getBytes("UTF-8").length;
				Digital_CCLog.Digital_CC.debug("outPut_len" + outPut_len);
				// CreditCard.mLogger.info("Final XML output len: "+outPut_len +
				// "");
				socketParams = outPut_len + "##8##;" + socketParams;
				Digital_CCLog.Digital_CC.debug("socketParams--" + socketParams);
				// CreditCard.mLogger.info("MqInputRequest"+"Input Request Bytes : "+
				// mqInputRequest.getBytes("UTF-16LE"));

				template_dout.write(socketParams.getBytes("UTF-8"));
				template_dout.flush();
			} else {
				notify();
			}
			// Socket write code ended and read code started
			template_socket.setSoTimeout(60 * 1000);
			template_in = new DataInputStream(new BufferedInputStream(template_socket.getInputStream()));
			byte[] readBuffer = new byte[50000];
			int num = template_in.read(readBuffer);
			if (num > 0) {
				byte[] arrayBytes = new byte[num];
				System.arraycopy(readBuffer, 0, arrayBytes, 0, num);
				result = new String(arrayBytes, "UTF-8");
			}
		}

		catch (SocketException se) {
			se.printStackTrace();
		} catch (IOException i) {
			i.printStackTrace();
		} catch (Exception io) {
			io.printStackTrace();
		} finally {
			try {
				if (template_dout != null) {
					template_dout.close();
					template_dout = null;
				}
				if (template_in != null) {
					template_in.close();
					template_in = null;
				}
				if (template_socket != null) {
					if (!template_socket.isClosed()) {
						template_socket.close();
					}
					template_socket = null;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return result;
	}
}
